"use strict";(self["webpackChunkvue3"]=self["webpackChunkvue3"]||[]).push([[504],{5110:function(){},144:function(I,g,C){C.d(g,{C4:function(){return o},EW:function(){return uI},Gc:function(){return sI},IG:function(){return wI},KR:function(){return MI},Kh:function(){return bI},Pr:function(){return eI},R1:function(){return XI},X2:function(){return i},bl:function(){return w},hZ:function(){return u},i9:function(){return JI},ju:function(){return aI},u4:function(){return y},ux:function(){return oI},wB:function(){return TI},yC:function(){return d}});C(4114),C(9678),C(7145),C(1658),C(9479),C(7642),C(8004),C(3853),C(5876),C(2475),C(5024),C(1698),C(8992),C(4520),C(3949),C(1454),C(7550);var A=C(4232);let l,Z;class d{constructor(I=!1){this.detached=I,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=l,!I&&l&&(this.index=(l.scopes||(l.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let I,g;if(this._isPaused=!0,this.scopes)for(I=0,g=this.scopes.length;I<g;I++)this.scopes[I].pause();for(I=0,g=this.effects.length;I<g;I++)this.effects[I].pause()}}resume(){if(this._active&&this._isPaused){let I,g;if(this._isPaused=!1,this.scopes)for(I=0,g=this.scopes.length;I<g;I++)this.scopes[I].resume();for(I=0,g=this.effects.length;I<g;I++)this.effects[I].resume()}}run(I){if(this._active){const g=l;try{return l=this,I()}finally{l=g}}else 0}on(){l=this}off(){l=this.parent}stop(I){if(this._active){let g,C;for(this._active=!1,g=0,C=this.effects.length;g<C;g++)this.effects[g].stop();for(this.effects.length=0,g=0,C=this.cleanups.length;g<C;g++)this.cleanups[g]();if(this.cleanups.length=0,this.scopes){for(g=0,C=this.scopes.length;g<C;g++)this.scopes[g].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!I){const I=this.parent.scopes.pop();I&&I!==this&&(this.parent.scopes[this.index]=I,I.index=this.index)}this.parent=void 0}}}function B(){return l}const F=new WeakSet;class i{constructor(I){this.fn=I,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,l&&l.active&&l.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,F.has(this)&&(F.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||V(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,Y(this),b(this);const I=Z,g=n;Z=this,n=!0;try{return this.fn()}finally{0,s(this),Z=I,n=g,this.flags&=-3}}stop(){if(1&this.flags){for(let I=this.deps;I;I=I.nextDep)N(I);this.deps=this.depsTail=void 0,Y(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?F.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Q(this)&&this.run()}get dirty(){return Q(this)}}let c,G,W=0;function V(I,g=!1){if(I.flags|=8,g)return I.next=G,void(G=I);I.next=c,c=I}function R(){W++}function U(){if(--W>0)return;if(G){let I=G;G=void 0;while(I){const g=I.next;I.next=void 0,I.flags&=-9,I=g}}let I;while(c){let C=c;c=void 0;while(C){const A=C.next;if(C.next=void 0,C.flags&=-9,1&C.flags)try{C.trigger()}catch(g){I||(I=g)}C=A}}if(I)throw I}function b(I){for(let g=I.deps;g;g=g.nextDep)g.version=-1,g.prevActiveLink=g.dep.activeLink,g.dep.activeLink=g}function s(I){let g,C=I.depsTail,A=C;while(A){const I=A.prevDep;-1===A.version?(A===C&&(C=I),N(A),h(A)):g=A,A.dep.activeLink=A.prevActiveLink,A.prevActiveLink=void 0,A=I}I.deps=g,I.depsTail=C}function Q(I){for(let g=I.deps;g;g=g.nextDep)if(g.dep.version!==g.version||g.dep.computed&&(m(g.dep.computed)||g.dep.version!==g.version))return!0;return!!I._dirty}function m(I){if(4&I.flags&&!(16&I.flags))return;if(I.flags&=-17,I.globalVersion===S)return;I.globalVersion=S;const g=I.dep;if(I.flags|=2,g.version>0&&!I.isSSR&&I.deps&&!Q(I))return void(I.flags&=-3);const C=Z,l=n;Z=I,n=!0;try{b(I);const C=I.fn(I._value);(0===g.version||(0,A.$H)(C,I._value))&&(I._value=C,g.version++)}catch(d){throw g.version++,d}finally{Z=C,n=l,s(I),I.flags&=-3}}function N(I,g=!1){const{dep:C,prevSub:A,nextSub:l}=I;if(A&&(A.nextSub=l,I.prevSub=void 0),l&&(l.prevSub=A,I.nextSub=void 0),C.subs===I&&(C.subs=A,!A&&C.computed)){C.computed.flags&=-5;for(let I=C.computed.deps;I;I=I.nextDep)N(I,!0)}g||--C.sc||!C.map||C.map.delete(C.key)}function h(I){const{prevDep:g,nextDep:C}=I;g&&(g.nextDep=C,I.prevDep=void 0),C&&(C.prevDep=g,I.nextDep=void 0)}let n=!0;const a=[];function o(){a.push(n),n=!1}function w(){const I=a.pop();n=void 0===I||I}function Y(I){const{cleanup:g}=I;if(I.cleanup=void 0,g){const I=Z;Z=void 0;try{g()}finally{Z=I}}}let S=0;class J{constructor(I,g){this.sub=I,this.dep=g,this.version=g.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class M{constructor(I){this.computed=I,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(I){if(!Z||!n||Z===this.computed)return;let g=this.activeLink;if(void 0===g||g.sub!==Z)g=this.activeLink=new J(Z,this),Z.deps?(g.prevDep=Z.depsTail,Z.depsTail.nextDep=g,Z.depsTail=g):Z.deps=Z.depsTail=g,D(g);else if(-1===g.version&&(g.version=this.version,g.nextDep)){const I=g.nextDep;I.prevDep=g.prevDep,g.prevDep&&(g.prevDep.nextDep=I),g.prevDep=Z.depsTail,g.nextDep=void 0,Z.depsTail.nextDep=g,Z.depsTail=g,Z.deps===g&&(Z.deps=I)}return g}trigger(I){this.version++,S++,this.notify(I)}notify(I){R();try{0;for(let I=this.subs;I;I=I.prevSub)I.sub.notify()&&I.sub.dep.notify()}finally{U()}}}function D(I){if(I.dep.sc++,4&I.sub.flags){const g=I.dep.computed;if(g&&!I.dep.subs){g.flags|=20;for(let I=g.deps;I;I=I.nextDep)D(I)}const C=I.dep.subs;C!==I&&(I.prevSub=C,C&&(C.nextSub=I)),I.dep.subs=I}}const t=new WeakMap,X=Symbol(""),H=Symbol(""),e=Symbol("");function y(I,g,C){if(n&&Z){let g=t.get(I);g||t.set(I,g=new Map);let A=g.get(C);A||(g.set(C,A=new M),A.map=g,A.key=C),A.track()}}function u(I,g,C,l,Z,d){const B=t.get(I);if(!B)return void S++;const F=I=>{I&&I.trigger()};if(R(),"clear"===g)B.forEach(F);else{const Z=(0,A.cy)(I),d=Z&&(0,A.yI)(C);if(Z&&"length"===C){const I=Number(l);B.forEach(((g,C)=>{("length"===C||C===e||!(0,A.Bm)(C)&&C>=I)&&F(g)}))}else switch((void 0!==C||B.has(void 0))&&F(B.get(C)),d&&F(B.get(e)),g){case"add":Z?d&&F(B.get("length")):(F(B.get(X)),(0,A.CE)(I)&&F(B.get(H)));break;case"delete":Z||(F(B.get(X)),(0,A.CE)(I)&&F(B.get(H)));break;case"set":(0,A.CE)(I)&&F(B.get(X));break}}U()}function p(I){const g=oI(I);return g===I?g:(y(g,"iterate",e),nI(I)?g:g.map(YI))}function k(I){return y(I=oI(I),"iterate",e),I}const K={__proto__:null,[Symbol.iterator](){return z(this,Symbol.iterator,YI)},concat(...I){return p(this).concat(...I.map((I=>(0,A.cy)(I)?p(I):I)))},entries(){return z(this,"entries",(I=>(I[1]=YI(I[1]),I)))},every(I,g){return L(this,"every",I,g,void 0,arguments)},filter(I,g){return L(this,"filter",I,g,(I=>I.map(YI)),arguments)},find(I,g){return L(this,"find",I,g,YI,arguments)},findIndex(I,g){return L(this,"findIndex",I,g,void 0,arguments)},findLast(I,g){return L(this,"findLast",I,g,YI,arguments)},findLastIndex(I,g){return L(this,"findLastIndex",I,g,void 0,arguments)},forEach(I,g){return L(this,"forEach",I,g,void 0,arguments)},includes(...I){return j(this,"includes",I)},indexOf(...I){return j(this,"indexOf",I)},join(I){return p(this).join(I)},lastIndexOf(...I){return j(this,"lastIndexOf",I)},map(I,g){return L(this,"map",I,g,void 0,arguments)},pop(){return x(this,"pop")},push(...I){return x(this,"push",I)},reduce(I,...g){return E(this,"reduce",I,g)},reduceRight(I,...g){return E(this,"reduceRight",I,g)},shift(){return x(this,"shift")},some(I,g){return L(this,"some",I,g,void 0,arguments)},splice(...I){return x(this,"splice",I)},toReversed(){return p(this).toReversed()},toSorted(I){return p(this).toSorted(I)},toSpliced(...I){return p(this).toSpliced(...I)},unshift(...I){return x(this,"unshift",I)},values(){return z(this,"values",YI)}};function z(I,g,C){const A=k(I),l=A[g]();return A===I||nI(I)||(l._next=l.next,l.next=()=>{const I=l._next();return I.value&&(I.value=C(I.value)),I}),l}const T=Array.prototype;function L(I,g,C,A,l,Z){const d=k(I),B=d!==I&&!nI(I),F=d[g];if(F!==T[g]){const g=F.apply(I,Z);return B?YI(g):g}let i=C;d!==I&&(B?i=function(g,A){return C.call(this,YI(g),A,I)}:C.length>2&&(i=function(g,A){return C.call(this,g,A,I)}));const c=F.call(d,i,A);return B&&l?l(c):c}function E(I,g,C,A){const l=k(I);let Z=C;return l!==I&&(nI(I)?C.length>3&&(Z=function(g,A,l){return C.call(this,g,A,l,I)}):Z=function(g,A,l){return C.call(this,g,YI(A),l,I)}),l[g](Z,...A)}function j(I,g,C){const A=oI(I);y(A,"iterate",e);const l=A[g](...C);return-1!==l&&!1!==l||!aI(C[0])?l:(C[0]=oI(C[0]),A[g](...C))}function x(I,g,C=[]){o(),R();const A=oI(I)[g].apply(I,C);return U(),w(),A}const O=(0,A.pD)("__proto__,__v_isRef,__isVue"),r=new Set(Object.getOwnPropertyNames(Symbol).filter((I=>"arguments"!==I&&"caller"!==I)).map((I=>Symbol[I])).filter(A.Bm));function v(I){(0,A.Bm)(I)||(I=String(I));const g=oI(this);return y(g,"has",I),g.hasOwnProperty(I)}class P{constructor(I=!1,g=!1){this._isReadonly=I,this._isShallow=g}get(I,g,C){if("__v_skip"===g)return I["__v_skip"];const l=this._isReadonly,Z=this._isShallow;if("__v_isReactive"===g)return!l;if("__v_isReadonly"===g)return l;if("__v_isShallow"===g)return Z;if("__v_raw"===g)return C===(l?Z?VI:WI:Z?GI:cI).get(I)||Object.getPrototypeOf(I)===Object.getPrototypeOf(C)?I:void 0;const d=(0,A.cy)(I);if(!l){let I;if(d&&(I=K[g]))return I;if("hasOwnProperty"===g)return v}const B=Reflect.get(I,g,JI(I)?I:C);return((0,A.Bm)(g)?r.has(g):O(g))?B:(l||y(I,"get",g),Z?B:JI(B)?d&&(0,A.yI)(g)?B:B.value:(0,A.Gv)(B)?l?QI(B):bI(B):B)}}class f extends P{constructor(I=!1){super(!1,I)}set(I,g,C,l){let Z=I[g];if(!this._isShallow){const g=hI(Z);if(nI(C)||hI(C)||(Z=oI(Z),C=oI(C)),!(0,A.cy)(I)&&JI(Z)&&!JI(C))return!g&&(Z.value=C,!0)}const d=(0,A.cy)(I)&&(0,A.yI)(g)?Number(g)<I.length:(0,A.$3)(I,g),B=Reflect.set(I,g,C,JI(I)?I:l);return I===oI(l)&&(d?(0,A.$H)(C,Z)&&u(I,"set",g,C,Z):u(I,"add",g,C)),B}deleteProperty(I,g){const C=(0,A.$3)(I,g),l=I[g],Z=Reflect.deleteProperty(I,g);return Z&&C&&u(I,"delete",g,void 0,l),Z}has(I,g){const C=Reflect.has(I,g);return(0,A.Bm)(g)&&r.has(g)||y(I,"has",g),C}ownKeys(I){return y(I,"iterate",(0,A.cy)(I)?"length":X),Reflect.ownKeys(I)}}class _ extends P{constructor(I=!1){super(!0,I)}set(I,g){return!0}deleteProperty(I,g){return!0}}const q=new f,$=new _,II=new f(!0),gI=I=>I,CI=I=>Reflect.getPrototypeOf(I);function AI(I,g,C){return function(...l){const Z=this["__v_raw"],d=oI(Z),B=(0,A.CE)(d),F="entries"===I||I===Symbol.iterator&&B,i="keys"===I&&B,c=Z[I](...l),G=C?gI:g?SI:YI;return!g&&y(d,"iterate",i?H:X),{next(){const{value:I,done:g}=c.next();return g?{value:I,done:g}:{value:F?[G(I[0]),G(I[1])]:G(I),done:g}},[Symbol.iterator](){return this}}}}function lI(I){return function(...g){return"delete"!==I&&("clear"===I?void 0:this)}}function ZI(I,g){const C={get(C){const l=this["__v_raw"],Z=oI(l),d=oI(C);I||((0,A.$H)(C,d)&&y(Z,"get",C),y(Z,"get",d));const{has:B}=CI(Z),F=g?gI:I?SI:YI;return B.call(Z,C)?F(l.get(C)):B.call(Z,d)?F(l.get(d)):void(l!==Z&&l.get(C))},get size(){const g=this["__v_raw"];return!I&&y(oI(g),"iterate",X),Reflect.get(g,"size",g)},has(g){const C=this["__v_raw"],l=oI(C),Z=oI(g);return I||((0,A.$H)(g,Z)&&y(l,"has",g),y(l,"has",Z)),g===Z?C.has(g):C.has(g)||C.has(Z)},forEach(C,A){const l=this,Z=l["__v_raw"],d=oI(Z),B=g?gI:I?SI:YI;return!I&&y(d,"iterate",X),Z.forEach(((I,g)=>C.call(A,B(I),B(g),l)))}};(0,A.X$)(C,I?{add:lI("add"),set:lI("set"),delete:lI("delete"),clear:lI("clear")}:{add(I){g||nI(I)||hI(I)||(I=oI(I));const C=oI(this),A=CI(C),l=A.has.call(C,I);return l||(C.add(I),u(C,"add",I,I)),this},set(I,C){g||nI(C)||hI(C)||(C=oI(C));const l=oI(this),{has:Z,get:d}=CI(l);let B=Z.call(l,I);B||(I=oI(I),B=Z.call(l,I));const F=d.call(l,I);return l.set(I,C),B?(0,A.$H)(C,F)&&u(l,"set",I,C,F):u(l,"add",I,C),this},delete(I){const g=oI(this),{has:C,get:A}=CI(g);let l=C.call(g,I);l||(I=oI(I),l=C.call(g,I));const Z=A?A.call(g,I):void 0,d=g.delete(I);return l&&u(g,"delete",I,void 0,Z),d},clear(){const I=oI(this),g=0!==I.size,C=void 0,A=I.clear();return g&&u(I,"clear",void 0,void 0,C),A}});const l=["keys","values","entries",Symbol.iterator];return l.forEach((A=>{C[A]=AI(A,I,g)})),C}function dI(I,g){const C=ZI(I,g);return(g,l,Z)=>"__v_isReactive"===l?!I:"__v_isReadonly"===l?I:"__v_raw"===l?g:Reflect.get((0,A.$3)(C,l)&&l in g?C:g,l,Z)}const BI={get:dI(!1,!1)},FI={get:dI(!1,!0)},iI={get:dI(!0,!1)};const cI=new WeakMap,GI=new WeakMap,WI=new WeakMap,VI=new WeakMap;function RI(I){switch(I){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function UI(I){return I["__v_skip"]||!Object.isExtensible(I)?0:RI((0,A.Zf)(I))}function bI(I){return hI(I)?I:mI(I,!1,q,BI,cI)}function sI(I){return mI(I,!1,II,FI,GI)}function QI(I){return mI(I,!0,$,iI,WI)}function mI(I,g,C,l,Z){if(!(0,A.Gv)(I))return I;if(I["__v_raw"]&&(!g||!I["__v_isReactive"]))return I;const d=Z.get(I);if(d)return d;const B=UI(I);if(0===B)return I;const F=new Proxy(I,2===B?l:C);return Z.set(I,F),F}function NI(I){return hI(I)?NI(I["__v_raw"]):!(!I||!I["__v_isReactive"])}function hI(I){return!(!I||!I["__v_isReadonly"])}function nI(I){return!(!I||!I["__v_isShallow"])}function aI(I){return!!I&&!!I["__v_raw"]}function oI(I){const g=I&&I["__v_raw"];return g?oI(g):I}function wI(I){return!(0,A.$3)(I,"__v_skip")&&Object.isExtensible(I)&&(0,A.yQ)(I,"__v_skip",!0),I}const YI=I=>(0,A.Gv)(I)?bI(I):I,SI=I=>(0,A.Gv)(I)?QI(I):I;function JI(I){return!!I&&!0===I["__v_isRef"]}function MI(I){return DI(I,!1)}function DI(I,g){return JI(I)?I:new tI(I,g)}class tI{constructor(I,g){this.dep=new M,this["__v_isRef"]=!0,this["__v_isShallow"]=!1,this._rawValue=g?I:oI(I),this._value=g?I:YI(I),this["__v_isShallow"]=g}get value(){return this.dep.track(),this._value}set value(I){const g=this._rawValue,C=this["__v_isShallow"]||nI(I)||hI(I);I=C?I:oI(I),(0,A.$H)(I,g)&&(this._rawValue=I,this._value=C?I:YI(I),this.dep.trigger())}}function XI(I){return JI(I)?I.value:I}const HI={get:(I,g,C)=>"__v_raw"===g?I:XI(Reflect.get(I,g,C)),set:(I,g,C,A)=>{const l=I[g];return JI(l)&&!JI(C)?(l.value=C,!0):Reflect.set(I,g,C,A)}};function eI(I){return NI(I)?I:new Proxy(I,HI)}class yI{constructor(I,g,C){this.fn=I,this.setter=g,this._value=void 0,this.dep=new M(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=S-1,this.next=void 0,this.effect=this,this["__v_isReadonly"]=!g,this.isSSR=C}notify(){if(this.flags|=16,!(8&this.flags||Z===this))return V(this,!0),!0}get value(){const I=this.dep.track();return m(this),I&&(I.version=this.dep.version),this._value}set value(I){this.setter&&this.setter(I)}}function uI(I,g,C=!1){let l,Z;(0,A.Tn)(I)?l=I:(l=I.get,Z=I.set);const d=new yI(l,Z,C);return d}const pI={},kI=new WeakMap;let KI;function zI(I,g=!1,C=KI){if(C){let g=kI.get(C);g||kI.set(C,g=[]),g.push(I)}else 0}function TI(I,g,C=A.MZ){const{immediate:l,deep:Z,once:d,scheduler:F,augmentJob:c,call:G}=C,W=I=>Z?I:nI(I)||!1===Z||0===Z?LI(I,1):LI(I);let V,R,U,b,s=!1,Q=!1;if(JI(I)?(R=()=>I.value,s=nI(I)):NI(I)?(R=()=>W(I),s=!0):(0,A.cy)(I)?(Q=!0,s=I.some((I=>NI(I)||nI(I))),R=()=>I.map((I=>JI(I)?I.value:NI(I)?W(I):(0,A.Tn)(I)?G?G(I,2):I():void 0))):R=(0,A.Tn)(I)?g?G?()=>G(I,2):I:()=>{if(U){o();try{U()}finally{w()}}const g=KI;KI=V;try{return G?G(I,3,[b]):I(b)}finally{KI=g}}:A.tE,g&&Z){const I=R,g=!0===Z?1/0:Z;R=()=>LI(I(),g)}const m=B(),N=()=>{V.stop(),m&&m.active&&(0,A.TF)(m.effects,V)};if(d&&g){const I=g;g=(...g)=>{I(...g),N()}}let h=Q?new Array(I.length).fill(pI):pI;const n=I=>{if(1&V.flags&&(V.dirty||I))if(g){const I=V.run();if(Z||s||(Q?I.some(((I,g)=>(0,A.$H)(I,h[g]))):(0,A.$H)(I,h))){U&&U();const C=KI;KI=V;try{const C=[I,h===pI?void 0:Q&&h[0]===pI?[]:h,b];G?G(g,3,C):g(...C),h=I}finally{KI=C}}}else V.run()};return c&&c(n),V=new i(R),V.scheduler=F?()=>F(n,!1):n,b=I=>zI(I,!1,V),U=V.onStop=()=>{const I=kI.get(V);if(I){if(G)G(I,4);else for(const g of I)g();kI.delete(V)}},g?l?n(!0):h=V.run():F?F(n.bind(null,!0),!0):V.run(),N.pause=V.pause.bind(V),N.resume=V.resume.bind(V),N.stop=N,N}function LI(I,g=1/0,C){if(g<=0||!(0,A.Gv)(I)||I["__v_skip"])return I;if(C=C||new Set,C.has(I))return I;if(C.add(I),g--,JI(I))LI(I.value,g,C);else if((0,A.cy)(I))for(let A=0;A<I.length;A++)LI(I[A],g,C);else if((0,A.vM)(I)||(0,A.CE)(I))I.forEach((I=>{LI(I,g,C)}));else if((0,A.Qd)(I)){for(const A in I)LI(I[A],g,C);for(const A of Object.getOwnPropertySymbols(I))Object.prototype.propertyIsEnumerable.call(I,A)&&LI(I[A],g,C)}return I}},6768:function(I,g,C){C.d(g,{$u:function(){return lI},CE:function(){return Og},Df:function(){return z},EW:function(){return XC},FK:function(){return yg},Gy:function(){return e},K9:function(){return Fg},Lk:function(){return qg},MZ:function(){return K},OW:function(){return k},Q3:function(){return lC},QP:function(){return u},bF:function(){return $g},dY:function(){return b},g2:function(){return WI},nI:function(){return RC},pM:function(){return T},qL:function(){return d},sV:function(){return CI},uX:function(){return Tg},wB:function(){return mg}});C(4114),C(9479),C(7642),C(8004),C(3853),C(5876),C(2475),C(5024),C(1698),C(8992),C(3215),C(4520),C(3949),C(1454),C(8872),C(7550);var A=C(144),l=C(4232);function Z(I,g,C,A){try{return A?I(...A):I()}catch(l){B(l,g,C)}}function d(I,g,C,A){if((0,l.Tn)(I)){const d=Z(I,g,C,A);return d&&(0,l.yL)(d)&&d.catch((I=>{B(I,g,C)})),d}if((0,l.cy)(I)){const l=[];for(let Z=0;Z<I.length;Z++)l.push(d(I[Z],g,C,A));return l}}function B(I,g,C,d=!0){const B=g?g.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:c}=g&&g.appContext.config||l.MZ;if(g){let l=g.parent;const d=g.proxy,B=`https://vuejs.org/error-reference/#runtime-${C}`;while(l){const g=l.ec;if(g)for(let C=0;C<g.length;C++)if(!1===g[C](I,d,B))return;l=l.parent}if(i)return(0,A.C4)(),Z(i,null,10,[I,d,B]),void(0,A.bl)()}F(I,C,B,d,c)}function F(I,g,C,A=!0,l=!1){if(l)throw I;console.error(I)}const i=[];let c=-1;const G=[];let W=null,V=0;const R=Promise.resolve();let U=null;function b(I){const g=U||R;return I?g.then(this?I.bind(this):I):g}function s(I){let g=c+1,C=i.length;while(g<C){const A=g+C>>>1,l=i[A],Z=a(l);Z<I||Z===I&&2&l.flags?g=A+1:C=A}return g}function Q(I){if(!(1&I.flags)){const g=a(I),C=i[i.length-1];!C||!(2&I.flags)&&g>=a(C)?i.push(I):i.splice(s(g),0,I),I.flags|=1,m()}}function m(){U||(U=R.then(o))}function N(I){(0,l.cy)(I)?G.push(...I):W&&-1===I.id?W.splice(V+1,0,I):1&I.flags||(G.push(I),I.flags|=1),m()}function h(I,g,C=c+1){for(0;C<i.length;C++){const g=i[C];if(g&&2&g.flags){if(I&&g.id!==I.uid)continue;0,i.splice(C,1),C--,4&g.flags&&(g.flags&=-2),g(),4&g.flags||(g.flags&=-2)}}}function n(I){if(G.length){const I=[...new Set(G)].sort(((I,g)=>a(I)-a(g)));if(G.length=0,W)return void W.push(...I);for(W=I,V=0;V<W.length;V++){const I=W[V];0,4&I.flags&&(I.flags&=-2),8&I.flags||I(),I.flags&=-2}W=null,V=0}}const a=I=>null==I.id?2&I.flags?-1:1/0:I.id;function o(I){l.tE;try{for(c=0;c<i.length;c++){const I=i[c];!I||8&I.flags||(4&I.flags&&(I.flags&=-2),Z(I,I.i,I.i?15:14),4&I.flags||(I.flags&=-2))}}finally{for(;c<i.length;c++){const I=i[c];I&&(I.flags&=-2)}c=-1,i.length=0,n(I),U=null,(i.length||G.length)&&o(I)}}let w=null,Y=null;function S(I){const g=w;return w=I,Y=I&&I.type.__scopeId||null,g}function J(I,g=w,C){if(!g)return I;if(I._n)return I;const A=(...C)=>{A._d&&jg(-1);const l=S(g);let Z;try{Z=I(...C)}finally{S(l),A._d&&jg(1)}return Z};return A._n=!0,A._c=!0,A._d=!0,A}function M(I,g,C,l){const Z=I.dirs,B=g&&g.dirs;for(let F=0;F<Z.length;F++){const i=Z[F];B&&(i.oldValue=B[F].value);let c=i.dir[l];c&&((0,A.C4)(),d(c,C,8,[I.el,i,I,g]),(0,A.bl)())}}const D=Symbol("_vte"),t=I=>I.__isTeleport;const X=Symbol("_leaveCb"),H=Symbol("_enterCb");function e(){const I={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return CI((()=>{I.isMounted=!0})),ZI((()=>{I.isUnmounting=!0})),I}const y=[Function,Array],u={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:y,onEnter:y,onAfterEnter:y,onEnterCancelled:y,onBeforeLeave:y,onLeave:y,onAfterLeave:y,onLeaveCancelled:y,onBeforeAppear:y,onAppear:y,onAfterAppear:y,onAppearCancelled:y};function p(I,g){const{leavingVNodes:C}=I;let A=C.get(g.type);return A||(A=Object.create(null),C.set(g.type,A)),A}function k(I,g,C,A,Z){const{appear:B,mode:F,persisted:i=!1,onBeforeEnter:c,onEnter:G,onAfterEnter:W,onEnterCancelled:V,onBeforeLeave:R,onLeave:U,onAfterLeave:b,onLeaveCancelled:s,onBeforeAppear:Q,onAppear:m,onAfterAppear:N,onAppearCancelled:h}=g,n=String(I.key),a=p(C,I),o=(I,g)=>{I&&d(I,A,9,g)},w=(I,g)=>{const C=g[1];o(I,g),(0,l.cy)(I)?I.every((I=>I.length<=1))&&C():I.length<=1&&C()},Y={mode:F,persisted:i,beforeEnter(g){let A=c;if(!C.isMounted){if(!B)return;A=Q||c}g[X]&&g[X](!0);const l=a[n];l&&Pg(I,l)&&l.el[X]&&l.el[X](),o(A,[g])},enter(I){let g=G,A=W,l=V;if(!C.isMounted){if(!B)return;g=m||G,A=N||W,l=h||V}let Z=!1;const d=I[H]=g=>{Z||(Z=!0,o(g?l:A,[I]),Y.delayedLeave&&Y.delayedLeave(),I[H]=void 0)};g?w(g,[I,d]):d()},leave(g,A){const l=String(I.key);if(g[H]&&g[H](!0),C.isUnmounting)return A();o(R,[g]);let Z=!1;const d=g[X]=C=>{Z||(Z=!0,A(),o(C?s:b,[g]),g[X]=void 0,a[l]===I&&delete a[l])};a[l]=I,U?w(U,[g,d]):d()},clone(I){const l=k(I,g,C,A,Z);return Z&&Z(l),l}};return Y}function K(I,g){6&I.shapeFlag&&I.component?(I.transition=g,K(I.component.subTree,g)):128&I.shapeFlag?(I.ssContent.transition=g.clone(I.ssContent),I.ssFallback.transition=g.clone(I.ssFallback)):I.transition=g}function z(I,g=!1,C){let A=[],l=0;for(let Z=0;Z<I.length;Z++){let d=I[Z];const B=null==C?d.key:String(C)+String(null!=d.key?d.key:Z);d.type===yg?(128&d.patchFlag&&l++,A=A.concat(z(d.children,g,B))):(g||d.type!==pg)&&A.push(null!=B?CC(d,{key:B}):d)}if(l>1)for(let Z=0;Z<A.length;Z++)A[Z].patchFlag=-2;return A}
/*! #__NO_SIDE_EFFECTS__ */function T(I,g){return(0,l.Tn)(I)?(()=>(0,l.X$)({name:I.name},g,{setup:I}))():I}function L(I){I.ids=[I.ids[0]+I.ids[2]+++"-",0,0]}function E(I,g,C,d,B=!1){if((0,l.cy)(I))return void I.forEach(((I,A)=>E(I,g&&((0,l.cy)(g)?g[A]:g),C,d,B)));if(j(d)&&!B)return void(512&d.shapeFlag&&d.type.__asyncResolved&&d.component.subTree.component&&E(I,g,C,d.component.subTree));const F=4&d.shapeFlag?MC(d.component):d.el,i=B?null:F,{i:c,r:G}=I;const W=g&&g.r,V=c.refs===l.MZ?c.refs={}:c.refs,R=c.setupState,U=(0,A.ux)(R),b=R===l.MZ?()=>!1:I=>(0,l.$3)(U,I);if(null!=W&&W!==G&&((0,l.Kg)(W)?(V[W]=null,b(W)&&(R[W]=null)):(0,A.i9)(W)&&(W.value=null)),(0,l.Tn)(G))Z(G,c,12,[i,V]);else{const g=(0,l.Kg)(G),Z=(0,A.i9)(G);if(g||Z){const A=()=>{if(I.f){const C=g?b(G)?R[G]:V[G]:G.value;B?(0,l.cy)(C)&&(0,l.TF)(C,F):(0,l.cy)(C)?C.includes(F)||C.push(F):g?(V[G]=[F],b(G)&&(R[G]=V[G])):(G.value=[F],I.k&&(V[I.k]=G.value))}else g?(V[G]=i,b(G)&&(R[G]=i)):Z&&(G.value=i,I.k&&(V[I.k]=i))};i?(A.id=-1,Bg(A,C)):A()}else 0}}(0,l.We)().requestIdleCallback,(0,l.We)().cancelIdleCallback;const j=I=>!!I.type.__asyncLoader
/*! #__NO_SIDE_EFFECTS__ */;const x=I=>I.type.__isKeepAlive;RegExp,RegExp;function O(I,g){return(0,l.cy)(I)?I.some((I=>O(I,g))):(0,l.Kg)(I)?I.split(",").includes(g):!!(0,l.gd)(I)&&(I.lastIndex=0,I.test(g))}function r(I,g){P(I,"a",g)}function v(I,g){P(I,"da",g)}function P(I,g,C=VC){const A=I.__wdc||(I.__wdc=()=>{let g=C;while(g){if(g.isDeactivated)return;g=g.parent}return I()});if($(g,A,C),C){let I=C.parent;while(I&&I.parent)x(I.parent.vnode)&&f(A,g,C,I),I=I.parent}}function f(I,g,C,A){const Z=$(g,I,A,!0);dI((()=>{(0,l.TF)(A[g],Z)}),C)}function _(I){I.shapeFlag&=-257,I.shapeFlag&=-513}function q(I){return 128&I.shapeFlag?I.ssContent:I}function $(I,g,C=VC,l=!1){if(C){const Z=C[I]||(C[I]=[]),B=g.__weh||(g.__weh=(...l)=>{(0,A.C4)();const Z=sC(C),B=d(g,C,I,l);return Z(),(0,A.bl)(),B});return l?Z.unshift(B):Z.push(B),B}}const II=I=>(g,C=VC)=>{nC&&"sp"!==I||$(I,((...I)=>g(...I)),C)},gI=II("bm"),CI=II("m"),AI=II("bu"),lI=II("u"),ZI=II("bum"),dI=II("um"),BI=II("sp"),FI=II("rtg"),iI=II("rtc");function cI(I,g=VC){$("ec",I,g)}const GI="components";function WI(I,g){return RI(GI,I,!0,g)||I}const VI=Symbol.for("v-ndc");function RI(I,g,C=!0,A=!1){const Z=w||VC;if(Z){const C=Z.type;if(I===GI){const I=DC(C,!1);if(I&&(I===g||I===(0,l.PT)(g)||I===(0,l.ZH)((0,l.PT)(g))))return C}const d=UI(Z[I]||C[I],g)||UI(Z.appContext[I],g);return!d&&A?C:d}}function UI(I,g){return I&&(I[g]||I[(0,l.PT)(g)]||I[(0,l.ZH)((0,l.PT)(g))])}const bI=I=>I?mC(I)?MC(I):bI(I.parent):null,sI=(0,l.X$)(Object.create(null),{$:I=>I,$el:I=>I.vnode.el,$data:I=>I.data,$props:I=>I.props,$attrs:I=>I.attrs,$slots:I=>I.slots,$refs:I=>I.refs,$parent:I=>bI(I.parent),$root:I=>bI(I.root),$host:I=>I.ce,$emit:I=>I.emit,$options:I=>YI(I),$forceUpdate:I=>I.f||(I.f=()=>{Q(I.update)}),$nextTick:I=>I.n||(I.n=b.bind(I.proxy)),$watch:I=>hg.bind(I)}),QI=(I,g)=>I!==l.MZ&&!I.__isScriptSetup&&(0,l.$3)(I,g),mI={get({_:I},g){if("__v_skip"===g)return!0;const{ctx:C,setupState:Z,data:d,props:B,accessCache:F,type:i,appContext:c}=I;let G;if("$"!==g[0]){const A=F[g];if(void 0!==A)switch(A){case 1:return Z[g];case 2:return d[g];case 4:return C[g];case 3:return B[g]}else{if(QI(Z,g))return F[g]=1,Z[g];if(d!==l.MZ&&(0,l.$3)(d,g))return F[g]=2,d[g];if((G=I.propsOptions[0])&&(0,l.$3)(G,g))return F[g]=3,B[g];if(C!==l.MZ&&(0,l.$3)(C,g))return F[g]=4,C[g];hI&&(F[g]=0)}}const W=sI[g];let V,R;return W?("$attrs"===g&&(0,A.u4)(I.attrs,"get",""),W(I)):(V=i.__cssModules)&&(V=V[g])?V:C!==l.MZ&&(0,l.$3)(C,g)?(F[g]=4,C[g]):(R=c.config.globalProperties,(0,l.$3)(R,g)?R[g]:void 0)},set({_:I},g,C){const{data:A,setupState:Z,ctx:d}=I;return QI(Z,g)?(Z[g]=C,!0):A!==l.MZ&&(0,l.$3)(A,g)?(A[g]=C,!0):!(0,l.$3)(I.props,g)&&(("$"!==g[0]||!(g.slice(1)in I))&&(d[g]=C,!0))},has({_:{data:I,setupState:g,accessCache:C,ctx:A,appContext:Z,propsOptions:d}},B){let F;return!!C[B]||I!==l.MZ&&(0,l.$3)(I,B)||QI(g,B)||(F=d[0])&&(0,l.$3)(F,B)||(0,l.$3)(A,B)||(0,l.$3)(sI,B)||(0,l.$3)(Z.config.globalProperties,B)},defineProperty(I,g,C){return null!=C.get?I._.accessCache[g]=0:(0,l.$3)(C,"value")&&this.set(I,g,C.value,null),Reflect.defineProperty(I,g,C)}};function NI(I){return(0,l.cy)(I)?I.reduce(((I,g)=>(I[g]=null,I)),{}):I}let hI=!0;function nI(I){const g=YI(I),C=I.proxy,Z=I.ctx;hI=!1,g.beforeCreate&&oI(g.beforeCreate,I,"bc");const{data:d,computed:B,methods:F,watch:i,provide:c,inject:G,created:W,beforeMount:V,mounted:R,beforeUpdate:U,updated:b,activated:s,deactivated:Q,beforeDestroy:m,beforeUnmount:N,destroyed:h,unmounted:n,render:a,renderTracked:o,renderTriggered:w,errorCaptured:Y,serverPrefetch:S,expose:J,inheritAttrs:M,components:D,directives:t,filters:X}=g,H=null;if(G&&aI(G,Z,H),F)for(const A in F){const I=F[A];(0,l.Tn)(I)&&(Z[A]=I.bind(C))}if(d){0;const g=d.call(C,C);0,(0,l.Gv)(g)&&(I.data=(0,A.Kh)(g))}if(hI=!0,B)for(const A in B){const I=B[A],g=(0,l.Tn)(I)?I.bind(C,C):(0,l.Tn)(I.get)?I.get.bind(C,C):l.tE;0;const d=!(0,l.Tn)(I)&&(0,l.Tn)(I.set)?I.set.bind(C):l.tE,F=XC({get:g,set:d});Object.defineProperty(Z,A,{enumerable:!0,configurable:!0,get:()=>F.value,set:I=>F.value=I})}if(i)for(const A in i)wI(i[A],Z,C,A);if(c){const I=(0,l.Tn)(c)?c.call(C):c;Reflect.ownKeys(I).forEach((g=>{zI(g,I[g])}))}function e(I,g){(0,l.cy)(g)?g.forEach((g=>I(g.bind(C)))):g&&I(g.bind(C))}if(W&&oI(W,I,"c"),e(gI,V),e(CI,R),e(AI,U),e(lI,b),e(r,s),e(v,Q),e(cI,Y),e(iI,o),e(FI,w),e(ZI,N),e(dI,n),e(BI,S),(0,l.cy)(J))if(J.length){const g=I.exposed||(I.exposed={});J.forEach((I=>{Object.defineProperty(g,I,{get:()=>C[I],set:g=>C[I]=g})}))}else I.exposed||(I.exposed={});a&&I.render===l.tE&&(I.render=a),null!=M&&(I.inheritAttrs=M),D&&(I.components=D),t&&(I.directives=t),S&&L(I)}function aI(I,g,C=l.tE){(0,l.cy)(I)&&(I=tI(I));for(const Z in I){const C=I[Z];let d;d=(0,l.Gv)(C)?"default"in C?TI(C.from||Z,C.default,!0):TI(C.from||Z):TI(C),(0,A.i9)(d)?Object.defineProperty(g,Z,{enumerable:!0,configurable:!0,get:()=>d.value,set:I=>d.value=I}):g[Z]=d}}function oI(I,g,C){d((0,l.cy)(I)?I.map((I=>I.bind(g.proxy))):I.bind(g.proxy),g,C)}function wI(I,g,C,A){let Z=A.includes(".")?ng(C,A):()=>C[A];if((0,l.Kg)(I)){const C=g[I];(0,l.Tn)(C)&&mg(Z,C)}else if((0,l.Tn)(I))mg(Z,I.bind(C));else if((0,l.Gv)(I))if((0,l.cy)(I))I.forEach((I=>wI(I,g,C,A)));else{const A=(0,l.Tn)(I.handler)?I.handler.bind(C):g[I.handler];(0,l.Tn)(A)&&mg(Z,A,I)}else 0}function YI(I){const g=I.type,{mixins:C,extends:A}=g,{mixins:Z,optionsCache:d,config:{optionMergeStrategies:B}}=I.appContext,F=d.get(g);let i;return F?i=F:Z.length||C||A?(i={},Z.length&&Z.forEach((I=>SI(i,I,B,!0))),SI(i,g,B)):i=g,(0,l.Gv)(g)&&d.set(g,i),i}function SI(I,g,C,A=!1){const{mixins:l,extends:Z}=g;Z&&SI(I,Z,C,!0),l&&l.forEach((g=>SI(I,g,C,!0)));for(const d in g)if(A&&"expose"===d);else{const A=JI[d]||C&&C[d];I[d]=A?A(I[d],g[d]):g[d]}return I}const JI={data:MI,props:eI,emits:eI,methods:HI,computed:HI,beforeCreate:XI,created:XI,beforeMount:XI,mounted:XI,beforeUpdate:XI,updated:XI,beforeDestroy:XI,beforeUnmount:XI,destroyed:XI,unmounted:XI,activated:XI,deactivated:XI,errorCaptured:XI,serverPrefetch:XI,components:HI,directives:HI,watch:yI,provide:MI,inject:DI};function MI(I,g){return g?I?function(){return(0,l.X$)((0,l.Tn)(I)?I.call(this,this):I,(0,l.Tn)(g)?g.call(this,this):g)}:g:I}function DI(I,g){return HI(tI(I),tI(g))}function tI(I){if((0,l.cy)(I)){const g={};for(let C=0;C<I.length;C++)g[I[C]]=I[C];return g}return I}function XI(I,g){return I?[...new Set([].concat(I,g))]:g}function HI(I,g){return I?(0,l.X$)(Object.create(null),I,g):g}function eI(I,g){return I?(0,l.cy)(I)&&(0,l.cy)(g)?[...new Set([...I,...g])]:(0,l.X$)(Object.create(null),NI(I),NI(null!=g?g:{})):g}function yI(I,g){if(!I)return g;if(!g)return I;const C=(0,l.X$)(Object.create(null),I);for(const A in g)C[A]=XI(I[A],g[A]);return C}function uI(){return{app:null,config:{isNativeTag:l.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let pI=0;function kI(I,g){return function(C,A=null){(0,l.Tn)(C)||(C=(0,l.X$)({},C)),null==A||(0,l.Gv)(A)||(A=null);const Z=uI(),B=new WeakSet,F=[];let i=!1;const c=Z.app={_uid:pI++,_component:C,_props:A,_container:null,_context:Z,_instance:null,version:HC,get config(){return Z.config},set config(I){0},use(I,...g){return B.has(I)||(I&&(0,l.Tn)(I.install)?(B.add(I),I.install(c,...g)):(0,l.Tn)(I)&&(B.add(I),I(c,...g))),c},mixin(I){return Z.mixins.includes(I)||Z.mixins.push(I),c},component(I,g){return g?(Z.components[I]=g,c):Z.components[I]},directive(I,g){return g?(Z.directives[I]=g,c):Z.directives[I]},mount(l,d,B){if(!i){0;const F=c._ceVNode||$g(C,A);return F.appContext=Z,!0===B?B="svg":!1===B&&(B=void 0),d&&g?g(F,l):I(F,l,B),i=!0,c._container=l,l.__vue_app__=c,MC(F.component)}},onUnmount(I){F.push(I)},unmount(){i&&(d(F,c._instance,16),I(null,c._container),delete c._container.__vue_app__)},provide(I,g){return Z.provides[I]=g,c},runWithContext(I){const g=KI;KI=c;try{return I()}finally{KI=g}}};return c}}let KI=null;function zI(I,g){if(VC){let C=VC.provides;const A=VC.parent&&VC.parent.provides;A===C&&(C=VC.provides=Object.create(A)),C[I]=g}else 0}function TI(I,g,C=!1){const A=VC||w;if(A||KI){const Z=KI?KI._context.provides:A?null==A.parent?A.vnode.appContext&&A.vnode.appContext.provides:A.parent.provides:void 0;if(Z&&I in Z)return Z[I];if(arguments.length>1)return C&&(0,l.Tn)(g)?g.call(A&&A.proxy):g}else 0}const LI={},EI=()=>Object.create(LI),jI=I=>Object.getPrototypeOf(I)===LI;function xI(I,g,C,l=!1){const Z={},d=EI();I.propsDefaults=Object.create(null),rI(I,g,Z,d);for(const A in I.propsOptions[0])A in Z||(Z[A]=void 0);C?I.props=l?Z:(0,A.Gc)(Z):I.type.props?I.props=Z:I.props=d,I.attrs=d}function OI(I,g,C,Z){const{props:d,attrs:B,vnode:{patchFlag:F}}=I,i=(0,A.ux)(d),[c]=I.propsOptions;let G=!1;if(!(Z||F>0)||16&F){let A;rI(I,g,d,B)&&(G=!0);for(const Z in i)g&&((0,l.$3)(g,Z)||(A=(0,l.Tg)(Z))!==Z&&(0,l.$3)(g,A))||(c?!C||void 0===C[Z]&&void 0===C[A]||(d[Z]=vI(c,i,Z,void 0,I,!0)):delete d[Z]);if(B!==i)for(const I in B)g&&(0,l.$3)(g,I)||(delete B[I],G=!0)}else if(8&F){const C=I.vnode.dynamicProps;for(let A=0;A<C.length;A++){let Z=C[A];if(Yg(I.emitsOptions,Z))continue;const F=g[Z];if(c)if((0,l.$3)(B,Z))F!==B[Z]&&(B[Z]=F,G=!0);else{const g=(0,l.PT)(Z);d[g]=vI(c,i,g,F,I,!1)}else F!==B[Z]&&(B[Z]=F,G=!0)}}G&&(0,A.hZ)(I.attrs,"set","")}function rI(I,g,C,Z){const[d,B]=I.propsOptions;let F,i=!1;if(g)for(let A in g){if((0,l.SU)(A))continue;const c=g[A];let G;d&&(0,l.$3)(d,G=(0,l.PT)(A))?B&&B.includes(G)?(F||(F={}))[G]=c:C[G]=c:Yg(I.emitsOptions,A)||A in Z&&c===Z[A]||(Z[A]=c,i=!0)}if(B){const g=(0,A.ux)(C),Z=F||l.MZ;for(let A=0;A<B.length;A++){const F=B[A];C[F]=vI(d,g,F,Z[F],I,!(0,l.$3)(Z,F))}}return i}function vI(I,g,C,A,Z,d){const B=I[C];if(null!=B){const I=(0,l.$3)(B,"default");if(I&&void 0===A){const I=B.default;if(B.type!==Function&&!B.skipFactory&&(0,l.Tn)(I)){const{propsDefaults:l}=Z;if(C in l)A=l[C];else{const d=sC(Z);A=l[C]=I.call(null,g),d()}}else A=I;Z.ce&&Z.ce._setProp(C,A)}B[0]&&(d&&!I?A=!1:!B[1]||""!==A&&A!==(0,l.Tg)(C)||(A=!0))}return A}const PI=new WeakMap;function fI(I,g,C=!1){const A=C?PI:g.propsCache,Z=A.get(I);if(Z)return Z;const d=I.props,B={},F=[];let i=!1;if(!(0,l.Tn)(I)){const A=I=>{i=!0;const[C,A]=fI(I,g,!0);(0,l.X$)(B,C),A&&F.push(...A)};!C&&g.mixins.length&&g.mixins.forEach(A),I.extends&&A(I.extends),I.mixins&&I.mixins.forEach(A)}if(!d&&!i)return(0,l.Gv)(I)&&A.set(I,l.Oj),l.Oj;if((0,l.cy)(d))for(let G=0;G<d.length;G++){0;const I=(0,l.PT)(d[G]);_I(I)&&(B[I]=l.MZ)}else if(d){0;for(const I in d){const g=(0,l.PT)(I);if(_I(g)){const C=d[I],A=B[g]=(0,l.cy)(C)||(0,l.Tn)(C)?{type:C}:(0,l.X$)({},C),Z=A.type;let i=!1,c=!0;if((0,l.cy)(Z))for(let I=0;I<Z.length;++I){const g=Z[I],C=(0,l.Tn)(g)&&g.name;if("Boolean"===C){i=!0;break}"String"===C&&(c=!1)}else i=(0,l.Tn)(Z)&&"Boolean"===Z.name;A[0]=i,A[1]=c,(i||(0,l.$3)(A,"default"))&&F.push(g)}}}const c=[B,F];return(0,l.Gv)(I)&&A.set(I,c),c}function _I(I){return"$"!==I[0]&&!(0,l.SU)(I)}const qI=I=>"_"===I[0]||"$stable"===I,$I=I=>(0,l.cy)(I)?I.map(ZC):[ZC(I)],Ig=(I,g,C)=>{if(g._n)return g;const A=J(((...I)=>$I(g(...I))),C);return A._c=!1,A},gg=(I,g,C)=>{const A=I._ctx;for(const Z in I){if(qI(Z))continue;const C=I[Z];if((0,l.Tn)(C))g[Z]=Ig(Z,C,A);else if(null!=C){0;const I=$I(C);g[Z]=()=>I}}},Cg=(I,g)=>{const C=$I(g);I.slots.default=()=>C},Ag=(I,g,C)=>{for(const A in g)(C||"_"!==A)&&(I[A]=g[A])},lg=(I,g,C)=>{const A=I.slots=EI();if(32&I.vnode.shapeFlag){const I=g._;I?(Ag(A,g,C),C&&(0,l.yQ)(A,"_",I,!0)):gg(g,A)}else g&&Cg(I,g)},Zg=(I,g,C)=>{const{vnode:A,slots:Z}=I;let d=!0,B=l.MZ;if(32&A.shapeFlag){const I=g._;I?C&&1===I?d=!1:Ag(Z,g,C):(d=!g.$stable,gg(g,Z)),B=g}else g&&(Cg(I,g),B={default:1});if(d)for(const l in Z)qI(l)||null!=B[l]||delete Z[l]};function dg(){"boolean"!==typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__&&((0,l.We)().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__=!1)}const Bg=eg;function Fg(I){return ig(I)}function ig(I,g){dg();const C=(0,l.We)();C.__VUE__=!0;const{insert:Z,remove:d,patchProp:B,createElement:F,createText:i,createComment:c,setText:G,setElementText:W,parentNode:V,nextSibling:R,setScopeId:U=l.tE,insertStaticContent:b}=I,s=(I,g,C,A=null,l=null,Z=null,d=void 0,B=null,F=!!g.dynamicChildren)=>{if(I===g)return;I&&!Pg(I,g)&&(A=$(I),v(I,l,Z,!0),I=null),-2===g.patchFlag&&(F=!1,g.dynamicChildren=null);const{type:i,ref:c,shapeFlag:G}=g;switch(i){case ug:m(I,g,C,A);break;case pg:N(I,g,C,A);break;case kg:null==I&&a(g,C,A,d);break;case yg:y(I,g,C,A,l,Z,d,B,F);break;default:1&G?Y(I,g,C,A,l,Z,d,B,F):6&G?u(I,g,C,A,l,Z,d,B,F):(64&G||128&G)&&i.process(I,g,C,A,l,Z,d,B,F,CI)}null!=c&&l&&E(c,I&&I.ref,Z,g||I,!g)},m=(I,g,C,A)=>{if(null==I)Z(g.el=i(g.children),C,A);else{const C=g.el=I.el;g.children!==I.children&&G(C,g.children)}},N=(I,g,C,A)=>{null==I?Z(g.el=c(g.children||""),C,A):g.el=I.el},a=(I,g,C,A)=>{[I.el,I.anchor]=b(I.children,g,C,A,I.el,I.anchor)},o=({el:I,anchor:g},C,A)=>{let l;while(I&&I!==g)l=R(I),Z(I,C,A),I=l;Z(g,C,A)},w=({el:I,anchor:g})=>{let C;while(I&&I!==g)C=R(I),d(I),I=C;d(g)},Y=(I,g,C,A,l,Z,d,B,F)=>{"svg"===g.type?d="svg":"math"===g.type&&(d="mathml"),null==I?S(g,C,A,l,Z,d,B,F):X(I,g,l,Z,d,B,F)},S=(I,g,C,A,d,i,c,G)=>{let V,R;const{props:U,shapeFlag:b,transition:s,dirs:Q}=I;if(V=I.el=F(I.type,i,U&&U.is,U),8&b?W(V,I.children):16&b&&t(I.children,V,null,A,d,cg(I,i),c,G),Q&&M(I,null,A,"created"),J(V,I,I.scopeId,c,A),U){for(const I in U)"value"===I||(0,l.SU)(I)||B(V,I,null,U[I],i,A);"value"in U&&B(V,"value",null,U.value,i),(R=U.onVnodeBeforeMount)&&iC(R,A,I)}Q&&M(I,null,A,"beforeMount");const m=Wg(d,s);m&&s.beforeEnter(V),Z(V,g,C),((R=U&&U.onVnodeMounted)||m||Q)&&Bg((()=>{R&&iC(R,A,I),m&&s.enter(V),Q&&M(I,null,A,"mounted")}),d)},J=(I,g,C,A,l)=>{if(C&&U(I,C),A)for(let Z=0;Z<A.length;Z++)U(I,A[Z]);if(l){let C=l.subTree;if(g===C||Hg(C.type)&&(C.ssContent===g||C.ssFallback===g)){const g=l.vnode;J(I,g,g.scopeId,g.slotScopeIds,l.parent)}}},t=(I,g,C,A,l,Z,d,B,F=0)=>{for(let i=F;i<I.length;i++){const F=I[i]=B?dC(I[i]):ZC(I[i]);s(null,F,g,C,A,l,Z,d,B)}},X=(I,g,C,A,Z,d,F)=>{const i=g.el=I.el;let{patchFlag:c,dynamicChildren:G,dirs:V}=g;c|=16&I.patchFlag;const R=I.props||l.MZ,U=g.props||l.MZ;let b;if(C&&Gg(C,!1),(b=U.onVnodeBeforeUpdate)&&iC(b,C,g,I),V&&M(g,I,C,"beforeUpdate"),C&&Gg(C,!0),(R.innerHTML&&null==U.innerHTML||R.textContent&&null==U.textContent)&&W(i,""),G?H(I.dynamicChildren,G,i,C,A,cg(g,Z),d):F||T(I,g,i,null,C,A,cg(g,Z),d,!1),c>0){if(16&c)e(i,R,U,C,Z);else if(2&c&&R.class!==U.class&&B(i,"class",null,U.class,Z),4&c&&B(i,"style",R.style,U.style,Z),8&c){const I=g.dynamicProps;for(let g=0;g<I.length;g++){const A=I[g],l=R[A],d=U[A];d===l&&"value"!==A||B(i,A,l,d,Z,C)}}1&c&&I.children!==g.children&&W(i,g.children)}else F||null!=G||e(i,R,U,C,Z);((b=U.onVnodeUpdated)||V)&&Bg((()=>{b&&iC(b,C,g,I),V&&M(g,I,C,"updated")}),A)},H=(I,g,C,A,l,Z,d)=>{for(let B=0;B<g.length;B++){const F=I[B],i=g[B],c=F.el&&(F.type===yg||!Pg(F,i)||70&F.shapeFlag)?V(F.el):C;s(F,i,c,null,A,l,Z,d,!0)}},e=(I,g,C,A,Z)=>{if(g!==C){if(g!==l.MZ)for(const d in g)(0,l.SU)(d)||d in C||B(I,d,g[d],null,Z,A);for(const d in C){if((0,l.SU)(d))continue;const F=C[d],i=g[d];F!==i&&"value"!==d&&B(I,d,i,F,Z,A)}"value"in C&&B(I,"value",g.value,C.value,Z)}},y=(I,g,C,A,l,d,B,F,c)=>{const G=g.el=I?I.el:i(""),W=g.anchor=I?I.anchor:i("");let{patchFlag:V,dynamicChildren:R,slotScopeIds:U}=g;U&&(F=F?F.concat(U):U),null==I?(Z(G,C,A),Z(W,C,A),t(g.children||[],C,W,l,d,B,F,c)):V>0&&64&V&&R&&I.dynamicChildren?(H(I.dynamicChildren,R,C,l,d,B,F),(null!=g.key||l&&g===l.subTree)&&Vg(I,g,!0)):T(I,g,C,W,l,d,B,F,c)},u=(I,g,C,A,l,Z,d,B,F)=>{g.slotScopeIds=B,null==I?512&g.shapeFlag?l.ctx.activate(g,C,A,d,F):p(g,C,A,l,Z,d,F):k(I,g,F)},p=(I,g,C,A,l,Z,d)=>{const B=I.component=WC(I,A,l);if(x(I)&&(B.ctx.renderer=CI),aC(B,!1,d),B.asyncDep){if(l&&l.registerDep(B,K,d),!I.el){const I=B.subTree=$g(pg);N(null,I,g,C)}}else K(B,I,g,C,l,Z,d)},k=(I,g,C)=>{const A=g.component=I.component;if(Dg(I,g,C)){if(A.asyncDep&&!A.asyncResolved)return void z(A,g,C);A.next=g,A.update()}else g.el=I.el,A.vnode=g},K=(I,g,C,Z,d,B,F)=>{const i=()=>{if(I.isMounted){let{next:g,bu:C,u:A,parent:Z,vnode:c}=I;{const C=Ug(I);if(C)return g&&(g.el=c.el,z(I,g,F)),void C.asyncDep.then((()=>{I.isUnmounted||i()}))}let G,W=g;0,Gg(I,!1),g?(g.el=c.el,z(I,g,F)):g=c,C&&(0,l.DY)(C),(G=g.props&&g.props.onVnodeBeforeUpdate)&&iC(G,Z,g,c),Gg(I,!0);const R=Sg(I);0;const U=I.subTree;I.subTree=R,s(U,R,V(U.el),$(U),I,d,B),g.el=R.el,null===W&&Xg(I,R.el),A&&Bg(A,d),(G=g.props&&g.props.onVnodeUpdated)&&Bg((()=>iC(G,Z,g,c)),d)}else{let A;const{el:F,props:i}=g,{bm:c,m:G,parent:W,root:V,type:R}=I,U=j(g);if(Gg(I,!1),c&&(0,l.DY)(c),!U&&(A=i&&i.onVnodeBeforeMount)&&iC(A,W,g),Gg(I,!0),F&&lI){const g=()=>{I.subTree=Sg(I),lI(F,I.subTree,I,d,null)};U&&R.__asyncHydrate?R.__asyncHydrate(F,I,g):g()}else{V.ce&&V.ce._injectChildStyle(R);const A=I.subTree=Sg(I);0,s(null,A,C,Z,I,d,B),g.el=A.el}if(G&&Bg(G,d),!U&&(A=i&&i.onVnodeMounted)){const I=g;Bg((()=>iC(A,W,I)),d)}(256&g.shapeFlag||W&&j(W.vnode)&&256&W.vnode.shapeFlag)&&I.a&&Bg(I.a,d),I.isMounted=!0,g=C=Z=null}};I.scope.on();const c=I.effect=new A.X2(i);I.scope.off();const G=I.update=c.run.bind(c),W=I.job=c.runIfDirty.bind(c);W.i=I,W.id=I.uid,c.scheduler=()=>Q(W),Gg(I,!0),G()},z=(I,g,C)=>{g.component=I;const l=I.vnode.props;I.vnode=g,I.next=null,OI(I,g.props,l,C),Zg(I,g.children,C),(0,A.C4)(),h(I),(0,A.bl)()},T=(I,g,C,A,l,Z,d,B,F=!1)=>{const i=I&&I.children,c=I?I.shapeFlag:0,G=g.children,{patchFlag:V,shapeFlag:R}=g;if(V>0){if(128&V)return void O(i,G,C,A,l,Z,d,B,F);if(256&V)return void L(i,G,C,A,l,Z,d,B,F)}8&R?(16&c&&q(i,l,Z),G!==i&&W(C,G)):16&c?16&R?O(i,G,C,A,l,Z,d,B,F):q(i,l,Z,!0):(8&c&&W(C,""),16&R&&t(G,C,A,l,Z,d,B,F))},L=(I,g,C,A,Z,d,B,F,i)=>{I=I||l.Oj,g=g||l.Oj;const c=I.length,G=g.length,W=Math.min(c,G);let V;for(V=0;V<W;V++){const A=g[V]=i?dC(g[V]):ZC(g[V]);s(I[V],A,C,null,Z,d,B,F,i)}c>G?q(I,Z,d,!0,!1,W):t(g,C,A,Z,d,B,F,i,W)},O=(I,g,C,A,Z,d,B,F,i)=>{let c=0;const G=g.length;let W=I.length-1,V=G-1;while(c<=W&&c<=V){const A=I[c],l=g[c]=i?dC(g[c]):ZC(g[c]);if(!Pg(A,l))break;s(A,l,C,null,Z,d,B,F,i),c++}while(c<=W&&c<=V){const A=I[W],l=g[V]=i?dC(g[V]):ZC(g[V]);if(!Pg(A,l))break;s(A,l,C,null,Z,d,B,F,i),W--,V--}if(c>W){if(c<=V){const I=V+1,l=I<G?g[I].el:A;while(c<=V)s(null,g[c]=i?dC(g[c]):ZC(g[c]),C,l,Z,d,B,F,i),c++}}else if(c>V)while(c<=W)v(I[c],Z,d,!0),c++;else{const R=c,U=c,b=new Map;for(c=U;c<=V;c++){const I=g[c]=i?dC(g[c]):ZC(g[c]);null!=I.key&&b.set(I.key,c)}let Q,m=0;const N=V-U+1;let h=!1,n=0;const a=new Array(N);for(c=0;c<N;c++)a[c]=0;for(c=R;c<=W;c++){const A=I[c];if(m>=N){v(A,Z,d,!0);continue}let l;if(null!=A.key)l=b.get(A.key);else for(Q=U;Q<=V;Q++)if(0===a[Q-U]&&Pg(A,g[Q])){l=Q;break}void 0===l?v(A,Z,d,!0):(a[l-U]=c+1,l>=n?n=l:h=!0,s(A,g[l],C,null,Z,d,B,F,i),m++)}const o=h?Rg(a):l.Oj;for(Q=o.length-1,c=N-1;c>=0;c--){const I=U+c,l=g[I],W=I+1<G?g[I+1].el:A;0===a[c]?s(null,l,C,W,Z,d,B,F,i):h&&(Q<0||c!==o[Q]?r(l,C,W,2):Q--)}}},r=(I,g,C,A,l=null)=>{const{el:d,type:B,transition:F,children:i,shapeFlag:c}=I;if(6&c)return void r(I.component.subTree,g,C,A);if(128&c)return void I.suspense.move(g,C,A);if(64&c)return void B.move(I,g,C,CI);if(B===yg){Z(d,g,C);for(let I=0;I<i.length;I++)r(i[I],g,C,A);return void Z(I.anchor,g,C)}if(B===kg)return void o(I,g,C);const G=2!==A&&1&c&&F;if(G)if(0===A)F.beforeEnter(d),Z(d,g,C),Bg((()=>F.enter(d)),l);else{const{leave:I,delayLeave:A,afterLeave:l}=F,B=()=>Z(d,g,C),i=()=>{I(d,(()=>{B(),l&&l()}))};A?A(d,B,i):i()}else Z(d,g,C)},v=(I,g,C,A=!1,l=!1)=>{const{type:Z,props:d,ref:B,children:F,dynamicChildren:i,shapeFlag:c,patchFlag:G,dirs:W,cacheIndex:V}=I;if(-2===G&&(l=!1),null!=B&&E(B,null,C,I,!0),null!=V&&(g.renderCache[V]=void 0),256&c)return void g.ctx.deactivate(I);const R=1&c&&W,U=!j(I);let b;if(U&&(b=d&&d.onVnodeBeforeUnmount)&&iC(b,g,I),6&c)_(I.component,C,A);else{if(128&c)return void I.suspense.unmount(C,A);R&&M(I,null,g,"beforeUnmount"),64&c?I.type.remove(I,g,C,CI,A):i&&!i.hasOnce&&(Z!==yg||G>0&&64&G)?q(i,g,C,!1,!0):(Z===yg&&384&G||!l&&16&c)&&q(F,g,C),A&&P(I)}(U&&(b=d&&d.onVnodeUnmounted)||R)&&Bg((()=>{b&&iC(b,g,I),R&&M(I,null,g,"unmounted")}),C)},P=I=>{const{type:g,el:C,anchor:A,transition:l}=I;if(g===yg)return void f(C,A);if(g===kg)return void w(I);const Z=()=>{d(C),l&&!l.persisted&&l.afterLeave&&l.afterLeave()};if(1&I.shapeFlag&&l&&!l.persisted){const{leave:g,delayLeave:A}=l,d=()=>g(C,Z);A?A(I.el,Z,d):d()}else Z()},f=(I,g)=>{let C;while(I!==g)C=R(I),d(I),I=C;d(g)},_=(I,g,C)=>{const{bum:A,scope:Z,job:d,subTree:B,um:F,m:i,a:c}=I;bg(i),bg(c),A&&(0,l.DY)(A),Z.stop(),d&&(d.flags|=8,v(B,I,g,C)),F&&Bg(F,g),Bg((()=>{I.isUnmounted=!0}),g),g&&g.pendingBranch&&!g.isUnmounted&&I.asyncDep&&!I.asyncResolved&&I.suspenseId===g.pendingId&&(g.deps--,0===g.deps&&g.resolve())},q=(I,g,C,A=!1,l=!1,Z=0)=>{for(let d=Z;d<I.length;d++)v(I[d],g,C,A,l)},$=I=>{if(6&I.shapeFlag)return $(I.component.subTree);if(128&I.shapeFlag)return I.suspense.next();const g=R(I.anchor||I.el),C=g&&g[D];return C?R(C):g};let II=!1;const gI=(I,g,C)=>{null==I?g._vnode&&v(g._vnode,null,null,!0):s(g._vnode||null,I,g,null,null,null,C),g._vnode=I,II||(II=!0,h(),n(),II=!1)},CI={p:s,um:v,m:r,r:P,mt:p,mc:t,pc:T,pbc:H,n:$,o:I};let AI,lI;return g&&([AI,lI]=g(CI)),{render:gI,hydrate:AI,createApp:kI(gI,AI)}}function cg({type:I,props:g},C){return"svg"===C&&"foreignObject"===I||"mathml"===C&&"annotation-xml"===I&&g&&g.encoding&&g.encoding.includes("html")?void 0:C}function Gg({effect:I,job:g},C){C?(I.flags|=32,g.flags|=4):(I.flags&=-33,g.flags&=-5)}function Wg(I,g){return(!I||I&&!I.pendingBranch)&&g&&!g.persisted}function Vg(I,g,C=!1){const A=I.children,Z=g.children;if((0,l.cy)(A)&&(0,l.cy)(Z))for(let l=0;l<A.length;l++){const I=A[l];let g=Z[l];1&g.shapeFlag&&!g.dynamicChildren&&((g.patchFlag<=0||32===g.patchFlag)&&(g=Z[l]=dC(Z[l]),g.el=I.el),C||-2===g.patchFlag||Vg(I,g)),g.type===ug&&(g.el=I.el)}}function Rg(I){const g=I.slice(),C=[0];let A,l,Z,d,B;const F=I.length;for(A=0;A<F;A++){const F=I[A];if(0!==F){if(l=C[C.length-1],I[l]<F){g[A]=l,C.push(A);continue}Z=0,d=C.length-1;while(Z<d)B=Z+d>>1,I[C[B]]<F?Z=B+1:d=B;F<I[C[Z]]&&(Z>0&&(g[A]=C[Z-1]),C[Z]=A)}}Z=C.length,d=C[Z-1];while(Z-- >0)C[Z]=d,d=g[d];return C}function Ug(I){const g=I.subTree.component;if(g)return g.asyncDep&&!g.asyncResolved?g:Ug(g)}function bg(I){if(I)for(let g=0;g<I.length;g++)I[g].flags|=8}const sg=Symbol.for("v-scx"),Qg=()=>{{const I=TI(sg);return I}};function mg(I,g,C){return Ng(I,g,C)}function Ng(I,g,C=l.MZ){const{immediate:Z,deep:B,flush:F,once:i}=C;const c=(0,l.X$)({},C);const G=g&&Z||!g&&"post"!==F;let W;if(nC)if("sync"===F){const I=Qg();W=I.__watcherHandles||(I.__watcherHandles=[])}else if(!G){const I=()=>{};return I.stop=l.tE,I.resume=l.tE,I.pause=l.tE,I}const V=VC;c.call=(I,g,C)=>d(I,V,g,C);let R=!1;"post"===F?c.scheduler=I=>{Bg(I,V&&V.suspense)}:"sync"!==F&&(R=!0,c.scheduler=(I,g)=>{g?I():Q(I)}),c.augmentJob=I=>{g&&(I.flags|=4),R&&(I.flags|=2,V&&(I.id=V.uid,I.i=V))};const U=(0,A.wB)(I,g,c);return nC&&(W?W.push(U):G&&U()),U}function hg(I,g,C){const A=this.proxy,Z=(0,l.Kg)(I)?I.includes(".")?ng(A,I):()=>A[I]:I.bind(A,A);let d;(0,l.Tn)(g)?d=g:(d=g.handler,C=g);const B=sC(this),F=Ng(Z,d.bind(A),C);return B(),F}function ng(I,g){const C=g.split(".");return()=>{let g=I;for(let I=0;I<C.length&&g;I++)g=g[C[I]];return g}}const ag=(I,g)=>"modelValue"===g||"model-value"===g?I.modelModifiers:I[`${g}Modifiers`]||I[`${(0,l.PT)(g)}Modifiers`]||I[`${(0,l.Tg)(g)}Modifiers`];function og(I,g,...C){if(I.isUnmounted)return;const A=I.vnode.props||l.MZ;let Z=C;const B=g.startsWith("update:"),F=B&&ag(A,g.slice(7));let i;F&&(F.trim&&(Z=C.map((I=>(0,l.Kg)(I)?I.trim():I))),F.number&&(Z=C.map(l.bB)));let c=A[i=(0,l.rU)(g)]||A[i=(0,l.rU)((0,l.PT)(g))];!c&&B&&(c=A[i=(0,l.rU)((0,l.Tg)(g))]),c&&d(c,I,6,Z);const G=A[i+"Once"];if(G){if(I.emitted){if(I.emitted[i])return}else I.emitted={};I.emitted[i]=!0,d(G,I,6,Z)}}function wg(I,g,C=!1){const A=g.emitsCache,Z=A.get(I);if(void 0!==Z)return Z;const d=I.emits;let B={},F=!1;if(!(0,l.Tn)(I)){const A=I=>{const C=wg(I,g,!0);C&&(F=!0,(0,l.X$)(B,C))};!C&&g.mixins.length&&g.mixins.forEach(A),I.extends&&A(I.extends),I.mixins&&I.mixins.forEach(A)}return d||F?((0,l.cy)(d)?d.forEach((I=>B[I]=null)):(0,l.X$)(B,d),(0,l.Gv)(I)&&A.set(I,B),B):((0,l.Gv)(I)&&A.set(I,null),null)}function Yg(I,g){return!(!I||!(0,l.Mp)(g))&&(g=g.slice(2).replace(/Once$/,""),(0,l.$3)(I,g[0].toLowerCase()+g.slice(1))||(0,l.$3)(I,(0,l.Tg)(g))||(0,l.$3)(I,g))}function Sg(I){const{type:g,vnode:C,proxy:A,withProxy:Z,propsOptions:[d],slots:F,attrs:i,emit:c,render:G,renderCache:W,props:V,data:R,setupState:U,ctx:b,inheritAttrs:s}=I,Q=S(I);let m,N;try{if(4&C.shapeFlag){const I=Z||A,g=I;m=ZC(G.call(g,I,W,V,U,R,b)),N=i}else{const I=g;0,m=ZC(I.length>1?I(V,{attrs:i,slots:F,emit:c}):I(V,null)),N=g.props?i:Jg(i)}}catch(n){Kg.length=0,B(n,I,1),m=$g(pg)}let h=m;if(N&&!1!==s){const I=Object.keys(N),{shapeFlag:g}=h;I.length&&7&g&&(d&&I.some(l.CP)&&(N=Mg(N,d)),h=CC(h,N,!1,!0))}return C.dirs&&(h=CC(h,null,!1,!0),h.dirs=h.dirs?h.dirs.concat(C.dirs):C.dirs),C.transition&&K(h,C.transition),m=h,S(Q),m}const Jg=I=>{let g;for(const C in I)("class"===C||"style"===C||(0,l.Mp)(C))&&((g||(g={}))[C]=I[C]);return g},Mg=(I,g)=>{const C={};for(const A in I)(0,l.CP)(A)&&A.slice(9)in g||(C[A]=I[A]);return C};function Dg(I,g,C){const{props:A,children:l,component:Z}=I,{props:d,children:B,patchFlag:F}=g,i=Z.emitsOptions;if(g.dirs||g.transition)return!0;if(!(C&&F>=0))return!(!l&&!B||B&&B.$stable)||A!==d&&(A?!d||tg(A,d,i):!!d);if(1024&F)return!0;if(16&F)return A?tg(A,d,i):!!d;if(8&F){const I=g.dynamicProps;for(let g=0;g<I.length;g++){const C=I[g];if(d[C]!==A[C]&&!Yg(i,C))return!0}}return!1}function tg(I,g,C){const A=Object.keys(g);if(A.length!==Object.keys(I).length)return!0;for(let l=0;l<A.length;l++){const Z=A[l];if(g[Z]!==I[Z]&&!Yg(C,Z))return!0}return!1}function Xg({vnode:I,parent:g},C){while(g){const A=g.subTree;if(A.suspense&&A.suspense.activeBranch===I&&(A.el=I.el),A!==I)break;(I=g.vnode).el=C,g=g.parent}}const Hg=I=>I.__isSuspense;function eg(I,g){g&&g.pendingBranch?(0,l.cy)(I)?g.effects.push(...I):g.effects.push(I):N(I)}const yg=Symbol.for("v-fgt"),ug=Symbol.for("v-txt"),pg=Symbol.for("v-cmt"),kg=Symbol.for("v-stc"),Kg=[];let zg=null;function Tg(I=!1){Kg.push(zg=I?null:[])}function Lg(){Kg.pop(),zg=Kg[Kg.length-1]||null}let Eg=1;function jg(I,g=!1){Eg+=I,I<0&&zg&&g&&(zg.hasOnce=!0)}function xg(I){return I.dynamicChildren=Eg>0?zg||l.Oj:null,Lg(),Eg>0&&zg&&zg.push(I),I}function Og(I,g,C,A,l,Z){return xg(qg(I,g,C,A,l,Z,!0))}function rg(I,g,C,A,l){return xg($g(I,g,C,A,l,!0))}function vg(I){return!!I&&!0===I.__v_isVNode}function Pg(I,g){return I.type===g.type&&I.key===g.key}const fg=({key:I})=>null!=I?I:null,_g=({ref:I,ref_key:g,ref_for:C})=>("number"===typeof I&&(I=""+I),null!=I?(0,l.Kg)(I)||(0,A.i9)(I)||(0,l.Tn)(I)?{i:w,r:I,k:g,f:!!C}:I:null);function qg(I,g=null,C=null,A=0,Z=null,d=(I===yg?0:1),B=!1,F=!1){const i={__v_isVNode:!0,__v_skip:!0,type:I,props:g,key:g&&fg(g),ref:g&&_g(g),scopeId:Y,slotScopeIds:null,children:C,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:d,patchFlag:A,dynamicProps:Z,dynamicChildren:null,appContext:null,ctx:w};return F?(BC(i,C),128&d&&I.normalize(i)):C&&(i.shapeFlag|=(0,l.Kg)(C)?8:16),Eg>0&&!B&&zg&&(i.patchFlag>0||6&d)&&32!==i.patchFlag&&zg.push(i),i}const $g=IC;function IC(I,g=null,C=null,Z=0,d=null,B=!1){if(I&&I!==VI||(I=pg),vg(I)){const A=CC(I,g,!0);return C&&BC(A,C),Eg>0&&!B&&zg&&(6&A.shapeFlag?zg[zg.indexOf(I)]=A:zg.push(A)),A.patchFlag=-2,A}if(tC(I)&&(I=I.__vccOpts),g){g=gC(g);let{class:I,style:C}=g;I&&!(0,l.Kg)(I)&&(g.class=(0,l.C4)(I)),(0,l.Gv)(C)&&((0,A.ju)(C)&&!(0,l.cy)(C)&&(C=(0,l.X$)({},C)),g.style=(0,l.Tr)(C))}const F=(0,l.Kg)(I)?1:Hg(I)?128:t(I)?64:(0,l.Gv)(I)?4:(0,l.Tn)(I)?2:0;return qg(I,g,C,Z,d,F,B,!0)}function gC(I){return I?(0,A.ju)(I)||jI(I)?(0,l.X$)({},I):I:null}function CC(I,g,C=!1,A=!1){const{props:Z,ref:d,patchFlag:B,children:F,transition:i}=I,c=g?FC(Z||{},g):Z,G={__v_isVNode:!0,__v_skip:!0,type:I.type,props:c,key:c&&fg(c),ref:g&&g.ref?C&&d?(0,l.cy)(d)?d.concat(_g(g)):[d,_g(g)]:_g(g):d,scopeId:I.scopeId,slotScopeIds:I.slotScopeIds,children:F,target:I.target,targetStart:I.targetStart,targetAnchor:I.targetAnchor,staticCount:I.staticCount,shapeFlag:I.shapeFlag,patchFlag:g&&I.type!==yg?-1===B?16:16|B:B,dynamicProps:I.dynamicProps,dynamicChildren:I.dynamicChildren,appContext:I.appContext,dirs:I.dirs,transition:i,component:I.component,suspense:I.suspense,ssContent:I.ssContent&&CC(I.ssContent),ssFallback:I.ssFallback&&CC(I.ssFallback),el:I.el,anchor:I.anchor,ctx:I.ctx,ce:I.ce};return i&&A&&K(G,i.clone(G)),G}function AC(I=" ",g=0){return $g(ug,null,I,g)}function lC(I="",g=!1){return g?(Tg(),rg(pg,null,I)):$g(pg,null,I)}function ZC(I){return null==I||"boolean"===typeof I?$g(pg):(0,l.cy)(I)?$g(yg,null,I.slice()):vg(I)?dC(I):$g(ug,null,String(I))}function dC(I){return null===I.el&&-1!==I.patchFlag||I.memo?I:CC(I)}function BC(I,g){let C=0;const{shapeFlag:A}=I;if(null==g)g=null;else if((0,l.cy)(g))C=16;else if("object"===typeof g){if(65&A){const C=g.default;return void(C&&(C._c&&(C._d=!1),BC(I,C()),C._c&&(C._d=!0)))}{C=32;const A=g._;A||jI(g)?3===A&&w&&(1===w.slots._?g._=1:(g._=2,I.patchFlag|=1024)):g._ctx=w}}else(0,l.Tn)(g)?(g={default:g,_ctx:w},C=32):(g=String(g),64&A?(C=16,g=[AC(g)]):C=8);I.children=g,I.shapeFlag|=C}function FC(...I){const g={};for(let C=0;C<I.length;C++){const A=I[C];for(const I in A)if("class"===I)g.class!==A.class&&(g.class=(0,l.C4)([g.class,A.class]));else if("style"===I)g.style=(0,l.Tr)([g.style,A.style]);else if((0,l.Mp)(I)){const C=g[I],Z=A[I];!Z||C===Z||(0,l.cy)(C)&&C.includes(Z)||(g[I]=C?[].concat(C,Z):Z)}else""!==I&&(g[I]=A[I])}return g}function iC(I,g,C,A=null){d(I,g,7,[C,A])}const cC=uI();let GC=0;function WC(I,g,C){const Z=I.type,d=(g?g.appContext:I.appContext)||cC,B={uid:GC++,vnode:I,type:Z,parent:g,appContext:d,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new A.yC(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:g?g.provides:Object.create(d.provides),ids:g?g.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:fI(Z,d),emitsOptions:wg(Z,d),emit:null,emitted:null,propsDefaults:l.MZ,inheritAttrs:Z.inheritAttrs,ctx:l.MZ,data:l.MZ,props:l.MZ,attrs:l.MZ,slots:l.MZ,refs:l.MZ,setupState:l.MZ,setupContext:null,suspense:C,suspenseId:C?C.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return B.ctx={_:B},B.root=g?g.root:B,B.emit=og.bind(null,B),I.ce&&I.ce(B),B}let VC=null;const RC=()=>VC||w;let UC,bC;{const I=(0,l.We)(),g=(g,C)=>{let A;return(A=I[g])||(A=I[g]=[]),A.push(C),I=>{A.length>1?A.forEach((g=>g(I))):A[0](I)}};UC=g("__VUE_INSTANCE_SETTERS__",(I=>VC=I)),bC=g("__VUE_SSR_SETTERS__",(I=>nC=I))}const sC=I=>{const g=VC;return UC(I),I.scope.on(),()=>{I.scope.off(),UC(g)}},QC=()=>{VC&&VC.scope.off(),UC(null)};function mC(I){return 4&I.vnode.shapeFlag}let NC,hC,nC=!1;function aC(I,g=!1,C=!1){g&&bC(g);const{props:A,children:l}=I.vnode,Z=mC(I);xI(I,A,Z,g),lg(I,l,C);const d=Z?oC(I,g):void 0;return g&&bC(!1),d}function oC(I,g){const C=I.type;I.accessCache=Object.create(null),I.proxy=new Proxy(I.ctx,mI);const{setup:d}=C;if(d){(0,A.C4)();const C=I.setupContext=d.length>1?JC(I):null,F=sC(I),i=Z(d,I,0,[I.props,C]),c=(0,l.yL)(i);if((0,A.bl)(),F(),!c&&!I.sp||j(I)||L(I),c){if(i.then(QC,QC),g)return i.then((C=>{wC(I,C,g)})).catch((g=>{B(g,I,0)}));I.asyncDep=i}else wC(I,i,g)}else YC(I,g)}function wC(I,g,C){(0,l.Tn)(g)?I.type.__ssrInlineRender?I.ssrRender=g:I.render=g:(0,l.Gv)(g)&&(I.setupState=(0,A.Pr)(g)),YC(I,C)}function YC(I,g,C){const Z=I.type;if(!I.render){if(!g&&NC&&!Z.render){const g=Z.template||YI(I).template;if(g){0;const{isCustomElement:C,compilerOptions:A}=I.appContext.config,{delimiters:d,compilerOptions:B}=Z,F=(0,l.X$)((0,l.X$)({isCustomElement:C,delimiters:d},A),B);Z.render=NC(g,F)}}I.render=Z.render||l.tE,hC&&hC(I)}{const g=sC(I);(0,A.C4)();try{nI(I)}finally{(0,A.bl)(),g()}}}const SC={get(I,g){return(0,A.u4)(I,"get",""),I[g]}};function JC(I){const g=g=>{I.exposed=g||{}};return{attrs:new Proxy(I.attrs,SC),slots:I.slots,emit:I.emit,expose:g}}function MC(I){return I.exposed?I.exposeProxy||(I.exposeProxy=new Proxy((0,A.Pr)((0,A.IG)(I.exposed)),{get(g,C){return C in g?g[C]:C in sI?sI[C](I):void 0},has(I,g){return g in I||g in sI}})):I.proxy}function DC(I,g=!0){return(0,l.Tn)(I)?I.displayName||I.name:I.name||g&&I.__name}function tC(I){return(0,l.Tn)(I)&&"__vccOpts"in I}const XC=(I,g)=>{const C=(0,A.EW)(I,g,nC);return C};const HC="3.5.13"},5130:function(I,g,C){C.d(g,{D$:function(){return x},Ef:function(){return P}});C(4114),C(7642),C(8004),C(3853),C(5876),C(2475),C(5024),C(1698),C(8992),C(4520),C(3949),C(1454),C(7550);var A=C(6768),l=C(4232);C(144);
/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let Z;const d="undefined"!==typeof window&&window.trustedTypes;if(d)try{Z=d.createPolicy("vue",{createHTML:I=>I})}catch(q){}const B=Z?I=>Z.createHTML(I):I=>I,F="http://www.w3.org/2000/svg",i="http://www.w3.org/1998/Math/MathML",c="undefined"!==typeof document?document:null,G=c&&c.createElement("template"),W={insert:(I,g,C)=>{g.insertBefore(I,C||null)},remove:I=>{const g=I.parentNode;g&&g.removeChild(I)},createElement:(I,g,C,A)=>{const l="svg"===g?c.createElementNS(F,I):"mathml"===g?c.createElementNS(i,I):C?c.createElement(I,{is:C}):c.createElement(I);return"select"===I&&A&&null!=A.multiple&&l.setAttribute("multiple",A.multiple),l},createText:I=>c.createTextNode(I),createComment:I=>c.createComment(I),setText:(I,g)=>{I.nodeValue=g},setElementText:(I,g)=>{I.textContent=g},parentNode:I=>I.parentNode,nextSibling:I=>I.nextSibling,querySelector:I=>c.querySelector(I),setScopeId(I,g){I.setAttribute(g,"")},insertStaticContent(I,g,C,A,l,Z){const d=C?C.previousSibling:g.lastChild;if(l&&(l===Z||l.nextSibling)){while(1)if(g.insertBefore(l.cloneNode(!0),C),l===Z||!(l=l.nextSibling))break}else{G.innerHTML=B("svg"===A?`<svg>${I}</svg>`:"mathml"===A?`<math>${I}</math>`:I);const l=G.content;if("svg"===A||"mathml"===A){const I=l.firstChild;while(I.firstChild)l.appendChild(I.firstChild);l.removeChild(I)}g.insertBefore(l,C)}return[d?d.nextSibling:g.firstChild,C?C.previousSibling:g.lastChild]}},V=Symbol("_vtc"),R={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};A.QP;function U(I,g,C){const A=I[V];A&&(g=(g?[g,...A]:[...A]).join(" ")),null==g?I.removeAttribute("class"):C?I.setAttribute("class",g):I.className=g}const b=Symbol("_vod"),s=Symbol("_vsh");const Q=Symbol("");const m=/(^|;)\s*display\s*:/;function N(I,g,C){const A=I.style,Z=(0,l.Kg)(C);let d=!1;if(C&&!Z){if(g)if((0,l.Kg)(g))for(const I of g.split(";")){const g=I.slice(0,I.indexOf(":")).trim();null==C[g]&&n(A,g,"")}else for(const I in g)null==C[I]&&n(A,I,"");for(const I in C)"display"===I&&(d=!0),n(A,I,C[I])}else if(Z){if(g!==C){const I=A[Q];I&&(C+=";"+I),A.cssText=C,d=m.test(C)}}else g&&I.removeAttribute("style");b in I&&(I[b]=d?A.display:"",I[s]&&(A.display="none"))}const h=/\s*!important$/;function n(I,g,C){if((0,l.cy)(C))C.forEach((C=>n(I,g,C)));else if(null==C&&(C=""),g.startsWith("--"))I.setProperty(g,C);else{const A=w(I,g);h.test(C)?I.setProperty((0,l.Tg)(A),C.replace(h,""),"important"):I[A]=C}}const a=["Webkit","Moz","ms"],o={};function w(I,g){const C=o[g];if(C)return C;let A=(0,l.PT)(g);if("filter"!==A&&A in I)return o[g]=A;A=(0,l.ZH)(A);for(let l=0;l<a.length;l++){const C=a[l]+A;if(C in I)return o[g]=C}return g}const Y="http://www.w3.org/1999/xlink";function S(I,g,C,A,Z,d=(0,l.J$)(g)){A&&g.startsWith("xlink:")?null==C?I.removeAttributeNS(Y,g.slice(6,g.length)):I.setAttributeNS(Y,g,C):null==C||d&&!(0,l.Y2)(C)?I.removeAttribute(g):I.setAttribute(g,d?"":(0,l.Bm)(C)?String(C):C)}function J(I,g,C,A,Z){if("innerHTML"===g||"textContent"===g)return void(null!=C&&(I[g]="innerHTML"===g?B(C):C));const d=I.tagName;if("value"===g&&"PROGRESS"!==d&&!d.includes("-")){const A="OPTION"===d?I.getAttribute("value")||"":I.value,l=null==C?"checkbox"===I.type?"on":"":String(C);return A===l&&"_value"in I||(I.value=l),null==C&&I.removeAttribute(g),void(I._value=C)}let F=!1;if(""===C||null==C){const A=typeof I[g];"boolean"===A?C=(0,l.Y2)(C):null==C&&"string"===A?(C="",F=!0):"number"===A&&(C=0,F=!0)}try{I[g]=C}catch(q){0}F&&I.removeAttribute(Z||g)}function M(I,g,C,A){I.addEventListener(g,C,A)}function D(I,g,C,A){I.removeEventListener(g,C,A)}const t=Symbol("_vei");function X(I,g,C,A,l=null){const Z=I[t]||(I[t]={}),d=Z[g];if(A&&d)d.value=A;else{const[C,B]=e(g);if(A){const d=Z[g]=k(A,l);M(I,C,d,B)}else d&&(D(I,C,d,B),Z[g]=void 0)}}const H=/(?:Once|Passive|Capture)$/;function e(I){let g;if(H.test(I)){let C;g={};while(C=I.match(H))I=I.slice(0,I.length-C[0].length),g[C[0].toLowerCase()]=!0}const C=":"===I[2]?I.slice(3):(0,l.Tg)(I.slice(2));return[C,g]}let y=0;const u=Promise.resolve(),p=()=>y||(u.then((()=>y=0)),y=Date.now());function k(I,g){const C=I=>{if(I._vts){if(I._vts<=C.attached)return}else I._vts=Date.now();(0,A.qL)(K(I,C.value),g,5,[I])};return C.value=I,C.attached=p(),C}function K(I,g){if((0,l.cy)(g)){const C=I.stopImmediatePropagation;return I.stopImmediatePropagation=()=>{C.call(I),I._stopped=!0},g.map((I=>g=>!g._stopped&&I&&I(g)))}return g}const z=I=>111===I.charCodeAt(0)&&110===I.charCodeAt(1)&&I.charCodeAt(2)>96&&I.charCodeAt(2)<123,T=(I,g,C,A,Z,d)=>{const B="svg"===Z;"class"===g?U(I,A,B):"style"===g?N(I,C,A):(0,l.Mp)(g)?(0,l.CP)(g)||X(I,g,C,A,d):("."===g[0]?(g=g.slice(1),1):"^"===g[0]?(g=g.slice(1),0):L(I,g,A,B))?(J(I,g,A),I.tagName.includes("-")||"value"!==g&&"checked"!==g&&"selected"!==g||S(I,g,A,B,d,"value"!==g)):!I._isVueCE||!/[A-Z]/.test(g)&&(0,l.Kg)(A)?("true-value"===g?I._trueValue=A:"false-value"===g&&(I._falseValue=A),S(I,g,A,B)):J(I,(0,l.PT)(g),A,d,g)};function L(I,g,C,A){if(A)return"innerHTML"===g||"textContent"===g||!!(g in I&&z(g)&&(0,l.Tn)(C));if("spellcheck"===g||"draggable"===g||"translate"===g)return!1;if("form"===g)return!1;if("list"===g&&"INPUT"===I.tagName)return!1;if("type"===g&&"TEXTAREA"===I.tagName)return!1;if("width"===g||"height"===g){const g=I.tagName;if("IMG"===g||"VIDEO"===g||"CANVAS"===g||"SOURCE"===g)return!1}return(!z(g)||!(0,l.Kg)(C))&&g in I}
/*! #__NO_SIDE_EFFECTS__ */
"undefined"!==typeof HTMLElement&&HTMLElement;Symbol("_moveCb"),Symbol("_enterCb");Symbol("_assign");const E=["ctrl","shift","alt","meta"],j={stop:I=>I.stopPropagation(),prevent:I=>I.preventDefault(),self:I=>I.target!==I.currentTarget,ctrl:I=>!I.ctrlKey,shift:I=>!I.shiftKey,alt:I=>!I.altKey,meta:I=>!I.metaKey,left:I=>"button"in I&&0!==I.button,middle:I=>"button"in I&&1!==I.button,right:I=>"button"in I&&2!==I.button,exact:(I,g)=>E.some((C=>I[`${C}Key`]&&!g.includes(C)))},x=(I,g)=>{const C=I._withMods||(I._withMods={}),A=g.join(".");return C[A]||(C[A]=(C,...A)=>{for(let I=0;I<g.length;I++){const A=j[g[I]];if(A&&A(C,g))return}return I(C,...A)})},O=(0,l.X$)({patchProp:T},W);let r;function v(){return r||(r=(0,A.K9)(O))}const P=(...I)=>{const g=v().createApp(...I);const{mount:C}=g;return g.mount=I=>{const A=_(I);if(!A)return;const Z=g._component;(0,l.Tn)(Z)||Z.render||Z.template||(Z.template=A.innerHTML),1===A.nodeType&&(A.textContent="");const d=C(A,!1,f(A));return A instanceof Element&&(A.removeAttribute("v-cloak"),A.setAttribute("data-v-app","")),d},g};function f(I){return I instanceof SVGElement?"svg":"function"===typeof MathMLElement&&I instanceof MathMLElement?"mathml":void 0}function _(I){if((0,l.Kg)(I)){const g=document.querySelector(I);return g}return I}},4232:function(I,g,C){C.d(g,{$3:function(){return V},$H:function(){return p},BH:function(){return x},BX:function(){return CI},Bm:function(){return h},C4:function(){return _},CE:function(){return U},CP:function(){return i},DY:function(){return k},Gv:function(){return n},J$:function(){return $},Kg:function(){return N},MZ:function(){return l},Mp:function(){return F},NO:function(){return B},Oj:function(){return Z},PT:function(){return X},Qd:function(){return S},Ro:function(){return T},SU:function(){return M},TF:function(){return G},Tg:function(){return e},Tn:function(){return m},Tr:function(){return O},We:function(){return E},X$:function(){return c},Y2:function(){return II},ZH:function(){return y},Zf:function(){return Y},bB:function(){return z},cy:function(){return R},gd:function(){return Q},pD:function(){return A},rU:function(){return u},tE:function(){return d},u3:function(){return AI},vM:function(){return b},v_:function(){return ZI},yI:function(){return J},yL:function(){return a},yQ:function(){return K}});C(4114),C(8992),C(4520),C(3949),C(1454),C(8872);
/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
function A(I){const g=Object.create(null);for(const C of I.split(","))g[C]=1;return I=>I in g}const l={},Z=[],d=()=>{},B=()=>!1,F=I=>111===I.charCodeAt(0)&&110===I.charCodeAt(1)&&(I.charCodeAt(2)>122||I.charCodeAt(2)<97),i=I=>I.startsWith("onUpdate:"),c=Object.assign,G=(I,g)=>{const C=I.indexOf(g);C>-1&&I.splice(C,1)},W=Object.prototype.hasOwnProperty,V=(I,g)=>W.call(I,g),R=Array.isArray,U=I=>"[object Map]"===w(I),b=I=>"[object Set]"===w(I),s=I=>"[object Date]"===w(I),Q=I=>"[object RegExp]"===w(I),m=I=>"function"===typeof I,N=I=>"string"===typeof I,h=I=>"symbol"===typeof I,n=I=>null!==I&&"object"===typeof I,a=I=>(n(I)||m(I))&&m(I.then)&&m(I.catch),o=Object.prototype.toString,w=I=>o.call(I),Y=I=>w(I).slice(8,-1),S=I=>"[object Object]"===w(I),J=I=>N(I)&&"NaN"!==I&&"-"!==I[0]&&""+parseInt(I,10)===I,M=A(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),D=I=>{const g=Object.create(null);return C=>{const A=g[C];return A||(g[C]=I(C))}},t=/-(\w)/g,X=D((I=>I.replace(t,((I,g)=>g?g.toUpperCase():"")))),H=/\B([A-Z])/g,e=D((I=>I.replace(H,"-$1").toLowerCase())),y=D((I=>I.charAt(0).toUpperCase()+I.slice(1))),u=D((I=>{const g=I?`on${y(I)}`:"";return g})),p=(I,g)=>!Object.is(I,g),k=(I,...g)=>{for(let C=0;C<I.length;C++)I[C](...g)},K=(I,g,C,A=!1)=>{Object.defineProperty(I,g,{configurable:!0,enumerable:!1,writable:A,value:C})},z=I=>{const g=parseFloat(I);return isNaN(g)?I:g},T=I=>{const g=N(I)?Number(I):NaN;return isNaN(g)?I:g};let L;const E=()=>L||(L="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof C.g?C.g:{});const j="Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol",x=A(j);function O(I){if(R(I)){const g={};for(let C=0;C<I.length;C++){const A=I[C],l=N(A)?f(A):O(A);if(l)for(const I in l)g[I]=l[I]}return g}if(N(I)||n(I))return I}const r=/;(?![^(]*\))/g,v=/:([^]+)/,P=/\/\*[^]*?\*\//g;function f(I){const g={};return I.replace(P,"").split(r).forEach((I=>{if(I){const C=I.split(v);C.length>1&&(g[C[0].trim()]=C[1].trim())}})),g}function _(I){let g="";if(N(I))g=I;else if(R(I))for(let C=0;C<I.length;C++){const A=_(I[C]);A&&(g+=A+" ")}else if(n(I))for(const C in I)I[C]&&(g+=C+" ");return g.trim()}const q="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",$=A(q);function II(I){return!!I||""===I}function gI(I,g){if(I.length!==g.length)return!1;let C=!0;for(let A=0;C&&A<I.length;A++)C=CI(I[A],g[A]);return C}function CI(I,g){if(I===g)return!0;let C=s(I),A=s(g);if(C||A)return!(!C||!A)&&I.getTime()===g.getTime();if(C=h(I),A=h(g),C||A)return I===g;if(C=R(I),A=R(g),C||A)return!(!C||!A)&&gI(I,g);if(C=n(I),A=n(g),C||A){if(!C||!A)return!1;const l=Object.keys(I).length,Z=Object.keys(g).length;if(l!==Z)return!1;for(const C in I){const A=I.hasOwnProperty(C),l=g.hasOwnProperty(C);if(A&&!l||!A&&l||!CI(I[C],g[C]))return!1}}return String(I)===String(g)}function AI(I,g){return I.findIndex((I=>CI(I,g)))}const lI=I=>!(!I||!0!==I["__v_isRef"]),ZI=I=>N(I)?I:null==I?"":R(I)||n(I)&&(I.toString===o||!m(I.toString))?lI(I)?ZI(I.value):JSON.stringify(I,dI,2):String(I),dI=(I,g)=>lI(g)?dI(I,g.value):U(g)?{[`Map(${g.size})`]:[...g.entries()].reduce(((I,[g,C],A)=>(I[BI(g,A)+" =>"]=C,I)),{})}:b(g)?{[`Set(${g.size})`]:[...g.values()].map((I=>BI(I)))}:h(g)?BI(g):!n(g)||R(g)||S(g)?g:String(g),BI=(I,g="")=>{var C;return h(I)?`Symbol(${null!=(C=I.description)?C:g})`:I}},9306:function(I,g,C){var A=C(4901),l=C(6823),Z=TypeError;I.exports=function(I){if(A(I))return I;throw new Z(l(I)+" is not a function")}},3506:function(I,g,C){var A=C(3925),l=String,Z=TypeError;I.exports=function(I){if(A(I))return I;throw new Z("Can't set "+l(I)+" as a prototype")}},7080:function(I,g,C){var A=C(4402).has;I.exports=function(I){return A(I),I}},6469:function(I,g,C){var A=C(8227),l=C(2360),Z=C(4913).f,d=A("unscopables"),B=Array.prototype;void 0===B[d]&&Z(B,d,{configurable:!0,value:l(null)}),I.exports=function(I){B[d][I]=!0}},679:function(I,g,C){var A=C(1625),l=TypeError;I.exports=function(I,g){if(A(g,I))return I;throw new l("Incorrect invocation")}},8551:function(I,g,C){var A=C(34),l=String,Z=TypeError;I.exports=function(I){if(A(I))return I;throw new Z(l(I)+" is not an object")}},7811:function(I){I.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},7394:function(I,g,C){var A=C(4576),l=C(6706),Z=C(2195),d=A.ArrayBuffer,B=A.TypeError;I.exports=d&&l(d.prototype,"byteLength","get")||function(I){if("ArrayBuffer"!==Z(I))throw new B("ArrayBuffer expected");return I.byteLength}},3238:function(I,g,C){var A=C(4576),l=C(7476),Z=C(7394),d=A.ArrayBuffer,B=d&&d.prototype,F=B&&l(B.slice);I.exports=function(I){if(0!==Z(I))return!1;if(!F)return!1;try{return F(I,0,0),!1}catch(g){return!0}}},5169:function(I,g,C){var A=C(3238),l=TypeError;I.exports=function(I){if(A(I))throw new l("ArrayBuffer is detached");return I}},5636:function(I,g,C){var A=C(4576),l=C(9504),Z=C(6706),d=C(7696),B=C(5169),F=C(7394),i=C(4483),c=C(1548),G=A.structuredClone,W=A.ArrayBuffer,V=A.DataView,R=Math.min,U=W.prototype,b=V.prototype,s=l(U.slice),Q=Z(U,"resizable","get"),m=Z(U,"maxByteLength","get"),N=l(b.getInt8),h=l(b.setInt8);I.exports=(c||i)&&function(I,g,C){var A,l=F(I),Z=void 0===g?l:d(g),U=!Q||!Q(I);if(B(I),c&&(I=G(I,{transfer:[I]}),l===Z&&(C||U)))return I;if(l>=Z&&(!C||U))A=s(I,0,Z);else{var b=C&&!U&&m?{maxByteLength:m(I)}:void 0;A=new W(Z,b);for(var n=new V(I),a=new V(A),o=R(Z,l),w=0;w<o;w++)h(a,w,N(n,w))}return c||i(I),A}},4644:function(I,g,C){var A,l,Z,d=C(7811),B=C(3724),F=C(4576),i=C(4901),c=C(34),G=C(9297),W=C(6955),V=C(6823),R=C(6699),U=C(6840),b=C(2106),s=C(1625),Q=C(2787),m=C(2967),N=C(8227),h=C(3392),n=C(1181),a=n.enforce,o=n.get,w=F.Int8Array,Y=w&&w.prototype,S=F.Uint8ClampedArray,J=S&&S.prototype,M=w&&Q(w),D=Y&&Q(Y),t=Object.prototype,X=F.TypeError,H=N("toStringTag"),e=h("TYPED_ARRAY_TAG"),y="TypedArrayConstructor",u=d&&!!m&&"Opera"!==W(F.opera),p=!1,k={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},K={BigInt64Array:8,BigUint64Array:8},z=function(I){if(!c(I))return!1;var g=W(I);return"DataView"===g||G(k,g)||G(K,g)},T=function(I){var g=Q(I);if(c(g)){var C=o(g);return C&&G(C,y)?C[y]:T(g)}},L=function(I){if(!c(I))return!1;var g=W(I);return G(k,g)||G(K,g)},E=function(I){if(L(I))return I;throw new X("Target is not a typed array")},j=function(I){if(i(I)&&(!m||s(M,I)))return I;throw new X(V(I)+" is not a typed array constructor")},x=function(I,g,C,A){if(B){if(C)for(var l in k){var Z=F[l];if(Z&&G(Z.prototype,I))try{delete Z.prototype[I]}catch(d){try{Z.prototype[I]=g}catch(i){}}}D[I]&&!C||U(D,I,C?g:u&&Y[I]||g,A)}},O=function(I,g,C){var A,l;if(B){if(m){if(C)for(A in k)if(l=F[A],l&&G(l,I))try{delete l[I]}catch(Z){}if(M[I]&&!C)return;try{return U(M,I,C?g:u&&M[I]||g)}catch(Z){}}for(A in k)l=F[A],!l||l[I]&&!C||U(l,I,g)}};for(A in k)l=F[A],Z=l&&l.prototype,Z?a(Z)[y]=l:u=!1;for(A in K)l=F[A],Z=l&&l.prototype,Z&&(a(Z)[y]=l);if((!u||!i(M)||M===Function.prototype)&&(M=function(){throw new X("Incorrect invocation")},u))for(A in k)F[A]&&m(F[A],M);if((!u||!D||D===t)&&(D=M.prototype,u))for(A in k)F[A]&&m(F[A].prototype,D);if(u&&Q(J)!==D&&m(J,D),B&&!G(D,H))for(A in p=!0,b(D,H,{configurable:!0,get:function(){return c(this)?this[e]:void 0}}),k)F[A]&&R(F[A],e,A);I.exports={NATIVE_ARRAY_BUFFER_VIEWS:u,TYPED_ARRAY_TAG:p&&e,aTypedArray:E,aTypedArrayConstructor:j,exportTypedArrayMethod:x,exportTypedArrayStaticMethod:O,getTypedArrayConstructor:T,isView:z,isTypedArray:L,TypedArray:M,TypedArrayPrototype:D}},5370:function(I,g,C){var A=C(6198);I.exports=function(I,g,C){var l=0,Z=arguments.length>2?C:A(g),d=new I(Z);while(Z>l)d[l]=g[l++];return d}},9617:function(I,g,C){var A=C(5397),l=C(5610),Z=C(6198),d=function(I){return function(g,C,d){var B=A(g),F=Z(B);if(0===F)return!I&&-1;var i,c=l(d,F);if(I&&C!==C){while(F>c)if(i=B[c++],i!==i)return!0}else for(;F>c;c++)if((I||c in B)&&B[c]===C)return I||c||0;return!I&&-1}};I.exports={includes:d(!0),indexOf:d(!1)}},4527:function(I,g,C){var A=C(3724),l=C(4376),Z=TypeError,d=Object.getOwnPropertyDescriptor,B=A&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(I){return I instanceof TypeError}}();I.exports=B?function(I,g){if(l(I)&&!d(I,"length").writable)throw new Z("Cannot set read only .length");return I.length=g}:function(I,g){return I.length=g}},7680:function(I,g,C){var A=C(9504);I.exports=A([].slice)},7628:function(I,g,C){var A=C(6198);I.exports=function(I,g){for(var C=A(I),l=new g(C),Z=0;Z<C;Z++)l[Z]=I[C-Z-1];return l}},9928:function(I,g,C){var A=C(6198),l=C(1291),Z=RangeError;I.exports=function(I,g,C,d){var B=A(I),F=l(C),i=F<0?B+F:F;if(i>=B||i<0)throw new Z("Incorrect index");for(var c=new g(B),G=0;G<B;G++)c[G]=G===i?d:I[G];return c}},6319:function(I,g,C){var A=C(8551),l=C(9539);I.exports=function(I,g,C,Z){try{return Z?g(A(C)[0],C[1]):g(C)}catch(d){l(I,"throw",d)}}},2195:function(I,g,C){var A=C(9504),l=A({}.toString),Z=A("".slice);I.exports=function(I){return Z(l(I),8,-1)}},6955:function(I,g,C){var A=C(2140),l=C(4901),Z=C(2195),d=C(8227),B=d("toStringTag"),F=Object,i="Arguments"===Z(function(){return arguments}()),c=function(I,g){try{return I[g]}catch(C){}};I.exports=A?Z:function(I){var g,C,A;return void 0===I?"Undefined":null===I?"Null":"string"==typeof(C=c(g=F(I),B))?C:i?Z(g):"Object"===(A=Z(g))&&l(g.callee)?"Arguments":A}},7740:function(I,g,C){var A=C(9297),l=C(5031),Z=C(7347),d=C(4913);I.exports=function(I,g,C){for(var B=l(g),F=d.f,i=Z.f,c=0;c<B.length;c++){var G=B[c];A(I,G)||C&&A(C,G)||F(I,G,i(g,G))}}},2211:function(I,g,C){var A=C(9039);I.exports=!A((function(){function I(){}return I.prototype.constructor=null,Object.getPrototypeOf(new I)!==I.prototype}))},2529:function(I){I.exports=function(I,g){return{value:I,done:g}}},6699:function(I,g,C){var A=C(3724),l=C(4913),Z=C(6980);I.exports=A?function(I,g,C){return l.f(I,g,Z(1,C))}:function(I,g,C){return I[g]=C,I}},6980:function(I){I.exports=function(I,g){return{enumerable:!(1&I),configurable:!(2&I),writable:!(4&I),value:g}}},4659:function(I,g,C){var A=C(3724),l=C(4913),Z=C(6980);I.exports=function(I,g,C){A?l.f(I,g,Z(0,C)):I[g]=C}},2106:function(I,g,C){var A=C(283),l=C(4913);I.exports=function(I,g,C){return C.get&&A(C.get,g,{getter:!0}),C.set&&A(C.set,g,{setter:!0}),l.f(I,g,C)}},6840:function(I,g,C){var A=C(4901),l=C(4913),Z=C(283),d=C(9433);I.exports=function(I,g,C,B){B||(B={});var F=B.enumerable,i=void 0!==B.name?B.name:g;if(A(C)&&Z(C,i,B),B.global)F?I[g]=C:d(g,C);else{try{B.unsafe?I[g]&&(F=!0):delete I[g]}catch(c){}F?I[g]=C:l.f(I,g,{value:C,enumerable:!1,configurable:!B.nonConfigurable,writable:!B.nonWritable})}return I}},6279:function(I,g,C){var A=C(6840);I.exports=function(I,g,C){for(var l in g)A(I,l,g[l],C);return I}},9433:function(I,g,C){var A=C(4576),l=Object.defineProperty;I.exports=function(I,g){try{l(A,I,{value:g,configurable:!0,writable:!0})}catch(C){A[I]=g}return g}},3724:function(I,g,C){var A=C(9039);I.exports=!A((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4483:function(I,g,C){var A,l,Z,d,B=C(4576),F=C(9429),i=C(1548),c=B.structuredClone,G=B.ArrayBuffer,W=B.MessageChannel,V=!1;if(i)V=function(I){c(I,{transfer:[I]})};else if(G)try{W||(A=F("worker_threads"),A&&(W=A.MessageChannel)),W&&(l=new W,Z=new G(2),d=function(I){l.port1.postMessage(null,[I])},2===Z.byteLength&&(d(Z),0===Z.byteLength&&(V=d)))}catch(R){}I.exports=V},4055:function(I,g,C){var A=C(4576),l=C(34),Z=A.document,d=l(Z)&&l(Z.createElement);I.exports=function(I){return d?Z.createElement(I):{}}},6837:function(I){var g=TypeError,C=9007199254740991;I.exports=function(I){if(I>C)throw g("Maximum allowed index exceeded");return I}},5002:function(I){I.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},8727:function(I){I.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},6193:function(I,g,C){var A=C(4215);I.exports="NODE"===A},2839:function(I,g,C){var A=C(4576),l=A.navigator,Z=l&&l.userAgent;I.exports=Z?String(Z):""},9519:function(I,g,C){var A,l,Z=C(4576),d=C(2839),B=Z.process,F=Z.Deno,i=B&&B.versions||F&&F.version,c=i&&i.v8;c&&(A=c.split("."),l=A[0]>0&&A[0]<4?1:+(A[0]+A[1])),!l&&d&&(A=d.match(/Edge\/(\d+)/),(!A||A[1]>=74)&&(A=d.match(/Chrome\/(\d+)/),A&&(l=+A[1]))),I.exports=l},4215:function(I,g,C){var A=C(4576),l=C(2839),Z=C(2195),d=function(I){return l.slice(0,I.length)===I};I.exports=function(){return d("Bun/")?"BUN":d("Cloudflare-Workers")?"CLOUDFLARE":d("Deno/")?"DENO":d("Node.js/")?"NODE":A.Bun&&"string"==typeof Bun.version?"BUN":A.Deno&&"object"==typeof Deno.version?"DENO":"process"===Z(A.process)?"NODE":A.window&&A.document?"BROWSER":"REST"}()},8574:function(I,g,C){var A=C(9504),l=Error,Z=A("".replace),d=function(I){return String(new l(I).stack)}("zxcasd"),B=/\n\s*at [^:]*:[^\n]*/,F=B.test(d);I.exports=function(I,g){if(F&&"string"==typeof I&&!l.prepareStackTrace)while(g--)I=Z(I,B,"");return I}},6249:function(I,g,C){var A=C(9039),l=C(6980);I.exports=!A((function(){var I=new Error("a");return!("stack"in I)||(Object.defineProperty(I,"stack",l(1,7)),7!==I.stack)}))},6518:function(I,g,C){var A=C(4576),l=C(7347).f,Z=C(6699),d=C(6840),B=C(9433),F=C(7740),i=C(2796);I.exports=function(I,g){var C,c,G,W,V,R,U=I.target,b=I.global,s=I.stat;if(c=b?A:s?A[U]||B(U,{}):A[U]&&A[U].prototype,c)for(G in g){if(V=g[G],I.dontCallGetSet?(R=l(c,G),W=R&&R.value):W=c[G],C=i(b?G:U+(s?".":"#")+G,I.forced),!C&&void 0!==W){if(typeof V==typeof W)continue;F(V,W)}(I.sham||W&&W.sham)&&Z(V,"sham",!0),d(c,G,V,I)}}},9039:function(I){I.exports=function(I){try{return!!I()}catch(g){return!0}}},8745:function(I,g,C){var A=C(616),l=Function.prototype,Z=l.apply,d=l.call;I.exports="object"==typeof Reflect&&Reflect.apply||(A?d.bind(Z):function(){return d.apply(Z,arguments)})},6080:function(I,g,C){var A=C(7476),l=C(9306),Z=C(616),d=A(A.bind);I.exports=function(I,g){return l(I),void 0===g?I:Z?d(I,g):function(){return I.apply(g,arguments)}}},616:function(I,g,C){var A=C(9039);I.exports=!A((function(){var I=function(){}.bind();return"function"!=typeof I||I.hasOwnProperty("prototype")}))},9565:function(I,g,C){var A=C(616),l=Function.prototype.call;I.exports=A?l.bind(l):function(){return l.apply(l,arguments)}},350:function(I,g,C){var A=C(3724),l=C(9297),Z=Function.prototype,d=A&&Object.getOwnPropertyDescriptor,B=l(Z,"name"),F=B&&"something"===function(){}.name,i=B&&(!A||A&&d(Z,"name").configurable);I.exports={EXISTS:B,PROPER:F,CONFIGURABLE:i}},6706:function(I,g,C){var A=C(9504),l=C(9306);I.exports=function(I,g,C){try{return A(l(Object.getOwnPropertyDescriptor(I,g)[C]))}catch(Z){}}},7476:function(I,g,C){var A=C(2195),l=C(9504);I.exports=function(I){if("Function"===A(I))return l(I)}},9504:function(I,g,C){var A=C(616),l=Function.prototype,Z=l.call,d=A&&l.bind.bind(Z,Z);I.exports=A?d:function(I){return function(){return Z.apply(I,arguments)}}},9429:function(I,g,C){var A=C(4576),l=C(6193);I.exports=function(I){if(l){try{return A.process.getBuiltinModule(I)}catch(g){}try{return Function('return require("'+I+'")')()}catch(g){}}}},4124:function(I,g,C){var A=C(4576);I.exports=function(I,g){var C=A[I],l=C&&C.prototype;return l&&l[g]}},7751:function(I,g,C){var A=C(4576),l=C(4901),Z=function(I){return l(I)?I:void 0};I.exports=function(I,g){return arguments.length<2?Z(A[I]):A[I]&&A[I][g]}},1767:function(I){I.exports=function(I){return{iterator:I,next:I.next,done:!1}}},8646:function(I,g,C){var A=C(9565),l=C(8551),Z=C(1767),d=C(851);I.exports=function(I,g){g&&"string"===typeof I||l(I);var C=d(I);return Z(l(void 0!==C?A(C,I):I))}},851:function(I,g,C){var A=C(6955),l=C(5966),Z=C(4117),d=C(6269),B=C(8227),F=B("iterator");I.exports=function(I){if(!Z(I))return l(I,F)||l(I,"@@iterator")||d[A(I)]}},81:function(I,g,C){var A=C(9565),l=C(9306),Z=C(8551),d=C(6823),B=C(851),F=TypeError;I.exports=function(I,g){var C=arguments.length<2?B(I):g;if(l(C))return Z(A(C,I));throw new F(d(I)+" is not iterable")}},5966:function(I,g,C){var A=C(9306),l=C(4117);I.exports=function(I,g){var C=I[g];return l(C)?void 0:A(C)}},3789:function(I,g,C){var A=C(9306),l=C(8551),Z=C(9565),d=C(1291),B=C(1767),F="Invalid size",i=RangeError,c=TypeError,G=Math.max,W=function(I,g){this.set=I,this.size=G(g,0),this.has=A(I.has),this.keys=A(I.keys)};W.prototype={getIterator:function(){return B(l(Z(this.keys,this.set)))},includes:function(I){return Z(this.has,this.set,I)}},I.exports=function(I){l(I);var g=+I.size;if(g!==g)throw new c(F);var C=d(g);if(C<0)throw new i(F);return new W(I,C)}},4576:function(I,g,C){var A=function(I){return I&&I.Math===Math&&I};I.exports=A("object"==typeof globalThis&&globalThis)||A("object"==typeof window&&window)||A("object"==typeof self&&self)||A("object"==typeof C.g&&C.g)||A("object"==typeof this&&this)||function(){return this}()||Function("return this")()},9297:function(I,g,C){var A=C(9504),l=C(8981),Z=A({}.hasOwnProperty);I.exports=Object.hasOwn||function(I,g){return Z(l(I),g)}},421:function(I){I.exports={}},397:function(I,g,C){var A=C(7751);I.exports=A("document","documentElement")},5917:function(I,g,C){var A=C(3724),l=C(9039),Z=C(4055);I.exports=!A&&!l((function(){return 7!==Object.defineProperty(Z("div"),"a",{get:function(){return 7}}).a}))},7055:function(I,g,C){var A=C(9504),l=C(9039),Z=C(2195),d=Object,B=A("".split);I.exports=l((function(){return!d("z").propertyIsEnumerable(0)}))?function(I){return"String"===Z(I)?B(I,""):d(I)}:d},3167:function(I,g,C){var A=C(4901),l=C(34),Z=C(2967);I.exports=function(I,g,C){var d,B;return Z&&A(d=g.constructor)&&d!==C&&l(B=d.prototype)&&B!==C.prototype&&Z(I,B),I}},3706:function(I,g,C){var A=C(9504),l=C(4901),Z=C(7629),d=A(Function.toString);l(Z.inspectSource)||(Z.inspectSource=function(I){return d(I)}),I.exports=Z.inspectSource},1181:function(I,g,C){var A,l,Z,d=C(8622),B=C(4576),F=C(34),i=C(6699),c=C(9297),G=C(7629),W=C(6119),V=C(421),R="Object already initialized",U=B.TypeError,b=B.WeakMap,s=function(I){return Z(I)?l(I):A(I,{})},Q=function(I){return function(g){var C;if(!F(g)||(C=l(g)).type!==I)throw new U("Incompatible receiver, "+I+" required");return C}};if(d||G.state){var m=G.state||(G.state=new b);m.get=m.get,m.has=m.has,m.set=m.set,A=function(I,g){if(m.has(I))throw new U(R);return g.facade=I,m.set(I,g),g},l=function(I){return m.get(I)||{}},Z=function(I){return m.has(I)}}else{var N=W("state");V[N]=!0,A=function(I,g){if(c(I,N))throw new U(R);return g.facade=I,i(I,N,g),g},l=function(I){return c(I,N)?I[N]:{}},Z=function(I){return c(I,N)}}I.exports={set:A,get:l,has:Z,enforce:s,getterFor:Q}},4209:function(I,g,C){var A=C(8227),l=C(6269),Z=A("iterator"),d=Array.prototype;I.exports=function(I){return void 0!==I&&(l.Array===I||d[Z]===I)}},4376:function(I,g,C){var A=C(2195);I.exports=Array.isArray||function(I){return"Array"===A(I)}},1108:function(I,g,C){var A=C(6955);I.exports=function(I){var g=A(I);return"BigInt64Array"===g||"BigUint64Array"===g}},4901:function(I){var g="object"==typeof document&&document.all;I.exports="undefined"==typeof g&&void 0!==g?function(I){return"function"==typeof I||I===g}:function(I){return"function"==typeof I}},3517:function(I,g,C){var A=C(9504),l=C(9039),Z=C(4901),d=C(6955),B=C(7751),F=C(3706),i=function(){},c=B("Reflect","construct"),G=/^\s*(?:class|function)\b/,W=A(G.exec),V=!G.test(i),R=function(I){if(!Z(I))return!1;try{return c(i,[],I),!0}catch(g){return!1}},U=function(I){if(!Z(I))return!1;switch(d(I)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return V||!!W(G,F(I))}catch(g){return!0}};U.sham=!0,I.exports=!c||l((function(){var I;return R(R.call)||!R(Object)||!R((function(){I=!0}))||I}))?U:R},2796:function(I,g,C){var A=C(9039),l=C(4901),Z=/#|\.prototype\./,d=function(I,g){var C=F[B(I)];return C===c||C!==i&&(l(g)?A(g):!!g)},B=d.normalize=function(I){return String(I).replace(Z,".").toLowerCase()},F=d.data={},i=d.NATIVE="N",c=d.POLYFILL="P";I.exports=d},4117:function(I){I.exports=function(I){return null===I||void 0===I}},34:function(I,g,C){var A=C(4901);I.exports=function(I){return"object"==typeof I?null!==I:A(I)}},3925:function(I,g,C){var A=C(34);I.exports=function(I){return A(I)||null===I}},6395:function(I){I.exports=!1},757:function(I,g,C){var A=C(7751),l=C(4901),Z=C(1625),d=C(7040),B=Object;I.exports=d?function(I){return"symbol"==typeof I}:function(I){var g=A("Symbol");return l(g)&&Z(g.prototype,B(I))}},507:function(I,g,C){var A=C(9565);I.exports=function(I,g,C){var l,Z,d=C?I:I.iterator,B=I.next;while(!(l=A(B,d)).done)if(Z=g(l.value),void 0!==Z)return Z}},2652:function(I,g,C){var A=C(6080),l=C(9565),Z=C(8551),d=C(6823),B=C(4209),F=C(6198),i=C(1625),c=C(81),G=C(851),W=C(9539),V=TypeError,R=function(I,g){this.stopped=I,this.result=g},U=R.prototype;I.exports=function(I,g,C){var b,s,Q,m,N,h,n,a=C&&C.that,o=!(!C||!C.AS_ENTRIES),w=!(!C||!C.IS_RECORD),Y=!(!C||!C.IS_ITERATOR),S=!(!C||!C.INTERRUPTED),J=A(g,a),M=function(I){return b&&W(b,"normal",I),new R(!0,I)},D=function(I){return o?(Z(I),S?J(I[0],I[1],M):J(I[0],I[1])):S?J(I,M):J(I)};if(w)b=I.iterator;else if(Y)b=I;else{if(s=G(I),!s)throw new V(d(I)+" is not iterable");if(B(s)){for(Q=0,m=F(I);m>Q;Q++)if(N=D(I[Q]),N&&i(U,N))return N;return new R(!1)}b=c(I,s)}h=w?I.next:b.next;while(!(n=l(h,b)).done){try{N=D(n.value)}catch(t){W(b,"throw",t)}if("object"==typeof N&&N&&i(U,N))return N}return new R(!1)}},9539:function(I,g,C){var A=C(9565),l=C(8551),Z=C(5966);I.exports=function(I,g,C){var d,B;l(I);try{if(d=Z(I,"return"),!d){if("throw"===g)throw C;return C}d=A(d,I)}catch(F){B=!0,d=F}if("throw"===g)throw C;if(B)throw d;return l(d),C}},9462:function(I,g,C){var A=C(9565),l=C(2360),Z=C(6699),d=C(6279),B=C(8227),F=C(1181),i=C(5966),c=C(7657).IteratorPrototype,G=C(2529),W=C(9539),V=B("toStringTag"),R="IteratorHelper",U="WrapForValidIterator",b=F.set,s=function(I){var g=F.getterFor(I?U:R);return d(l(c),{next:function(){var C=g(this);if(I)return C.nextHandler();try{var A=C.done?void 0:C.nextHandler();return G(A,C.done)}catch(l){throw C.done=!0,l}},return:function(){var C=g(this),l=C.iterator;if(C.done=!0,I){var Z=i(l,"return");return Z?A(Z,l):G(void 0,!0)}if(C.inner)try{W(C.inner.iterator,"normal")}catch(d){return W(l,"throw",d)}return l&&W(l,"normal"),G(void 0,!0)}})},Q=s(!0),m=s(!1);Z(m,V,"Iterator Helper"),I.exports=function(I,g){var C=function(C,A){A?(A.iterator=C.iterator,A.next=C.next):A=C,A.type=g?U:R,A.nextHandler=I,A.counter=0,A.done=!1,b(this,A)};return C.prototype=g?Q:m,C}},713:function(I,g,C){var A=C(9565),l=C(9306),Z=C(8551),d=C(1767),B=C(9462),F=C(6319),i=B((function(){var I=this.iterator,g=Z(A(this.next,I)),C=this.done=!!g.done;if(!C)return F(I,this.mapper,[g.value,this.counter++],!0)}));I.exports=function(I){return Z(this),l(I),new i(d(this),{mapper:I})}},7657:function(I,g,C){var A,l,Z,d=C(9039),B=C(4901),F=C(34),i=C(2360),c=C(2787),G=C(6840),W=C(8227),V=C(6395),R=W("iterator"),U=!1;[].keys&&(Z=[].keys(),"next"in Z?(l=c(c(Z)),l!==Object.prototype&&(A=l)):U=!0);var b=!F(A)||d((function(){var I={};return A[R].call(I)!==I}));b?A={}:V&&(A=i(A)),B(A[R])||G(A,R,(function(){return this})),I.exports={IteratorPrototype:A,BUGGY_SAFARI_ITERATORS:U}},6269:function(I){I.exports={}},6198:function(I,g,C){var A=C(8014);I.exports=function(I){return A(I.length)}},283:function(I,g,C){var A=C(9504),l=C(9039),Z=C(4901),d=C(9297),B=C(3724),F=C(350).CONFIGURABLE,i=C(3706),c=C(1181),G=c.enforce,W=c.get,V=String,R=Object.defineProperty,U=A("".slice),b=A("".replace),s=A([].join),Q=B&&!l((function(){return 8!==R((function(){}),"length",{value:8}).length})),m=String(String).split("String"),N=I.exports=function(I,g,C){"Symbol("===U(V(g),0,7)&&(g="["+b(V(g),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),C&&C.getter&&(g="get "+g),C&&C.setter&&(g="set "+g),(!d(I,"name")||F&&I.name!==g)&&(B?R(I,"name",{value:g,configurable:!0}):I.name=g),Q&&C&&d(C,"arity")&&I.length!==C.arity&&R(I,"length",{value:C.arity});try{C&&d(C,"constructor")&&C.constructor?B&&R(I,"prototype",{writable:!1}):I.prototype&&(I.prototype=void 0)}catch(l){}var A=G(I);return d(A,"source")||(A.source=s(m,"string"==typeof g?g:"")),I};Function.prototype.toString=N((function(){return Z(this)&&W(this).source||i(this)}),"toString")},2248:function(I,g,C){var A=C(9504),l=Map.prototype;I.exports={Map:Map,set:A(l.set),get:A(l.get),has:A(l.has),remove:A(l["delete"]),proto:l}},741:function(I){var g=Math.ceil,C=Math.floor;I.exports=Math.trunc||function(I){var A=+I;return(A>0?C:g)(A)}},6043:function(I,g,C){var A=C(9306),l=TypeError,Z=function(I){var g,C;this.promise=new I((function(I,A){if(void 0!==g||void 0!==C)throw new l("Bad Promise constructor");g=I,C=A})),this.resolve=A(g),this.reject=A(C)};I.exports.f=function(I){return new Z(I)}},2603:function(I,g,C){var A=C(655);I.exports=function(I,g){return void 0===I?arguments.length<2?"":g:A(I)}},4149:function(I){var g=RangeError;I.exports=function(I){if(I===I)return I;throw new g("NaN is not allowed")}},2360:function(I,g,C){var A,l=C(8551),Z=C(6801),d=C(8727),B=C(421),F=C(397),i=C(4055),c=C(6119),G=">",W="<",V="prototype",R="script",U=c("IE_PROTO"),b=function(){},s=function(I){return W+R+G+I+W+"/"+R+G},Q=function(I){I.write(s("")),I.close();var g=I.parentWindow.Object;return I=null,g},m=function(){var I,g=i("iframe"),C="java"+R+":";return g.style.display="none",F.appendChild(g),g.src=String(C),I=g.contentWindow.document,I.open(),I.write(s("document.F=Object")),I.close(),I.F},N=function(){try{A=new ActiveXObject("htmlfile")}catch(g){}N="undefined"!=typeof document?document.domain&&A?Q(A):m():Q(A);var I=d.length;while(I--)delete N[V][d[I]];return N()};B[U]=!0,I.exports=Object.create||function(I,g){var C;return null!==I?(b[V]=l(I),C=new b,b[V]=null,C[U]=I):C=N(),void 0===g?C:Z.f(C,g)}},6801:function(I,g,C){var A=C(3724),l=C(8686),Z=C(4913),d=C(8551),B=C(5397),F=C(1072);g.f=A&&!l?Object.defineProperties:function(I,g){d(I);var C,A=B(g),l=F(g),i=l.length,c=0;while(i>c)Z.f(I,C=l[c++],A[C]);return I}},4913:function(I,g,C){var A=C(3724),l=C(5917),Z=C(8686),d=C(8551),B=C(6969),F=TypeError,i=Object.defineProperty,c=Object.getOwnPropertyDescriptor,G="enumerable",W="configurable",V="writable";g.f=A?Z?function(I,g,C){if(d(I),g=B(g),d(C),"function"===typeof I&&"prototype"===g&&"value"in C&&V in C&&!C[V]){var A=c(I,g);A&&A[V]&&(I[g]=C.value,C={configurable:W in C?C[W]:A[W],enumerable:G in C?C[G]:A[G],writable:!1})}return i(I,g,C)}:i:function(I,g,C){if(d(I),g=B(g),d(C),l)try{return i(I,g,C)}catch(A){}if("get"in C||"set"in C)throw new F("Accessors not supported");return"value"in C&&(I[g]=C.value),I}},7347:function(I,g,C){var A=C(3724),l=C(9565),Z=C(8773),d=C(6980),B=C(5397),F=C(6969),i=C(9297),c=C(5917),G=Object.getOwnPropertyDescriptor;g.f=A?G:function(I,g){if(I=B(I),g=F(g),c)try{return G(I,g)}catch(C){}if(i(I,g))return d(!l(Z.f,I,g),I[g])}},8480:function(I,g,C){var A=C(1828),l=C(8727),Z=l.concat("length","prototype");g.f=Object.getOwnPropertyNames||function(I){return A(I,Z)}},3717:function(I,g){g.f=Object.getOwnPropertySymbols},2787:function(I,g,C){var A=C(9297),l=C(4901),Z=C(8981),d=C(6119),B=C(2211),F=d("IE_PROTO"),i=Object,c=i.prototype;I.exports=B?i.getPrototypeOf:function(I){var g=Z(I);if(A(g,F))return g[F];var C=g.constructor;return l(C)&&g instanceof C?C.prototype:g instanceof i?c:null}},1625:function(I,g,C){var A=C(9504);I.exports=A({}.isPrototypeOf)},1828:function(I,g,C){var A=C(9504),l=C(9297),Z=C(5397),d=C(9617).indexOf,B=C(421),F=A([].push);I.exports=function(I,g){var C,A=Z(I),i=0,c=[];for(C in A)!l(B,C)&&l(A,C)&&F(c,C);while(g.length>i)l(A,C=g[i++])&&(~d(c,C)||F(c,C));return c}},1072:function(I,g,C){var A=C(1828),l=C(8727);I.exports=Object.keys||function(I){return A(I,l)}},8773:function(I,g){var C={}.propertyIsEnumerable,A=Object.getOwnPropertyDescriptor,l=A&&!C.call({1:2},1);g.f=l?function(I){var g=A(this,I);return!!g&&g.enumerable}:C},2967:function(I,g,C){var A=C(6706),l=C(34),Z=C(7750),d=C(3506);I.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var I,g=!1,C={};try{I=A(Object.prototype,"__proto__","set"),I(C,[]),g=C instanceof Array}catch(B){}return function(C,A){return Z(C),d(A),l(C)?(g?I(C,A):C.__proto__=A,C):C}}():void 0)},4270:function(I,g,C){var A=C(9565),l=C(4901),Z=C(34),d=TypeError;I.exports=function(I,g){var C,B;if("string"===g&&l(C=I.toString)&&!Z(B=A(C,I)))return B;if(l(C=I.valueOf)&&!Z(B=A(C,I)))return B;if("string"!==g&&l(C=I.toString)&&!Z(B=A(C,I)))return B;throw new d("Can't convert object to primitive value")}},5031:function(I,g,C){var A=C(7751),l=C(9504),Z=C(8480),d=C(3717),B=C(8551),F=l([].concat);I.exports=A("Reflect","ownKeys")||function(I){var g=Z.f(B(I)),C=d.f;return C?F(g,C(I)):g}},1103:function(I){I.exports=function(I){try{return{error:!1,value:I()}}catch(g){return{error:!0,value:g}}}},7979:function(I,g,C){var A=C(8551);I.exports=function(){var I=A(this),g="";return I.hasIndices&&(g+="d"),I.global&&(g+="g"),I.ignoreCase&&(g+="i"),I.multiline&&(g+="m"),I.dotAll&&(g+="s"),I.unicode&&(g+="u"),I.unicodeSets&&(g+="v"),I.sticky&&(g+="y"),g}},1034:function(I,g,C){var A=C(9565),l=C(9297),Z=C(1625),d=C(7979),B=RegExp.prototype;I.exports=function(I){var g=I.flags;return void 0!==g||"flags"in B||l(I,"flags")||!Z(B,I)?g:A(d,I)}},7750:function(I,g,C){var A=C(4117),l=TypeError;I.exports=function(I){if(A(I))throw new l("Can't call method on "+I);return I}},9286:function(I,g,C){var A=C(4402),l=C(8469),Z=A.Set,d=A.add;I.exports=function(I){var g=new Z;return l(I,(function(I){d(g,I)})),g}},3440:function(I,g,C){var A=C(7080),l=C(4402),Z=C(9286),d=C(5170),B=C(3789),F=C(8469),i=C(507),c=l.has,G=l.remove;I.exports=function(I){var g=A(this),C=B(I),l=Z(g);return d(g)<=C.size?F(g,(function(I){C.includes(I)&&G(l,I)})):i(C.getIterator(),(function(I){c(g,I)&&G(l,I)})),l}},4402:function(I,g,C){var A=C(9504),l=Set.prototype;I.exports={Set:Set,add:A(l.add),has:A(l.has),remove:A(l["delete"]),proto:l}},8750:function(I,g,C){var A=C(7080),l=C(4402),Z=C(5170),d=C(3789),B=C(8469),F=C(507),i=l.Set,c=l.add,G=l.has;I.exports=function(I){var g=A(this),C=d(I),l=new i;return Z(g)>C.size?F(C.getIterator(),(function(I){G(g,I)&&c(l,I)})):B(g,(function(I){C.includes(I)&&c(l,I)})),l}},4449:function(I,g,C){var A=C(7080),l=C(4402).has,Z=C(5170),d=C(3789),B=C(8469),F=C(507),i=C(9539);I.exports=function(I){var g=A(this),C=d(I);if(Z(g)<=C.size)return!1!==B(g,(function(I){if(C.includes(I))return!1}),!0);var c=C.getIterator();return!1!==F(c,(function(I){if(l(g,I))return i(c,"normal",!1)}))}},3838:function(I,g,C){var A=C(7080),l=C(5170),Z=C(8469),d=C(3789);I.exports=function(I){var g=A(this),C=d(I);return!(l(g)>C.size)&&!1!==Z(g,(function(I){if(!C.includes(I))return!1}),!0)}},8527:function(I,g,C){var A=C(7080),l=C(4402).has,Z=C(5170),d=C(3789),B=C(507),F=C(9539);I.exports=function(I){var g=A(this),C=d(I);if(Z(g)<C.size)return!1;var i=C.getIterator();return!1!==B(i,(function(I){if(!l(g,I))return F(i,"normal",!1)}))}},8469:function(I,g,C){var A=C(9504),l=C(507),Z=C(4402),d=Z.Set,B=Z.proto,F=A(B.forEach),i=A(B.keys),c=i(new d).next;I.exports=function(I,g,C){return C?l({iterator:i(I),next:c},g):F(I,g)}},4916:function(I,g,C){var A=C(7751),l=function(I){return{size:I,has:function(){return!1},keys:function(){return{next:function(){return{done:!0}}}}}};I.exports=function(I){var g=A("Set");try{(new g)[I](l(0));try{return(new g)[I](l(-1)),!1}catch(C){return!0}}catch(Z){return!1}}},5170:function(I,g,C){var A=C(6706),l=C(4402);I.exports=A(l.proto,"size","get")||function(I){return I.size}},3650:function(I,g,C){var A=C(7080),l=C(4402),Z=C(9286),d=C(3789),B=C(507),F=l.add,i=l.has,c=l.remove;I.exports=function(I){var g=A(this),C=d(I).getIterator(),l=Z(g);return B(C,(function(I){i(g,I)?c(l,I):F(l,I)})),l}},4204:function(I,g,C){var A=C(7080),l=C(4402).add,Z=C(9286),d=C(3789),B=C(507);I.exports=function(I){var g=A(this),C=d(I).getIterator(),F=Z(g);return B(C,(function(I){l(F,I)})),F}},6119:function(I,g,C){var A=C(5745),l=C(3392),Z=A("keys");I.exports=function(I){return Z[I]||(Z[I]=l(I))}},7629:function(I,g,C){var A=C(6395),l=C(4576),Z=C(9433),d="__core-js_shared__",B=I.exports=l[d]||Z(d,{});(B.versions||(B.versions=[])).push({version:"3.39.0",mode:A?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.39.0/LICENSE",source:"https://github.com/zloirock/core-js"})},5745:function(I,g,C){var A=C(7629);I.exports=function(I,g){return A[I]||(A[I]=g||{})}},1548:function(I,g,C){var A=C(4576),l=C(9039),Z=C(9519),d=C(4215),B=A.structuredClone;I.exports=!!B&&!l((function(){if("DENO"===d&&Z>92||"NODE"===d&&Z>94||"BROWSER"===d&&Z>97)return!1;var I=new ArrayBuffer(8),g=B(I,{transfer:[I]});return 0!==I.byteLength||8!==g.byteLength}))},4495:function(I,g,C){var A=C(9519),l=C(9039),Z=C(4576),d=Z.String;I.exports=!!Object.getOwnPropertySymbols&&!l((function(){var I=Symbol("symbol detection");return!d(I)||!(Object(I)instanceof Symbol)||!Symbol.sham&&A&&A<41}))},5610:function(I,g,C){var A=C(1291),l=Math.max,Z=Math.min;I.exports=function(I,g){var C=A(I);return C<0?l(C+g,0):Z(C,g)}},5854:function(I,g,C){var A=C(2777),l=TypeError;I.exports=function(I){var g=A(I,"number");if("number"==typeof g)throw new l("Can't convert number to bigint");return BigInt(g)}},7696:function(I,g,C){var A=C(1291),l=C(8014),Z=RangeError;I.exports=function(I){if(void 0===I)return 0;var g=A(I),C=l(g);if(g!==C)throw new Z("Wrong length or index");return C}},5397:function(I,g,C){var A=C(7055),l=C(7750);I.exports=function(I){return A(l(I))}},1291:function(I,g,C){var A=C(741);I.exports=function(I){var g=+I;return g!==g||0===g?0:A(g)}},8014:function(I,g,C){var A=C(1291),l=Math.min;I.exports=function(I){var g=A(I);return g>0?l(g,9007199254740991):0}},8981:function(I,g,C){var A=C(7750),l=Object;I.exports=function(I){return l(A(I))}},9590:function(I,g,C){var A=C(1291),l=RangeError;I.exports=function(I){var g=A(I);if(g<0)throw new l("The argument can't be less than 0");return g}},2777:function(I,g,C){var A=C(9565),l=C(34),Z=C(757),d=C(5966),B=C(4270),F=C(8227),i=TypeError,c=F("toPrimitive");I.exports=function(I,g){if(!l(I)||Z(I))return I;var C,F=d(I,c);if(F){if(void 0===g&&(g="default"),C=A(F,I,g),!l(C)||Z(C))return C;throw new i("Can't convert object to primitive value")}return void 0===g&&(g="number"),B(I,g)}},6969:function(I,g,C){var A=C(2777),l=C(757);I.exports=function(I){var g=A(I,"string");return l(g)?g:g+""}},2140:function(I,g,C){var A=C(8227),l=A("toStringTag"),Z={};Z[l]="z",I.exports="[object z]"===String(Z)},655:function(I,g,C){var A=C(6955),l=String;I.exports=function(I){if("Symbol"===A(I))throw new TypeError("Cannot convert a Symbol value to a string");return l(I)}},6823:function(I){var g=String;I.exports=function(I){try{return g(I)}catch(C){return"Object"}}},3392:function(I,g,C){var A=C(9504),l=0,Z=Math.random(),d=A(1..toString);I.exports=function(I){return"Symbol("+(void 0===I?"":I)+")_"+d(++l+Z,36)}},7040:function(I,g,C){var A=C(4495);I.exports=A&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},8686:function(I,g,C){var A=C(3724),l=C(9039);I.exports=A&&l((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},2812:function(I){var g=TypeError;I.exports=function(I,C){if(I<C)throw new g("Not enough arguments");return I}},8622:function(I,g,C){var A=C(4576),l=C(4901),Z=A.WeakMap;I.exports=l(Z)&&/native code/.test(String(Z))},8227:function(I,g,C){var A=C(4576),l=C(5745),Z=C(9297),d=C(3392),B=C(4495),F=C(7040),i=A.Symbol,c=l("wks"),G=F?i["for"]||i:i&&i.withoutSetter||d;I.exports=function(I){return Z(c,I)||(c[I]=B&&Z(i,I)?i[I]:G("Symbol."+I)),c[I]}},6573:function(I,g,C){var A=C(3724),l=C(2106),Z=C(3238),d=ArrayBuffer.prototype;A&&!("detached"in d)&&l(d,"detached",{configurable:!0,get:function(){return Z(this)}})},7936:function(I,g,C){var A=C(6518),l=C(5636);l&&A({target:"ArrayBuffer",proto:!0},{transferToFixedLength:function(){return l(this,arguments.length?arguments[0]:void 0,!1)}})},8100:function(I,g,C){var A=C(6518),l=C(5636);l&&A({target:"ArrayBuffer",proto:!0},{transfer:function(){return l(this,arguments.length?arguments[0]:void 0,!0)}})},4114:function(I,g,C){var A=C(6518),l=C(8981),Z=C(6198),d=C(4527),B=C(6837),F=C(9039),i=F((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(I){return I instanceof TypeError}},G=i||!c();A({target:"Array",proto:!0,arity:1,forced:G},{push:function(I){var g=l(this),C=Z(g),A=arguments.length;B(C+A);for(var F=0;F<A;F++)g[C]=arguments[F],C++;return d(g,C),C}})},9678:function(I,g,C){var A=C(6518),l=C(7628),Z=C(5397),d=C(6469),B=Array;A({target:"Array",proto:!0},{toReversed:function(){return l(Z(this),B)}}),d("toReversed")},7145:function(I,g,C){var A=C(6518),l=C(9504),Z=C(9306),d=C(5397),B=C(5370),F=C(4124),i=C(6469),c=Array,G=l(F("Array","sort"));A({target:"Array",proto:!0},{toSorted:function(I){void 0!==I&&Z(I);var g=d(this),C=B(c,g);return G(C,I)}}),i("toSorted")},1658:function(I,g,C){var A=C(6518),l=C(6469),Z=C(6837),d=C(6198),B=C(5610),F=C(5397),i=C(1291),c=Array,G=Math.max,W=Math.min;A({target:"Array",proto:!0},{toSpliced:function(I,g){var C,A,l,V,R=F(this),U=d(R),b=B(I,U),s=arguments.length,Q=0;for(0===s?C=A=0:1===s?(C=0,A=U-b):(C=s-2,A=W(G(i(g),0),U-b)),l=Z(U+C-A),V=c(l);Q<b;Q++)V[Q]=R[Q];for(;Q<b+C;Q++)V[Q]=arguments[Q-b+2];for(;Q<l;Q++)V[Q]=R[Q+A-C];return V}}),l("toSpliced")},8111:function(I,g,C){var A=C(6518),l=C(4576),Z=C(679),d=C(8551),B=C(4901),F=C(2787),i=C(2106),c=C(4659),G=C(9039),W=C(9297),V=C(8227),R=C(7657).IteratorPrototype,U=C(3724),b=C(6395),s="constructor",Q="Iterator",m=V("toStringTag"),N=TypeError,h=l[Q],n=b||!B(h)||h.prototype!==R||!G((function(){h({})})),a=function(){if(Z(this,R),F(this)===R)throw new N("Abstract class Iterator not directly constructable")},o=function(I,g){U?i(R,I,{configurable:!0,get:function(){return g},set:function(g){if(d(this),this===R)throw new N("You can't redefine this property");W(this,I)?this[I]=g:c(this,I,g)}}):R[I]=g};W(R,m)||o(m,Q),!n&&W(R,s)&&R[s]!==Object||o(s,a),a.prototype=R,A({global:!0,constructor:!0,forced:n},{Iterator:a})},9314:function(I,g,C){var A=C(6518),l=C(9565),Z=C(8551),d=C(1767),B=C(4149),F=C(9590),i=C(9462),c=C(6395),G=i((function(){var I,g,C=this.iterator,A=this.next;while(this.remaining)if(this.remaining--,I=Z(l(A,C)),g=this.done=!!I.done,g)return;if(I=Z(l(A,C)),g=this.done=!!I.done,!g)return I.value}));A({target:"Iterator",proto:!0,real:!0,forced:c},{drop:function(I){Z(this);var g=F(B(+I));return new G(d(this),{remaining:g})}})},1148:function(I,g,C){var A=C(6518),l=C(2652),Z=C(9306),d=C(8551),B=C(1767);A({target:"Iterator",proto:!0,real:!0},{every:function(I){d(this),Z(I);var g=B(this),C=0;return!l(g,(function(g,A){if(!I(g,C++))return A()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},2489:function(I,g,C){var A=C(6518),l=C(9565),Z=C(9306),d=C(8551),B=C(1767),F=C(9462),i=C(6319),c=C(6395),G=F((function(){var I,g,C,A=this.iterator,Z=this.predicate,B=this.next;while(1){if(I=d(l(B,A)),g=this.done=!!I.done,g)return;if(C=I.value,i(A,Z,[C,this.counter++],!0))return C}}));A({target:"Iterator",proto:!0,real:!0,forced:c},{filter:function(I){return d(this),Z(I),new G(B(this),{predicate:I})}})},531:function(I,g,C){var A=C(6518),l=C(9565),Z=C(9306),d=C(8551),B=C(1767),F=C(8646),i=C(9462),c=C(9539),G=C(6395),W=i((function(){var I,g,C=this.iterator,A=this.mapper;while(1){if(g=this.inner)try{if(I=d(l(g.next,g.iterator)),!I.done)return I.value;this.inner=null}catch(Z){c(C,"throw",Z)}if(I=d(l(this.next,C)),this.done=!!I.done)return;try{this.inner=F(A(I.value,this.counter++),!1)}catch(Z){c(C,"throw",Z)}}}));A({target:"Iterator",proto:!0,real:!0,forced:G},{flatMap:function(I){return d(this),Z(I),new W(B(this),{mapper:I,inner:null})}})},7588:function(I,g,C){var A=C(6518),l=C(2652),Z=C(9306),d=C(8551),B=C(1767);A({target:"Iterator",proto:!0,real:!0},{forEach:function(I){d(this),Z(I);var g=B(this),C=0;l(g,(function(g){I(g,C++)}),{IS_RECORD:!0})}})},1701:function(I,g,C){var A=C(6518),l=C(713),Z=C(6395);A({target:"Iterator",proto:!0,real:!0,forced:Z},{map:l})},8237:function(I,g,C){var A=C(6518),l=C(2652),Z=C(9306),d=C(8551),B=C(1767),F=TypeError;A({target:"Iterator",proto:!0,real:!0},{reduce:function(I){d(this),Z(I);var g=B(this),C=arguments.length<2,A=C?void 0:arguments[1],i=0;if(l(g,(function(g){C?(C=!1,A=g):A=I(A,g,i),i++}),{IS_RECORD:!0}),C)throw new F("Reduce of empty iterator with no initial value");return A}})},3579:function(I,g,C){var A=C(6518),l=C(2652),Z=C(9306),d=C(8551),B=C(1767);A({target:"Iterator",proto:!0,real:!0},{some:function(I){d(this),Z(I);var g=B(this),C=0;return l(g,(function(g,A){if(I(g,C++))return A()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},1689:function(I,g,C){var A=C(6518),l=C(4576),Z=C(8745),d=C(7680),B=C(6043),F=C(9306),i=C(1103),c=l.Promise,G=!1,W=!c||!c["try"]||i((function(){c["try"]((function(I){G=8===I}),8)})).error||!G;A({target:"Promise",stat:!0,forced:W},{try:function(I){var g=arguments.length>1?d(arguments,1):[],C=B.f(this),A=i((function(){return Z(F(I),void 0,g)}));return(A.error?C.reject:C.resolve)(A.value),C.promise}})},4628:function(I,g,C){var A=C(6518),l=C(6043);A({target:"Promise",stat:!0},{withResolvers:function(){var I=l.f(this);return{promise:I.promise,resolve:I.resolve,reject:I.reject}}})},9479:function(I,g,C){var A=C(4576),l=C(3724),Z=C(2106),d=C(7979),B=C(9039),F=A.RegExp,i=F.prototype,c=l&&B((function(){var I=!0;try{F(".","d")}catch(c){I=!1}var g={},C="",A=I?"dgimsy":"gimsy",l=function(I,A){Object.defineProperty(g,I,{get:function(){return C+=A,!0}})},Z={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var d in I&&(Z.hasIndices="d"),Z)l(d,Z[d]);var B=Object.getOwnPropertyDescriptor(i,"flags").get.call(g);return B!==A||C!==A}));c&&Z(i,"flags",{configurable:!0,get:d})},7642:function(I,g,C){var A=C(6518),l=C(3440),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("difference")},{difference:l})},8004:function(I,g,C){var A=C(6518),l=C(9039),Z=C(8750),d=C(4916),B=!d("intersection")||l((function(){return"3,2"!==String(Array.from(new Set([1,2,3]).intersection(new Set([3,2]))))}));A({target:"Set",proto:!0,real:!0,forced:B},{intersection:Z})},3853:function(I,g,C){var A=C(6518),l=C(4449),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("isDisjointFrom")},{isDisjointFrom:l})},5876:function(I,g,C){var A=C(6518),l=C(3838),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("isSubsetOf")},{isSubsetOf:l})},2475:function(I,g,C){var A=C(6518),l=C(8527),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("isSupersetOf")},{isSupersetOf:l})},5024:function(I,g,C){var A=C(6518),l=C(3650),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("symmetricDifference")},{symmetricDifference:l})},1698:function(I,g,C){var A=C(6518),l=C(4204),Z=C(4916);A({target:"Set",proto:!0,real:!0,forced:!Z("union")},{union:l})},7467:function(I,g,C){var A=C(7628),l=C(4644),Z=l.aTypedArray,d=l.exportTypedArrayMethod,B=l.getTypedArrayConstructor;d("toReversed",(function(){return A(Z(this),B(this))}))},4732:function(I,g,C){var A=C(4644),l=C(9504),Z=C(9306),d=C(5370),B=A.aTypedArray,F=A.getTypedArrayConstructor,i=A.exportTypedArrayMethod,c=l(A.TypedArrayPrototype.sort);i("toSorted",(function(I){void 0!==I&&Z(I);var g=B(this),C=d(F(g),g);return c(C,I)}))},9577:function(I,g,C){var A=C(9928),l=C(4644),Z=C(1108),d=C(1291),B=C(5854),F=l.aTypedArray,i=l.getTypedArrayConstructor,c=l.exportTypedArrayMethod,G=!!function(){try{new Int8Array(1)["with"](2,{valueOf:function(){throw 8}})}catch(I){return 8===I}}();c("with",{with:function(I,g){var C=F(this),l=d(I),c=Z(C)?B(g):+g;return A(C,i(C),l,c)}}["with"],!G)},8992:function(I,g,C){C(8111)},4743:function(I,g,C){C(9314)},3215:function(I,g,C){C(1148)},4520:function(I,g,C){C(2489)},670:function(I,g,C){C(531)},3949:function(I,g,C){C(7588)},1454:function(I,g,C){C(1701)},8872:function(I,g,C){C(8237)},7550:function(I,g,C){C(3579)},5247:function(I,g,C){C(1689)},4979:function(I,g,C){var A=C(6518),l=C(4576),Z=C(7751),d=C(6980),B=C(4913).f,F=C(9297),i=C(679),c=C(3167),G=C(2603),W=C(5002),V=C(8574),R=C(3724),U=C(6395),b="DOMException",s=Z("Error"),Q=Z(b),m=function(){i(this,N);var I=arguments.length,g=G(I<1?void 0:arguments[0]),C=G(I<2?void 0:arguments[1],"Error"),A=new Q(g,C),l=new s(g);return l.name=b,B(A,"stack",d(1,V(l.stack,1))),c(A,this,m),A},N=m.prototype=Q.prototype,h="stack"in new s(b),n="stack"in new Q(1,2),a=Q&&R&&Object.getOwnPropertyDescriptor(l,b),o=!!a&&!(a.writable&&a.configurable),w=h&&!o&&!n;A({global:!0,constructor:!0,forced:U||w},{DOMException:w?m:Q});var Y=Z(b),S=Y.prototype;if(S.constructor!==Y)for(var J in U||B(S,"constructor",d(1,Y)),W)if(F(W,J)){var M=W[J],D=M.s;F(Y,D)||B(Y,D,d(6,M.c))}},1678:function(I,g,C){var A=C(6395),l=C(6518),Z=C(4576),d=C(7751),B=C(9504),F=C(9039),i=C(3392),c=C(4901),G=C(3517),W=C(4117),V=C(34),R=C(757),U=C(2652),b=C(8551),s=C(6955),Q=C(9297),m=C(4659),N=C(6699),h=C(6198),n=C(2812),a=C(1034),o=C(2248),w=C(4402),Y=C(8469),S=C(4483),J=C(6249),M=C(1548),D=Z.Object,t=Z.Array,X=Z.Date,H=Z.Error,e=Z.TypeError,y=Z.PerformanceMark,u=d("DOMException"),p=o.Map,k=o.has,K=o.get,z=o.set,T=w.Set,L=w.add,E=w.has,j=d("Object","keys"),x=B([].push),O=B((!0).valueOf),r=B(1..valueOf),v=B("".valueOf),P=B(X.prototype.getTime),f=i("structuredClone"),_="DataCloneError",q="Transferring",$=function(I){return!F((function(){var g=new Z.Set([7]),C=I(g),A=I(D(7));return C===g||!C.has(7)||!V(A)||7!==+A}))&&I},II=function(I,g){return!F((function(){var C=new g,A=I({a:C,b:C});return!(A&&A.a===A.b&&A.a instanceof g&&A.a.stack===C.stack)}))},gI=function(I){return!F((function(){var g=I(new Z.AggregateError([1],f,{cause:3}));return"AggregateError"!==g.name||1!==g.errors[0]||g.message!==f||3!==g.cause}))},CI=Z.structuredClone,AI=A||!II(CI,H)||!II(CI,u)||!gI(CI),lI=!CI&&$((function(I){return new y(f,{detail:I}).detail})),ZI=$(CI)||lI,dI=function(I){throw new u("Uncloneable type: "+I,_)},BI=function(I,g){throw new u((g||"Cloning")+" of "+I+" cannot be properly polyfilled in this engine",_)},FI=function(I,g){return ZI||BI(g),ZI(I)},iI=function(){var I;try{I=new Z.DataTransfer}catch(g){try{I=new Z.ClipboardEvent("").clipboardData}catch(C){}}return I&&I.items&&I.files?I:null},cI=function(I,g,C){if(k(g,I))return K(g,I);var A,l,d,B,F,i,G=C||s(I);if("SharedArrayBuffer"===G)A=ZI?ZI(I):I;else{var W=Z.DataView;W||c(I.slice)||BI("ArrayBuffer");try{if(c(I.slice)&&!I.resizable)A=I.slice(0);else{l=I.byteLength,d="maxByteLength"in I?{maxByteLength:I.maxByteLength}:void 0,A=new ArrayBuffer(l,d),B=new W(I),F=new W(A);for(i=0;i<l;i++)F.setUint8(i,B.getUint8(i))}}catch(V){throw new u("ArrayBuffer is detached",_)}}return z(g,I,A),A},GI=function(I,g,C,A,l){var d=Z[g];return V(d)||BI(g),new d(cI(I.buffer,l),C,A)},WI=function(I,g){if(R(I)&&dI("Symbol"),!V(I))return I;if(g){if(k(g,I))return K(g,I)}else g=new p;var C,A,l,B,F,i,G,W,U=s(I);switch(U){case"Array":l=t(h(I));break;case"Object":l={};break;case"Map":l=new p;break;case"Set":l=new T;break;case"RegExp":l=new RegExp(I.source,a(I));break;case"Error":switch(A=I.name,A){case"AggregateError":l=new(d(A))([]);break;case"EvalError":case"RangeError":case"ReferenceError":case"SuppressedError":case"SyntaxError":case"TypeError":case"URIError":l=new(d(A));break;case"CompileError":case"LinkError":case"RuntimeError":l=new(d("WebAssembly",A));break;default:l=new H}break;case"DOMException":l=new u(I.message,I.name);break;case"ArrayBuffer":case"SharedArrayBuffer":l=cI(I,g,U);break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float16Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":i="DataView"===U?I.byteLength:I.length,l=GI(I,U,I.byteOffset,i,g);break;case"DOMQuad":try{l=new DOMQuad(WI(I.p1,g),WI(I.p2,g),WI(I.p3,g),WI(I.p4,g))}catch(b){l=FI(I,U)}break;case"File":if(ZI)try{l=ZI(I),s(l)!==U&&(l=void 0)}catch(b){}if(!l)try{l=new File([I],I.name,I)}catch(b){}l||BI(U);break;case"FileList":if(B=iI(),B){for(F=0,i=h(I);F<i;F++)B.items.add(WI(I[F],g));l=B.files}else l=FI(I,U);break;case"ImageData":try{l=new ImageData(WI(I.data,g),I.width,I.height,{colorSpace:I.colorSpace})}catch(b){l=FI(I,U)}break;default:if(ZI)l=ZI(I);else switch(U){case"BigInt":l=D(I.valueOf());break;case"Boolean":l=D(O(I));break;case"Number":l=D(r(I));break;case"String":l=D(v(I));break;case"Date":l=new X(P(I));break;case"Blob":try{l=I.slice(0,I.size,I.type)}catch(b){BI(U)}break;case"DOMPoint":case"DOMPointReadOnly":C=Z[U];try{l=C.fromPoint?C.fromPoint(I):new C(I.x,I.y,I.z,I.w)}catch(b){BI(U)}break;case"DOMRect":case"DOMRectReadOnly":C=Z[U];try{l=C.fromRect?C.fromRect(I):new C(I.x,I.y,I.width,I.height)}catch(b){BI(U)}break;case"DOMMatrix":case"DOMMatrixReadOnly":C=Z[U];try{l=C.fromMatrix?C.fromMatrix(I):new C(I)}catch(b){BI(U)}break;case"AudioData":case"VideoFrame":c(I.clone)||BI(U);try{l=I.clone()}catch(b){dI(U)}break;case"CropTarget":case"CryptoKey":case"FileSystemDirectoryHandle":case"FileSystemFileHandle":case"FileSystemHandle":case"GPUCompilationInfo":case"GPUCompilationMessage":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":BI(U);default:dI(U)}}switch(z(g,I,l),U){case"Array":case"Object":for(G=j(I),F=0,i=h(G);F<i;F++)W=G[F],m(l,W,WI(I[W],g));break;case"Map":I.forEach((function(I,C){z(l,WI(C,g),WI(I,g))}));break;case"Set":I.forEach((function(I){L(l,WI(I,g))}));break;case"Error":N(l,"message",WI(I.message,g)),Q(I,"cause")&&N(l,"cause",WI(I.cause,g)),"AggregateError"===A?l.errors=WI(I.errors,g):"SuppressedError"===A&&(l.error=WI(I.error,g),l.suppressed=WI(I.suppressed,g));case"DOMException":J&&N(l,"stack",WI(I.stack,g))}return l},VI=function(I,g){if(!V(I))throw new e("Transfer option cannot be converted to a sequence");var C=[];U(I,(function(I){x(C,b(I))}));var A,l,d,B,F,i,W=0,R=h(C),Q=new T;while(W<R){if(A=C[W++],l=s(A),"ArrayBuffer"===l?E(Q,A):k(g,A))throw new u("Duplicate transferable",_);if("ArrayBuffer"!==l){if(M)B=CI(A,{transfer:[A]});else switch(l){case"ImageBitmap":d=Z.OffscreenCanvas,G(d)||BI(l,q);try{F=new d(A.width,A.height),i=F.getContext("bitmaprenderer"),i.transferFromImageBitmap(A),B=F.transferToImageBitmap()}catch(m){}break;case"AudioData":case"VideoFrame":c(A.clone)&&c(A.close)||BI(l,q);try{B=A.clone(),A.close()}catch(m){}break;case"MediaSourceHandle":case"MessagePort":case"MIDIAccess":case"OffscreenCanvas":case"ReadableStream":case"RTCDataChannel":case"TransformStream":case"WebTransportReceiveStream":case"WebTransportSendStream":case"WritableStream":BI(l,q)}if(void 0===B)throw new u("This object cannot be transferred: "+l,_);z(g,A,B)}else L(Q,A)}return Q},RI=function(I){Y(I,(function(I){M?ZI(I,{transfer:[I]}):c(I.transfer)?I.transfer():S?S(I):BI("ArrayBuffer",q)}))};l({global:!0,enumerable:!0,sham:!M,forced:AI},{structuredClone:function(I){var g,C,A=n(arguments.length,1)>1&&!W(arguments[1])?b(arguments[1]):void 0,l=A?A.transfer:void 0;void 0!==l&&(g=new p,C=VI(l,g));var Z=WI(I,g);return C&&RI(C),Z}})},4603:function(I,g,C){var A=C(6840),l=C(9504),Z=C(655),d=C(2812),B=URLSearchParams,F=B.prototype,i=l(F.append),c=l(F["delete"]),G=l(F.forEach),W=l([].push),V=new B("a=1&a=2&b=3");V["delete"]("a",1),V["delete"]("b",void 0),V+""!=="a=2"&&A(F,"delete",(function(I){var g=arguments.length,C=g<2?void 0:arguments[1];if(g&&void 0===C)return c(this,I);var A=[];G(this,(function(I,g){W(A,{key:g,value:I})})),d(g,1);var l,B=Z(I),F=Z(C),V=0,R=0,U=!1,b=A.length;while(V<b)l=A[V++],U||l.key===B?(U=!0,c(this,l.key)):R++;while(R<b)l=A[R++],l.key===B&&l.value===F||i(this,l.key,l.value)}),{enumerable:!0,unsafe:!0})},7566:function(I,g,C){var A=C(6840),l=C(9504),Z=C(655),d=C(2812),B=URLSearchParams,F=B.prototype,i=l(F.getAll),c=l(F.has),G=new B("a=1");!G.has("a",2)&&G.has("a",void 0)||A(F,"has",(function(I){var g=arguments.length,C=g<2?void 0:arguments[1];if(g&&void 0===C)return c(this,I);var A=i(this,I);d(g,1);var l=Z(C),B=0;while(B<A.length)if(A[B++]===l)return!0;return!1}),{enumerable:!0,unsafe:!0})},8721:function(I,g,C){var A=C(3724),l=C(9504),Z=C(2106),d=URLSearchParams.prototype,B=l(d.forEach);A&&!("size"in d)&&Z(d,"size",{get:function(){var I=0;return B(this,(function(){I++})),I},configurable:!0,enumerable:!0})},1284:function(I,g,C){C.d(g,{A:function(){return VQ}});C(4114),C(6573),C(8100),C(7936),C(4628),C(7642),C(8004),C(3853),C(5876),C(2475),C(5024),C(1698),C(7467),C(4732),C(9577),C(8992),C(4743),C(3215),C(4520),C(670),C(1454),C(7550),C(5247),C(4979),C(1678),C(4603),C(7566),C(8721);var A=C(6768),l=C(144),Z=C(4232),d=C(5130),B=Object.defineProperty,F=I=>{throw TypeError(I)},i=(I,g,C)=>g in I?B(I,g,{enumerable:!0,configurable:!0,writable:!0,value:C}):I[g]=C,c=(I,g,C)=>i(I,"symbol"!=typeof g?g+"":g,C),G=(I,g,C)=>g.has(I)||F("Cannot "+C),W=(I,g,C)=>(G(I,g,"read from private field"),C?C.call(I):g.get(I)),V=(I,g,C)=>g.has(I)?F("Cannot add the same private member more than once"):g instanceof WeakSet?g.add(I):g.set(I,C),R=(I,g,C,A)=>(G(I,g,"write to private field"),A?A.call(I,C):g.set(I,C),C),U=(I,g,C)=>(G(I,g,"access private method"),C),b=(I,g,C,A)=>({set _(A){R(I,g,A,C)},get _(){return W(I,g,A)}}),s="object"==typeof global&&global&&global.Object===Object&&global,Q="object"==typeof self&&self&&self.Object===Object&&self,m=s||Q||Function("return this")(),N=m.Symbol,h=Object.prototype,n=h.hasOwnProperty,a=h.toString,o=N?N.toStringTag:void 0;function w(I){var g=n.call(I,o),C=I[o];try{I[o]=void 0;var A=!0}catch{}var l=a.call(I);return A&&(g?I[o]=C:delete I[o]),l}var Y=Object.prototype,S=Y.toString;function J(I){return S.call(I)}var M="[object Null]",D="[object Undefined]",t=N?N.toStringTag:void 0;function X(I){return null==I?void 0===I?D:M:t&&t in Object(I)?w(I):J(I)}function H(I){return null!=I&&"object"==typeof I}var e="[object Symbol]";function y(I){return"symbol"==typeof I||H(I)&&X(I)==e}function u(I,g){for(var C=-1,A=null==I?0:I.length,l=Array(A);++C<A;)l[C]=g(I[C],C,I);return l}var p=Array.isArray,k=1/0,K=N?N.prototype:void 0,z=K?K.toString:void 0;function T(I){if("string"==typeof I)return I;if(p(I))return u(I,T)+"";if(y(I))return z?z.call(I):"";var g=I+"";return"0"==g&&1/I==-k?"-0":g}function L(I){var g=typeof I;return null!=I&&("object"==g||"function"==g)}function E(I){return I}var j="[object AsyncFunction]",x="[object Function]",O="[object GeneratorFunction]",r="[object Proxy]";function v(I){if(!L(I))return!1;var g=X(I);return g==x||g==O||g==j||g==r}var P=m["__core-js_shared__"],f=function(){var I=/[^.]+$/.exec(P&&P.keys&&P.keys.IE_PROTO||"");return I?"Symbol(src)_1."+I:""}();function _(I){return!!f&&f in I}var q=Function.prototype,$=q.toString;function II(I){if(null!=I){try{return $.call(I)}catch{}try{return I+""}catch{}}return""}var gI=/[\\^$.*+?()[\]{}|]/g,CI=/^\[object .+?Constructor\]$/,AI=Function.prototype,lI=Object.prototype,ZI=AI.toString,dI=lI.hasOwnProperty,BI=RegExp("^"+ZI.call(dI).replace(gI,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function FI(I){if(!L(I)||_(I))return!1;var g=v(I)?BI:CI;return g.test(II(I))}function iI(I,g){return null==I?void 0:I[g]}function cI(I,g){var C=iI(I,g);return FI(C)?C:void 0}var GI=function(){try{var I=cI(Object,"defineProperty");return I({},"",{}),I}catch{}}();function WI(I,g){for(var C=-1,A=null==I?0:I.length;++C<A&&!1!==g(I[C],C,I););return I}var VI=9007199254740991,RI=/^(?:0|[1-9]\d*)$/;function UI(I,g){var C=typeof I;return g=g??VI,!!g&&("number"==C||"symbol"!=C&&RI.test(I))&&I>-1&&I%1==0&&I<g}function bI(I,g,C){"__proto__"==g&&GI?GI(I,g,{configurable:!0,enumerable:!0,value:C,writable:!0}):I[g]=C}function sI(I,g){return I===g||I!==I&&g!==g}var QI=Object.prototype,mI=QI.hasOwnProperty;function NI(I,g,C){var A=I[g];(!mI.call(I,g)||!sI(A,C)||void 0===C&&!(g in I))&&bI(I,g,C)}var hI=9007199254740991;function nI(I){return"number"==typeof I&&I>-1&&I%1==0&&I<=hI}function aI(I){return null!=I&&nI(I.length)&&!v(I)}var oI=Object.prototype;function wI(I){var g=I&&I.constructor,C="function"==typeof g&&g.prototype||oI;return I===C}function YI(I,g){for(var C=-1,A=Array(I);++C<I;)A[C]=g(C);return A}var SI="[object Arguments]";function JI(I){return H(I)&&X(I)==SI}var MI=Object.prototype,DI=MI.hasOwnProperty,tI=MI.propertyIsEnumerable,XI=JI(function(){return arguments}())?JI:function(I){return H(I)&&DI.call(I,"callee")&&!tI.call(I,"callee")};function HI(){return!1}var eI="object"==typeof exports&&exports&&!exports.nodeType&&exports,yI=eI&&"object"==typeof module&&module&&!module.nodeType&&module,uI=yI&&yI.exports===eI,pI=uI?m.Buffer:void 0,kI=pI?pI.isBuffer:void 0,KI=kI||HI,zI="[object Arguments]",TI="[object Array]",LI="[object Boolean]",EI="[object Date]",jI="[object Error]",xI="[object Function]",OI="[object Map]",rI="[object Number]",vI="[object Object]",PI="[object RegExp]",fI="[object Set]",_I="[object String]",qI="[object WeakMap]",$I="[object ArrayBuffer]",Ig="[object DataView]",gg="[object Float32Array]",Cg="[object Float64Array]",Ag="[object Int8Array]",lg="[object Int16Array]",Zg="[object Int32Array]",dg="[object Uint8Array]",Bg="[object Uint8ClampedArray]",Fg="[object Uint16Array]",ig="[object Uint32Array]",cg={};function Gg(I){return H(I)&&nI(I.length)&&!!cg[X(I)]}function Wg(I){return function(g){return I(g)}}cg[gg]=cg[Cg]=cg[Ag]=cg[lg]=cg[Zg]=cg[dg]=cg[Bg]=cg[Fg]=cg[ig]=!0,cg[zI]=cg[TI]=cg[$I]=cg[LI]=cg[Ig]=cg[EI]=cg[jI]=cg[xI]=cg[OI]=cg[rI]=cg[vI]=cg[PI]=cg[fI]=cg[_I]=cg[qI]=!1;var Vg="object"==typeof exports&&exports&&!exports.nodeType&&exports,Rg=Vg&&"object"==typeof module&&module&&!module.nodeType&&module,Ug=Rg&&Rg.exports===Vg,bg=Ug&&s.process,sg=function(){try{var I=Rg&&Rg.require&&Rg.require("util").types;return I||bg&&bg.binding&&bg.binding("util")}catch{}}(),Qg=sg&&sg.isTypedArray,mg=Qg?Wg(Qg):Gg,Ng=Object.prototype,hg=Ng.hasOwnProperty;function ng(I,g){var C=p(I),A=!C&&XI(I),l=!C&&!A&&KI(I),Z=!C&&!A&&!l&&mg(I),d=C||A||l||Z,B=d?YI(I.length,String):[],F=B.length;for(var i in I)hg.call(I,i)&&(!d||!("length"==i||l&&("offset"==i||"parent"==i)||Z&&("buffer"==i||"byteLength"==i||"byteOffset"==i)||UI(i,F)))&&B.push(i);return B}function ag(I,g){return function(C){return I(g(C))}}var og=ag(Object.keys,Object),wg=Object.prototype,Yg=wg.hasOwnProperty;function Sg(I){if(!wI(I))return og(I);var g=[];for(var C in Object(I))Yg.call(I,C)&&"constructor"!=C&&g.push(C);return g}function Jg(I){return aI(I)?ng(I):Sg(I)}var Mg=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Dg=/^\w*$/;function tg(I,g){if(p(I))return!1;var C=typeof I;return!("number"!=C&&"symbol"!=C&&"boolean"!=C&&null!=I&&!y(I))||(Dg.test(I)||!Mg.test(I)||null!=g&&I in Object(g))}var Xg=cI(Object,"create");function Hg(){this.__data__=Xg?Xg(null):{},this.size=0}function eg(I){var g=this.has(I)&&delete this.__data__[I];return this.size-=g?1:0,g}var yg="__lodash_hash_undefined__",ug=Object.prototype,pg=ug.hasOwnProperty;function kg(I){var g=this.__data__;if(Xg){var C=g[I];return C===yg?void 0:C}return pg.call(g,I)?g[I]:void 0}var Kg=Object.prototype,zg=Kg.hasOwnProperty;function Tg(I){var g=this.__data__;return Xg?void 0!==g[I]:zg.call(g,I)}var Lg="__lodash_hash_undefined__";function Eg(I,g){var C=this.__data__;return this.size+=this.has(I)?0:1,C[I]=Xg&&void 0===g?Lg:g,this}function jg(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}function xg(){this.__data__=[],this.size=0}function Og(I,g){for(var C=I.length;C--;)if(sI(I[C][0],g))return C;return-1}jg.prototype.clear=Hg,jg.prototype.delete=eg,jg.prototype.get=kg,jg.prototype.has=Tg,jg.prototype.set=Eg;var rg=Array.prototype,vg=rg.splice;function Pg(I){var g=this.__data__,C=Og(g,I);if(C<0)return!1;var A=g.length-1;return C==A?g.pop():vg.call(g,C,1),--this.size,!0}function fg(I){var g=this.__data__,C=Og(g,I);return C<0?void 0:g[C][1]}function _g(I){return Og(this.__data__,I)>-1}function qg(I,g){var C=this.__data__,A=Og(C,I);return A<0?(++this.size,C.push([I,g])):C[A][1]=g,this}function $g(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}$g.prototype.clear=xg,$g.prototype.delete=Pg,$g.prototype.get=fg,$g.prototype.has=_g,$g.prototype.set=qg;var IC=cI(m,"Map");function gC(){this.size=0,this.__data__={hash:new jg,map:new(IC||$g),string:new jg}}function CC(I){var g=typeof I;return"string"==g||"number"==g||"symbol"==g||"boolean"==g?"__proto__"!==I:null===I}function AC(I,g){var C=I.__data__;return CC(g)?C["string"==typeof g?"string":"hash"]:C.map}function lC(I){var g=AC(this,I).delete(I);return this.size-=g?1:0,g}function ZC(I){return AC(this,I).get(I)}function dC(I){return AC(this,I).has(I)}function BC(I,g){var C=AC(this,I),A=C.size;return C.set(I,g),this.size+=C.size==A?0:1,this}function FC(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}FC.prototype.clear=gC,FC.prototype.delete=lC,FC.prototype.get=ZC,FC.prototype.has=dC,FC.prototype.set=BC;var iC="Expected a function";function cC(I,g){if("function"!=typeof I||null!=g&&"function"!=typeof g)throw new TypeError(iC);var C=function(){var A=arguments,l=g?g.apply(this,A):A[0],Z=C.cache;if(Z.has(l))return Z.get(l);var d=I.apply(this,A);return C.cache=Z.set(l,d)||Z,d};return C.cache=new(cC.Cache||FC),C}cC.Cache=FC;var GC=500;function WC(I){var g=cC(I,(function(I){return C.size===GC&&C.clear(),I})),C=g.cache;return g}var VC=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,RC=/\\(\\)?/g,UC=WC((function(I){var g=[];return 46===I.charCodeAt(0)&&g.push(""),I.replace(VC,(function(I,C,A,l){g.push(A?l.replace(RC,"$1"):C||I)})),g}));function bC(I){return null==I?"":T(I)}function sC(I,g){return p(I)?I:tg(I,g)?[I]:UC(bC(I))}var QC=1/0;function mC(I){if("string"==typeof I||y(I))return I;var g=I+"";return"0"==g&&1/I==-QC?"-0":g}function NC(I,g){g=sC(g,I);for(var C=0,A=g.length;null!=I&&C<A;)I=I[mC(g[C++])];return C&&C==A?I:void 0}function hC(I,g,C){var A=null==I?void 0:NC(I,g);return void 0===A?C:A}function nC(I){return function(I,g,C){for(var A=-1,l=Object(I),Z=C(I),d=Z.length;d--;){var B=Z[++A];if(!1===g(l[B],B,l))break}return I}}var aC=nC();function oC(I,g){return I&&aC(I,g,Jg)}function wC(I,g){return function(g,C){if(null==g)return g;if(!aI(g))return I(g,C);for(var A=g.length,l=-1,Z=Object(g);++l<A&&!1!==C(Z[l],l,Z););return g}}var YC=wC(oC);function SC(I){return"function"==typeof I?I:E}function JC(I,g){var C=p(I)?WI:YC;return C(I,SC(g))}function MC(I,g,C,A){if(!L(I))return I;g=sC(g,I);for(var l=-1,Z=g.length,d=Z-1,B=I;null!=B&&++l<Z;){var F=mC(g[l]),i=C;if("__proto__"===F||"constructor"===F||"prototype"===F)return I;if(l!=d){var c=B[F];i=void 0,void 0===i&&(i=L(c)?c:UI(g[l+1])?[]:{})}NI(B,F,i),B=B[F]}return I}function DC(I,g,C){return null==I?I:MC(I,g,C)}const tC=Symbol("INSTALLED_KEY"),XC=I=>g=>{hC(g,tC)||(DC(g,tC,!0),JC(I,(I=>{g.use(I)})))},HC=I=>(I.install=g=>{const C=(null==I?void 0:I.name)||"defaultComponent";g.component(C,I)},I);var eC={d:(I,g)=>{for(var C in g)eC.o(g,C)&&!eC.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},o:(I,g)=>Object.prototype.hasOwnProperty.call(I,g)},yC=globalThis.pdfjsLib={};eC.d(yC,{AbortException:()=>sA,AnnotationEditorLayer:()=>Ks,AnnotationEditorParamsType:()=>xC,AnnotationEditorType:()=>jC,AnnotationEditorUIManager:()=>id,AnnotationLayer:()=>SV,AnnotationMode:()=>LC,ColorPicker:()=>WU,DOMSVGFactory:()=>xG,DrawLayer:()=>_s,FeatureTest:()=>oA,GlobalWorkerOptions:()=>Ii,ImageKind:()=>vC,InvalidPDFException:()=>VA,MissingPDFException:()=>RA,OPS:()=>qC,OutputScale:()=>hl,PDFDataRangeTransport:()=>IG,PDFDateString:()=>Rl,PDFWorker:()=>mG,PasswordResponses:()=>$C,PermissionFlag:()=>OC,PixelsPerInch:()=>zA,RenderingCancelledException:()=>EA,TextLayer:()=>kc,UnexpectedResponseException:()=>UA,Util:()=>MA,VerbosityLevel:()=>_C,XfaLayer:()=>OG,build:()=>zG,createValidAbsoluteUrl:()=>FA,fetchData:()=>TA,getDocument:()=>rc,getFilenameFromUrl:()=>OA,getPdfFilenameFromUrl:()=>rA,getXfaPageViewport:()=>Ul,isDataScheme:()=>jA,isPdfFile:()=>xA,noContextMenu:()=>fA,normalizeUnicode:()=>HA,setLayerDimensions:()=>Nl,shadow:()=>iA,stopEvent:()=>_A,version:()=>KG});const uC="object"==typeof process&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&"browser"!==process.type),pC=[1,0,0,1,0,0],kC=[.001,0,0,.001,0,0],KC=1e7,zC=1.35,TC={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,IS_EDITING:128,OPLIST:256},LC={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},EC="pdfjs_internal_editor_",jC={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15},xC={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_DEFAULT_COLOR:32,HIGHLIGHT_THICKNESS:33,HIGHLIGHT_FREE:34,HIGHLIGHT_SHOW_ALL:35,DRAW_STEP:41},OC={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},rC={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},vC={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},PC={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},fC={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},_C={ERRORS:0,WARNINGS:1,INFOS:5},qC={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91,setStrokeTransparent:92,setFillTransparent:93},$C={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let IA=_C.WARNINGS;function gA(I){Number.isInteger(I)&&(IA=I)}function CA(){return IA}function AA(I){IA>=_C.INFOS&&console.log(`Info: ${I}`)}function lA(I){IA>=_C.WARNINGS&&console.log(`Warning: ${I}`)}function ZA(I){throw new Error(I)}function dA(I,g){I||ZA(g)}function BA(I){switch(null==I?void 0:I.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function FA(I,g=null,C=null){if(!I)return null;try{if(C&&"string"==typeof I){if(C.addDefaultProtocol&&I.startsWith("www.")){const g=I.match(/\./g);(null==g?void 0:g.length)>=2&&(I=`http://${I}`)}if(C.tryConvertEncoding)try{I=DA(I)}catch{}}const A=g?new URL(I,g):new URL(I);if(BA(A))return A}catch{}return null}function iA(I,g,C,A=!1){return Object.defineProperty(I,g,{value:C,enumerable:!A,configurable:!0,writable:!1}),C}const cA=function(){function I(I,g){this.message=I,this.name=g}return I.prototype=new Error,I.constructor=I,I}();class GA extends cA{constructor(I,g){super(I,"PasswordException"),this.code=g}}class WA extends cA{constructor(I,g){super(I,"UnknownErrorException"),this.details=g}}class VA extends cA{constructor(I){super(I,"InvalidPDFException")}}class RA extends cA{constructor(I){super(I,"MissingPDFException")}}class UA extends cA{constructor(I,g){super(I,"UnexpectedResponseException"),this.status=g}}class bA extends cA{constructor(I){super(I,"FormatError")}}class sA extends cA{constructor(I){super(I,"AbortException")}}function QA(I){("object"!=typeof I||void 0===(null==I?void 0:I.length))&&ZA("Invalid argument for bytesToString");const g=I.length,C=8192;if(g<C)return String.fromCharCode.apply(null,I);const A=[];for(let l=0;l<g;l+=C){const Z=Math.min(l+C,g),d=I.subarray(l,Z);A.push(String.fromCharCode.apply(null,d))}return A.join("")}function mA(I){"string"!=typeof I&&ZA("Invalid argument for stringToBytes");const g=I.length,C=new Uint8Array(g);for(let A=0;A<g;++A)C[A]=255&I.charCodeAt(A);return C}function NA(I){return String.fromCharCode(I>>24&255,I>>16&255,I>>8&255,255&I)}function hA(I){const g=Object.create(null);for(const[C,A]of I)g[C]=A;return g}function nA(){const I=new Uint8Array(4);return I[0]=1,1===new Uint32Array(I.buffer,0,1)[0]}function aA(){try{return new Function(""),!0}catch{return!1}}class oA{static get isLittleEndian(){return iA(this,"isLittleEndian",nA())}static get isEvalSupported(){return iA(this,"isEvalSupported",aA())}static get isOffscreenCanvasSupported(){return iA(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get isImageDecoderSupported(){return iA(this,"isImageDecoderSupported",typeof ImageDecoder<"u")}static get platform(){return typeof navigator<"u"&&"string"==typeof(null==navigator?void 0:navigator.platform)?iA(this,"platform",{isMac:navigator.platform.includes("Mac"),isWindows:navigator.platform.includes("Win"),isFirefox:"string"==typeof(null==navigator?void 0:navigator.userAgent)&&navigator.userAgent.includes("Firefox")}):iA(this,"platform",{isMac:!1,isWindows:!1,isFirefox:!1})}static get isCSSRoundSupported(){var I,g;return iA(this,"isCSSRoundSupported",null==(g=null==(I=globalThis.CSS)?void 0:I.supports)?void 0:g.call(I,"width: round(1.5px, 1px)"))}}const wA=Array.from(Array(256).keys(),(I=>I.toString(16).padStart(2,"0")));var YA,SA,JA;class MA{static makeHexColor(I,g,C){return`#${wA[I]}${wA[g]}${wA[C]}`}static scaleMinMax(I,g){let C;I[0]?(I[0]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[0],g[2]*=I[0],I[3]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[3],g[3]*=I[3]):(C=g[0],g[0]=g[1],g[1]=C,C=g[2],g[2]=g[3],g[3]=C,I[1]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[1],g[3]*=I[1],I[2]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[2],g[2]*=I[2]),g[0]+=I[4],g[1]+=I[5],g[2]+=I[4],g[3]+=I[5]}static transform(I,g){return[I[0]*g[0]+I[2]*g[1],I[1]*g[0]+I[3]*g[1],I[0]*g[2]+I[2]*g[3],I[1]*g[2]+I[3]*g[3],I[0]*g[4]+I[2]*g[5]+I[4],I[1]*g[4]+I[3]*g[5]+I[5]]}static applyTransform(I,g){const C=I[0]*g[0]+I[1]*g[2]+g[4],A=I[0]*g[1]+I[1]*g[3]+g[5];return[C,A]}static applyInverseTransform(I,g){const C=g[0]*g[3]-g[1]*g[2],A=(I[0]*g[3]-I[1]*g[2]+g[2]*g[5]-g[4]*g[3])/C,l=(-I[0]*g[1]+I[1]*g[0]+g[4]*g[1]-g[5]*g[0])/C;return[A,l]}static getAxialAlignedBoundingBox(I,g){const C=this.applyTransform(I,g),A=this.applyTransform(I.slice(2,4),g),l=this.applyTransform([I[0],I[3]],g),Z=this.applyTransform([I[2],I[1]],g);return[Math.min(C[0],A[0],l[0],Z[0]),Math.min(C[1],A[1],l[1],Z[1]),Math.max(C[0],A[0],l[0],Z[0]),Math.max(C[1],A[1],l[1],Z[1])]}static inverseTransform(I){const g=I[0]*I[3]-I[1]*I[2];return[I[3]/g,-I[1]/g,-I[2]/g,I[0]/g,(I[2]*I[5]-I[4]*I[3])/g,(I[4]*I[1]-I[5]*I[0])/g]}static singularValueDecompose2dScale(I){const g=[I[0],I[2],I[1],I[3]],C=I[0]*g[0]+I[1]*g[2],A=I[0]*g[1]+I[1]*g[3],l=I[2]*g[0]+I[3]*g[2],Z=I[2]*g[1]+I[3]*g[3],d=(C+Z)/2,B=Math.sqrt((C+Z)**2-4*(C*Z-l*A))/2,F=d+B||1,i=d-B||1;return[Math.sqrt(F),Math.sqrt(i)]}static normalizeRect(I){const g=I.slice(0);return I[0]>I[2]&&(g[0]=I[2],g[2]=I[0]),I[1]>I[3]&&(g[1]=I[3],g[3]=I[1]),g}static intersect(I,g){const C=Math.max(Math.min(I[0],I[2]),Math.min(g[0],g[2])),A=Math.min(Math.max(I[0],I[2]),Math.max(g[0],g[2]));if(C>A)return null;const l=Math.max(Math.min(I[1],I[3]),Math.min(g[1],g[3])),Z=Math.min(Math.max(I[1],I[3]),Math.max(g[1],g[3]));return l>Z?null:[C,l,A,Z]}static bezierBoundingBox(I,g,C,A,l,Z,d,B,F){return F?(F[0]=Math.min(F[0],I,d),F[1]=Math.min(F[1],g,B),F[2]=Math.max(F[2],I,d),F[3]=Math.max(F[3],g,B)):F=[Math.min(I,d),Math.min(g,B),Math.max(I,d),Math.max(g,B)],U(this,YA,JA).call(this,I,C,l,d,g,A,Z,B,3*(3*(C-l)-I+d),6*(I-2*C+l),3*(C-I),F),U(this,YA,JA).call(this,I,C,l,d,g,A,Z,B,3*(3*(A-Z)-g+B),6*(g-2*A+Z),3*(A-g),F),F}}function DA(I){return decodeURIComponent(escape(I))}YA=new WeakSet,SA=function(I,g,C,A,l,Z,d,B,F,i){if(F<=0||F>=1)return;const c=1-F,G=F*F,W=G*F,V=c*(c*(c*I+3*F*g)+3*G*C)+W*A,R=c*(c*(c*l+3*F*Z)+3*G*d)+W*B;i[0]=Math.min(i[0],V),i[1]=Math.min(i[1],R),i[2]=Math.max(i[2],V),i[3]=Math.max(i[3],R)},JA=function(I,g,C,A,l,Z,d,B,F,i,c,G){if(Math.abs(F)<1e-12)return void(Math.abs(i)>=1e-12&&U(this,YA,SA).call(this,I,g,C,A,l,Z,d,B,-c/i,G));const W=i**2-4*c*F;if(W<0)return;const V=Math.sqrt(W),R=2*F;U(this,YA,SA).call(this,I,g,C,A,l,Z,d,B,(-i+V)/R,G),U(this,YA,SA).call(this,I,g,C,A,l,Z,d,B,(-i-V)/R,G)},V(MA,YA);let tA=null,XA=null;function HA(I){return tA||(tA=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,XA=new Map([["ﬅ","ſt"]])),I.replaceAll(tA,((I,g,C)=>g?g.normalize("NFKC"):XA.get(C)))}function eA(){if("function"==typeof crypto.randomUUID)return crypto.randomUUID();const I=new Uint8Array(32);return crypto.getRandomValues(I),QA(I)}const yA="pdfjs_internal_id_",uA={BEZIER_CURVE_TO:0,MOVE_TO:1,LINE_TO:2,QUADRATIC_CURVE_TO:3,RESTORE:4,SAVE:5,SCALE:6,TRANSFORM:7,TRANSLATE:8};function pA(I){return Uint8Array.prototype.toBase64?I.toBase64():btoa(QA(I))}"function"!=typeof Promise.try&&(Promise.try=function(I,...g){return new Promise((C=>{C(I(...g))}))});const kA="http://www.w3.org/2000/svg",KA=class{};c(KA,"CSS",96),c(KA,"PDF",72),c(KA,"PDF_TO_CSS_UNITS",KA.CSS/KA.PDF);let zA=KA;async function TA(I,g="text"){if(PA(I,document.baseURI)){const C=await fetch(I);if(!C.ok)throw new Error(C.statusText);switch(g){case"arraybuffer":return C.arrayBuffer();case"blob":return C.blob();case"json":return C.json()}return C.text()}return new Promise(((C,A)=>{const l=new XMLHttpRequest;l.open("GET",I,!0),l.responseType=g,l.onreadystatechange=()=>{if(l.readyState===XMLHttpRequest.DONE){if(200===l.status||0===l.status){switch(g){case"arraybuffer":case"blob":case"json":return void C(l.response)}return void C(l.responseText)}A(new Error(l.statusText))}},l.send(null)}))}class LA{constructor({viewBox:I,scale:g,rotation:C,offsetX:A=0,offsetY:l=0,dontFlip:Z=!1}){this.viewBox=I,this.scale=g,this.rotation=C,this.offsetX=A,this.offsetY=l;const d=(I[2]+I[0])/2,B=(I[3]+I[1])/2;let F,i,c,G,W,V,R,U;switch(C%=360,C<0&&(C+=360),C){case 180:F=-1,i=0,c=0,G=1;break;case 90:F=0,i=1,c=1,G=0;break;case 270:F=0,i=-1,c=-1,G=0;break;case 0:F=1,i=0,c=0,G=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}Z&&(c=-c,G=-G),0===F?(W=Math.abs(B-I[1])*g+A,V=Math.abs(d-I[0])*g+l,R=(I[3]-I[1])*g,U=(I[2]-I[0])*g):(W=Math.abs(d-I[0])*g+A,V=Math.abs(B-I[1])*g+l,R=(I[2]-I[0])*g,U=(I[3]-I[1])*g),this.transform=[F*g,i*g,c*g,G*g,W-F*g*d-c*g*B,V-i*g*d-G*g*B],this.width=R,this.height=U}get rawDims(){const{viewBox:I}=this;return iA(this,"rawDims",{pageWidth:I[2]-I[0],pageHeight:I[3]-I[1],pageX:I[0],pageY:I[1]})}clone({scale:I=this.scale,rotation:g=this.rotation,offsetX:C=this.offsetX,offsetY:A=this.offsetY,dontFlip:l=!1}={}){return new LA({viewBox:this.viewBox.slice(),scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}convertToViewportPoint(I,g){return MA.applyTransform([I,g],this.transform)}convertToViewportRectangle(I){const g=MA.applyTransform([I[0],I[1]],this.transform),C=MA.applyTransform([I[2],I[3]],this.transform);return[g[0],g[1],C[0],C[1]]}convertToPdfPoint(I,g){return MA.applyInverseTransform([I,g],this.transform)}}class EA extends cA{constructor(I,g=0){super(I,"RenderingCancelledException"),this.extraDelay=g}}function jA(I){const g=I.length;let C=0;for(;C<g&&""===I[C].trim();)C++;return"data:"===I.substring(C,C+5).toLowerCase()}function xA(I){return"string"==typeof I&&/\.pdf$/i.test(I)}function OA(I){return[I]=I.split(/[#?]/,1),I.substring(I.lastIndexOf("/")+1)}function rA(I,g="document.pdf"){if("string"!=typeof I)return g;if(jA(I))return lA('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),g;const C=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,A=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,l=C.exec(I);let Z=A.exec(l[1])||A.exec(l[2])||A.exec(l[3]);if(Z&&(Z=Z[0],Z.includes("%")))try{Z=A.exec(decodeURIComponent(Z))[0]}catch{}return Z||g}class vA{constructor(){c(this,"started",Object.create(null)),c(this,"times",[])}time(I){I in this.started&&lA(`Timer is already running for ${I}`),this.started[I]=Date.now()}timeEnd(I){I in this.started||lA(`Timer has not been started for ${I}`),this.times.push({name:I,start:this.started[I],end:Date.now()}),delete this.started[I]}toString(){const I=[];let g=0;for(const{name:C}of this.times)g=Math.max(C.length,g);for(const{name:C,start:A,end:l}of this.times)I.push(`${C.padEnd(g)} ${l-A}ms\n`);return I.join("")}}function PA(I,g){try{const{protocol:C}=g?new URL(I,g):new URL(I);return"http:"===C||"https:"===C}catch{return!1}}function fA(I){I.preventDefault()}function _A(I){I.preventDefault(),I.stopPropagation()}function qA(I){console.log("Deprecated API usage: "+I)}var $A,Il,gl,Cl,Al,ll,Zl,dl,Bl,Fl,il,cl,Gl,Wl,Vl;class Rl{static toDateObject(I){if(!I||"string"!=typeof I)return null;W(this,$A)||R(this,$A,new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const g=W(this,$A).exec(I);if(!g)return null;const C=parseInt(g[1],10);let A=parseInt(g[2],10);A=A>=1&&A<=12?A-1:0;let l=parseInt(g[3],10);l=l>=1&&l<=31?l:1;let Z=parseInt(g[4],10);Z=Z>=0&&Z<=23?Z:0;let d=parseInt(g[5],10);d=d>=0&&d<=59?d:0;let B=parseInt(g[6],10);B=B>=0&&B<=59?B:0;const F=g[7]||"Z";let i=parseInt(g[8],10);i=i>=0&&i<=23?i:0;let c=parseInt(g[9],10)||0;return c=c>=0&&c<=59?c:0,"-"===F?(Z+=i,d+=c):"+"===F&&(Z-=i,d-=c),new Date(Date.UTC(C,A,l,Z,d,B))}}function Ul(I,{scale:g=1,rotation:C=0}){const{width:A,height:l}=I.attributes.style,Z=[0,0,parseInt(A),parseInt(l)];return new LA({viewBox:Z,scale:g,rotation:C})}function bl(I){if(I.startsWith("#")){const g=parseInt(I.slice(1),16);return[(16711680&g)>>16,(65280&g)>>8,255&g]}return I.startsWith("rgb(")?I.slice(4,-1).split(",").map((I=>parseInt(I))):I.startsWith("rgba(")?I.slice(5,-1).split(",").map((I=>parseInt(I))).slice(0,3):(lA(`Not a valid color format: "${I}"`),[0,0,0])}function sl(I){const g=document.createElement("span");g.style.visibility="hidden",document.body.append(g);for(const C of I.keys()){g.style.color=C;const A=window.getComputedStyle(g).color;I.set(C,bl(A))}g.remove()}function Ql(I){const{a:g,b:C,c:A,d:l,e:Z,f:d}=I.getTransform();return[g,C,A,l,Z,d]}function ml(I){const{a:g,b:C,c:A,d:l,e:Z,f:d}=I.getTransform().invertSelf();return[g,C,A,l,Z,d]}function Nl(I,g,C=!1,A=!0){if(g instanceof LA){const{pageWidth:A,pageHeight:l}=g.rawDims,{style:Z}=I,d=oA.isCSSRoundSupported,B=`var(--scale-factor) * ${A}px`,F=`var(--scale-factor) * ${l}px`,i=d?`round(down, ${B}, var(--scale-round-x, 1px))`:`calc(${B})`,c=d?`round(down, ${F}, var(--scale-round-y, 1px))`:`calc(${F})`;C&&g.rotation%180!==0?(Z.width=c,Z.height=i):(Z.width=i,Z.height=c)}A&&I.setAttribute("data-main-rotation",g.rotation)}$A=new WeakMap,V(Rl,$A);class hl{constructor(){const I=window.devicePixelRatio||1;this.sx=I,this.sy=I}get scaled(){return 1!==this.sx||1!==this.sy}get symmetric(){return this.sx===this.sy}}const nl=class I{constructor(g){V(this,Fl),V(this,Il,null),V(this,gl,null),V(this,Cl),V(this,Al,null),V(this,ll,null),R(this,Cl,g),W(I,Zl)||R(I,Zl,Object.freeze({freetext:"pdfjs-editor-remove-freetext-button",highlight:"pdfjs-editor-remove-highlight-button",ink:"pdfjs-editor-remove-ink-button",stamp:"pdfjs-editor-remove-stamp-button"}))}render(){const g=R(this,Il,document.createElement("div"));g.classList.add("editToolbar","hidden"),g.setAttribute("role","toolbar");const C=W(this,Cl)._uiManager._signal;g.addEventListener("contextmenu",fA,{signal:C}),g.addEventListener("pointerdown",U(I,dl,Bl),{signal:C});const A=R(this,Al,document.createElement("div"));A.className="buttons",g.append(A);const l=W(this,Cl).toolbarPosition;if(l){const{style:I}=g,C="ltr"===W(this,Cl)._uiManager.direction?1-l[0]:l[0];I.insetInlineEnd=100*C+"%",I.top=`calc(${100*l[1]}% + var(--editor-toolbar-vert-offset))`}return U(this,Fl,Wl).call(this),g}get div(){return W(this,Il)}hide(){var I;W(this,Il).classList.add("hidden"),null==(I=W(this,gl))||I.hideDropdown()}show(){var I;W(this,Il).classList.remove("hidden"),null==(I=W(this,ll))||I.shown()}async addAltText(I){const g=await I.render();U(this,Fl,Gl).call(this,g),W(this,Al).prepend(g,W(this,Fl,Vl)),R(this,ll,I)}addColorPicker(I){R(this,gl,I);const g=I.renderButton();U(this,Fl,Gl).call(this,g),W(this,Al).prepend(g,W(this,Fl,Vl))}remove(){var I;W(this,Il).remove(),null==(I=W(this,gl))||I.destroy(),R(this,gl,null)}};Il=new WeakMap,gl=new WeakMap,Cl=new WeakMap,Al=new WeakMap,ll=new WeakMap,Zl=new WeakMap,dl=new WeakSet,Bl=function(I){I.stopPropagation()},Fl=new WeakSet,il=function(I){W(this,Cl)._focusEventsAllowed=!1,_A(I)},cl=function(I){W(this,Cl)._focusEventsAllowed=!0,_A(I)},Gl=function(I){const g=W(this,Cl)._uiManager._signal;I.addEventListener("focusin",U(this,Fl,il).bind(this),{capture:!0,signal:g}),I.addEventListener("focusout",U(this,Fl,cl).bind(this),{capture:!0,signal:g}),I.addEventListener("contextmenu",fA,{signal:g})},Wl=function(){const{editorType:I,_uiManager:g}=W(this,Cl),C=document.createElement("button");C.className="delete",C.tabIndex=0,C.setAttribute("data-l10n-id",W(nl,Zl)[I]),U(this,Fl,Gl).call(this,C),C.addEventListener("click",(I=>{g.delete()}),{signal:g._signal}),W(this,Al).append(C)},Vl=function(){const I=document.createElement("div");return I.className="divider",I},V(nl,dl),V(nl,Zl,null);let al=nl;var ol,wl,Yl,Sl,Jl,Ml,Dl,tl,Xl,Hl,el,yl,ul;class pl{constructor(I){V(this,Sl),V(this,ol,null),V(this,wl,null),V(this,Yl),R(this,Yl,I)}show(I,g,C){const[A,l]=U(this,Sl,Ml).call(this,g,C),{style:Z}=W(this,wl)||R(this,wl,U(this,Sl,Jl).call(this));I.append(W(this,wl)),Z.insetInlineEnd=100*A+"%",Z.top=`calc(${100*l}% + var(--editor-toolbar-vert-offset))`}hide(){W(this,wl).remove()}}function kl(I,g,C){for(const A of C)g.addEventListener(A,I[A].bind(I))}ol=new WeakMap,wl=new WeakMap,Yl=new WeakMap,Sl=new WeakSet,Jl=function(){const I=R(this,wl,document.createElement("div"));I.className="editToolbar",I.setAttribute("role","toolbar"),I.addEventListener("contextmenu",fA,{signal:W(this,Yl)._signal});const g=R(this,ol,document.createElement("div"));return g.className="buttons",I.append(g),U(this,Sl,Dl).call(this),I},Ml=function(I,g){let C=0,A=0;for(const l of I){const I=l.y+l.height;if(I<C)continue;const Z=l.x+(g?l.width:0);I>C?(A=Z,C=I):g?Z>A&&(A=Z):Z<A&&(A=Z)}return[g?1-A:A,C]},Dl=function(){const I=document.createElement("button");I.className="highlightButton",I.tabIndex=0,I.setAttribute("data-l10n-id","pdfjs-highlight-floating-button1");const g=document.createElement("span");I.append(g),g.className="visuallyHidden",g.setAttribute("data-l10n-id","pdfjs-highlight-floating-button-label");const C=W(this,Yl)._signal;I.addEventListener("contextmenu",fA,{signal:C}),I.addEventListener("click",(()=>{W(this,Yl).highlightSelection("floating_button")}),{signal:C}),W(this,ol).append(I)};class Kl{constructor(){V(this,tl,0)}get id(){return`${EC}${b(this,tl)._++}`}}tl=new WeakMap;const zl=class{constructor(){V(this,yl),V(this,Xl,eA()),V(this,Hl,0),V(this,el,null)}static get _isSVGFittingCanvas(){const I='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',g=new OffscreenCanvas(1,3).getContext("2d",{willReadFrequently:!0}),C=new Image;C.src=I;const A=C.decode().then((()=>(g.drawImage(C,0,0,1,1,0,0,1,3),0===new Uint32Array(g.getImageData(0,0,1,1).data.buffer)[0])));return iA(this,"_isSVGFittingCanvas",A)}async getFromFile(I){const{lastModified:g,name:C,size:A,type:l}=I;return U(this,yl,ul).call(this,`${g}_${C}_${A}_${l}`,I)}async getFromUrl(I){return U(this,yl,ul).call(this,I,I)}async getFromBlob(I,g){const C=await g;return U(this,yl,ul).call(this,I,C)}async getFromId(I){W(this,el)||R(this,el,new Map);const g=W(this,el).get(I);if(!g)return null;if(g.bitmap)return g.refCounter+=1,g;if(g.file)return this.getFromFile(g.file);if(g.blobPromise){const{blobPromise:I}=g;return delete g.blobPromise,this.getFromBlob(g.id,I)}return this.getFromUrl(g.url)}getFromCanvas(I,g){W(this,el)||R(this,el,new Map);let C=W(this,el).get(I);if(null!=C&&C.bitmap)return C.refCounter+=1,C;const A=new OffscreenCanvas(g.width,g.height);return A.getContext("2d").drawImage(g,0,0),C={bitmap:A.transferToImageBitmap(),id:`image_${W(this,Xl)}_${b(this,Hl)._++}`,refCounter:1,isSvg:!1},W(this,el).set(I,C),W(this,el).set(C.id,C),C}getSvgUrl(I){const g=W(this,el).get(I);return null!=g&&g.isSvg?g.svgUrl:null}deleteId(I){var g;W(this,el)||R(this,el,new Map);const C=W(this,el).get(I);if(!C||(C.refCounter-=1,0!==C.refCounter))return;const{bitmap:A}=C;if(!C.url&&!C.file){const I=new OffscreenCanvas(A.width,A.height);I.getContext("bitmaprenderer").transferFromImageBitmap(A),C.blobPromise=I.convertToBlob()}null==(g=A.close)||g.call(A),C.bitmap=null}isValidId(I){return I.startsWith(`image_${W(this,Xl)}_`)}};Xl=new WeakMap,Hl=new WeakMap,el=new WeakMap,yl=new WeakSet,ul=async function(I,g){W(this,el)||R(this,el,new Map);let C=W(this,el).get(I);if(null===C)return null;if(null!=C&&C.bitmap)return C.refCounter+=1,C;try{let I;if(C||(C={bitmap:null,id:`image_${W(this,Xl)}_${b(this,Hl)._++}`,refCounter:0,isSvg:!1}),"string"==typeof g?(C.url=g,I=await TA(g,"blob")):g instanceof File?I=C.file=g:g instanceof Blob&&(I=g),"image/svg+xml"===I.type){const g=zl._isSVGFittingCanvas,A=new FileReader,l=new Image,Z=new Promise(((I,Z)=>{l.onload=()=>{C.bitmap=l,C.isSvg=!0,I()},A.onload=async()=>{const I=C.svgUrl=A.result;l.src=await g?`${I}#svgView(preserveAspectRatio(none))`:I},l.onerror=A.onerror=Z}));A.readAsDataURL(I),await Z}else C.bitmap=await createImageBitmap(I);C.refCounter=1}catch(A){lA(A),C=null}return W(this,el).set(I,C),C&&W(this,el).set(C.id,C),C};let Tl=zl;var Ll,El,jl,xl,Ol,rl;class vl{constructor(I=128){V(this,Ll,[]),V(this,El,!1),V(this,jl),V(this,xl,-1),R(this,jl,I)}add({cmd:I,undo:g,post:C,mustExec:A,type:l=NaN,overwriteIfSameType:Z=!1,keepUndo:d=!1}){if(A&&I(),W(this,El))return;const B={cmd:I,undo:g,post:C,type:l};if(-1===W(this,xl))return W(this,Ll).length>0&&(W(this,Ll).length=0),R(this,xl,0),void W(this,Ll).push(B);if(Z&&W(this,Ll)[W(this,xl)].type===l)return d&&(B.undo=W(this,Ll)[W(this,xl)].undo),void(W(this,Ll)[W(this,xl)]=B);const F=W(this,xl)+1;F===W(this,jl)?W(this,Ll).splice(0,1):(R(this,xl,F),F<W(this,Ll).length&&W(this,Ll).splice(F)),W(this,Ll).push(B)}undo(){if(-1===W(this,xl))return;R(this,El,!0);const{undo:I,post:g}=W(this,Ll)[W(this,xl)];I(),null==g||g(),R(this,El,!1),R(this,xl,W(this,xl)-1)}redo(){if(W(this,xl)<W(this,Ll).length-1){R(this,xl,W(this,xl)+1),R(this,El,!0);const{cmd:I,post:g}=W(this,Ll)[W(this,xl)];I(),null==g||g(),R(this,El,!1)}}hasSomethingToUndo(){return-1!==W(this,xl)}hasSomethingToRedo(){return W(this,xl)<W(this,Ll).length-1}cleanType(I){if(-1!==W(this,xl)){for(let g=W(this,xl);g>=0;g--)if(W(this,Ll)[g].type!==I)return W(this,Ll).splice(g+1,W(this,xl)-g),void R(this,xl,g);W(this,Ll).length=0,R(this,xl,-1)}}destroy(){R(this,Ll,null)}}Ll=new WeakMap,El=new WeakMap,jl=new WeakMap,xl=new WeakMap;class Pl{constructor(I){V(this,Ol),this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:g}=oA.platform;for(const[C,A,l={}]of I)for(const I of C){const C=I.startsWith("mac+");g&&C?(this.callbacks.set(I.slice(4),{callback:A,options:l}),this.allKeys.add(I.split("+").at(-1))):!g&&!C&&(this.callbacks.set(I,{callback:A,options:l}),this.allKeys.add(I.split("+").at(-1)))}}exec(I,g){if(!this.allKeys.has(g.key))return;const C=this.callbacks.get(U(this,Ol,rl).call(this,g));if(!C)return;const{callback:A,options:{bubbles:l=!1,args:Z=[],checker:d=null}}=C;d&&!d(I,g)||(A.bind(I,...Z,g)(),l||_A(g))}}Ol=new WeakSet,rl=function(I){I.altKey&&this.buffer.push("alt"),I.ctrlKey&&this.buffer.push("ctrl"),I.metaKey&&this.buffer.push("meta"),I.shiftKey&&this.buffer.push("shift"),this.buffer.push(I.key);const g=this.buffer.join("+");return this.buffer.length=0,g};const fl=class I{get _colors(){const I=new Map([["CanvasText",null],["Canvas",null]]);return sl(I),iA(this,"_colors",I)}convert(g){const C=bl(g);if(!window.matchMedia("(forced-colors: active)").matches)return C;for(const[A,l]of this._colors)if(l.every(((I,g)=>I===C[g])))return I._colorsMapping.get(A);return C}getHexCode(I){const g=this._colors.get(I);return g?MA.makeHexColor(...g):I}};c(fl,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let _l=fl;var ql,$l,IZ,gZ,CZ,AZ,lZ,ZZ,dZ,BZ,FZ,iZ,cZ,GZ,WZ,VZ,RZ,UZ,bZ,sZ,QZ,mZ,NZ,hZ,nZ,aZ,oZ,wZ,YZ,SZ,JZ,MZ,DZ,tZ,XZ,HZ,eZ,yZ,uZ,pZ,kZ,KZ,zZ,TZ,LZ,EZ,jZ,xZ,OZ,rZ,vZ,PZ,fZ,_Z,qZ,$Z,Id,gd,Cd,Ad,ld,Zd,dd,Bd;const Fd=class I{constructor(I,g,C,A,l,Z,d,B,F,i,G,b){V(this,zZ),V(this,ql,new AbortController),V(this,$l,null),V(this,IZ,new Map),V(this,gZ,new Map),V(this,CZ,null),V(this,AZ,null),V(this,lZ,null),V(this,ZZ,new vl),V(this,dZ,null),V(this,BZ,null),V(this,FZ,0),V(this,iZ,new Set),V(this,cZ,null),V(this,GZ,null),V(this,WZ,new Set),c(this,"_editorUndoBar",null),V(this,VZ,!1),V(this,RZ,!1),V(this,UZ,!1),V(this,bZ,null),V(this,sZ,null),V(this,QZ,null),V(this,mZ,null),V(this,NZ,!1),V(this,hZ,null),V(this,nZ,new Kl),V(this,aZ,!1),V(this,oZ,!1),V(this,wZ,null),V(this,YZ,null),V(this,SZ,null),V(this,JZ,null),V(this,MZ,jC.NONE),V(this,DZ,new Set),V(this,tZ,null),V(this,XZ,null),V(this,HZ,null),V(this,eZ,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1,hasSelectedText:!1}),V(this,yZ,[0,0]),V(this,uZ,null),V(this,pZ,null),V(this,kZ,null),V(this,KZ,null);const s=this._signal=W(this,ql).signal;R(this,pZ,I),R(this,kZ,g),R(this,CZ,C),this._eventBus=A,A._on("editingaction",this.onEditingAction.bind(this),{signal:s}),A._on("pagechanging",this.onPageChanging.bind(this),{signal:s}),A._on("scalechanging",this.onScaleChanging.bind(this),{signal:s}),A._on("rotationchanging",this.onRotationChanging.bind(this),{signal:s}),A._on("setpreference",this.onSetPreference.bind(this),{signal:s}),A._on("switchannotationeditorparams",(I=>this.updateParams(I.type,I.value)),{signal:s}),U(this,zZ,OZ).call(this),U(this,zZ,$Z).call(this),U(this,zZ,PZ).call(this),R(this,AZ,l.annotationStorage),R(this,bZ,l.filterFactory),R(this,XZ,Z),R(this,mZ,d||null),R(this,VZ,B),R(this,RZ,F),R(this,UZ,i),R(this,JZ,G||null),this.viewParameters={realScale:zA.PDF_TO_CSS_UNITS,rotation:0},this.isShiftKeyDown=!1,this._editorUndoBar=b||null}static get _keyboardManager(){const g=I.prototype,C=I=>W(I,pZ).contains(document.activeElement)&&"BUTTON"!==document.activeElement.tagName&&I.hasSomethingToControl(),A=(I,{target:g})=>{if(g instanceof HTMLInputElement){const{type:I}=g;return"text"!==I&&"number"!==I}return!0},l=this.TRANSLATE_SMALL,Z=this.TRANSLATE_BIG;return iA(this,"_keyboardManager",new Pl([[["ctrl+a","mac+meta+a"],g.selectAll,{checker:A}],[["ctrl+z","mac+meta+z"],g.undo,{checker:A}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],g.redo,{checker:A}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],g.delete,{checker:A}],[["Enter","mac+Enter"],g.addNewEditorFromKeyboard,{checker:(I,{target:g})=>!(g instanceof HTMLButtonElement)&&W(I,pZ).contains(g)&&!I.isEnterHandled}],[[" ","mac+ "],g.addNewEditorFromKeyboard,{checker:(I,{target:g})=>!(g instanceof HTMLButtonElement)&&W(I,pZ).contains(document.activeElement)}],[["Escape","mac+Escape"],g.unselectAll],[["ArrowLeft","mac+ArrowLeft"],g.translateSelectedEditors,{args:[-l,0],checker:C}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],g.translateSelectedEditors,{args:[-Z,0],checker:C}],[["ArrowRight","mac+ArrowRight"],g.translateSelectedEditors,{args:[l,0],checker:C}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],g.translateSelectedEditors,{args:[Z,0],checker:C}],[["ArrowUp","mac+ArrowUp"],g.translateSelectedEditors,{args:[0,-l],checker:C}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],g.translateSelectedEditors,{args:[0,-Z],checker:C}],[["ArrowDown","mac+ArrowDown"],g.translateSelectedEditors,{args:[0,l],checker:C}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],g.translateSelectedEditors,{args:[0,Z],checker:C}]]))}destroy(){var I,g,C,A,l;null==(I=W(this,KZ))||I.resolve(),R(this,KZ,null),null==(g=W(this,ql))||g.abort(),R(this,ql,null),this._signal=null;for(const Z of W(this,gZ).values())Z.destroy();W(this,gZ).clear(),W(this,IZ).clear(),W(this,WZ).clear(),R(this,$l,null),W(this,DZ).clear(),W(this,ZZ).destroy(),null==(C=W(this,CZ))||C.destroy(),null==(A=W(this,hZ))||A.hide(),R(this,hZ,null),W(this,sZ)&&(clearTimeout(W(this,sZ)),R(this,sZ,null)),W(this,uZ)&&(clearTimeout(W(this,uZ)),R(this,uZ,null)),null==(l=this._editorUndoBar)||l.destroy()}combinedSignal(I){return AbortSignal.any([this._signal,I.signal])}get mlManager(){return W(this,JZ)}get useNewAltTextFlow(){return W(this,RZ)}get useNewAltTextWhenAddingImage(){return W(this,UZ)}get hcmFilter(){return iA(this,"hcmFilter",W(this,XZ)?W(this,bZ).addHCMFilter(W(this,XZ).foreground,W(this,XZ).background):"none")}get direction(){return iA(this,"direction",getComputedStyle(W(this,pZ)).direction)}get highlightColors(){return iA(this,"highlightColors",W(this,mZ)?new Map(W(this,mZ).split(",").map((I=>I.split("=").map((I=>I.trim()))))):null)}get highlightColorNames(){return iA(this,"highlightColorNames",this.highlightColors?new Map(Array.from(this.highlightColors,(I=>I.reverse()))):null)}setCurrentDrawingSession(I){I?(this.unselectAll(),this.disableUserSelect(!0)):this.disableUserSelect(!1),R(this,BZ,I)}setMainHighlightColorPicker(I){R(this,SZ,I)}editAltText(I,g=!1){var C;null==(C=W(this,CZ))||C.editAltText(this,I,g)}switchToMode(I,g){this._eventBus.on("annotationeditormodechanged",g,{once:!0,signal:this._signal}),this._eventBus.dispatch("showannotationeditorui",{source:this,mode:I})}setPreference(I,g){this._eventBus.dispatch("setpreference",{source:this,name:I,value:g})}onSetPreference({name:I,value:g}){switch(I){case"enableNewAltTextWhenAddingImage":R(this,UZ,g);break}}onPageChanging({pageNumber:I}){R(this,FZ,I-1)}focusMainContainer(){W(this,pZ).focus()}findParent(I,g){for(const C of W(this,gZ).values()){const{x:A,y:l,width:Z,height:d}=C.div.getBoundingClientRect();if(I>=A&&I<=A+Z&&g>=l&&g<=l+d)return C}return null}disableUserSelect(I=!1){W(this,kZ).classList.toggle("noUserSelect",I)}addShouldRescale(I){W(this,WZ).add(I)}removeShouldRescale(I){W(this,WZ).delete(I)}onScaleChanging({scale:I}){var g;this.commitOrRemove(),this.viewParameters.realScale=I*zA.PDF_TO_CSS_UNITS;for(const C of W(this,WZ))C.onScaleChanging();null==(g=W(this,BZ))||g.onScaleChanging()}onRotationChanging({pagesRotation:I}){this.commitOrRemove(),this.viewParameters.rotation=I}highlightSelection(I=""){const g=document.getSelection();if(!g||g.isCollapsed)return;const{anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z}=g,d=g.toString(),B=U(this,zZ,TZ).call(this,g).closest(".textLayer"),F=this.getSelectionBoxes(B);if(!F)return;g.empty();const i=U(this,zZ,LZ).call(this,B),c=W(this,MZ)===jC.NONE,G=()=>{null==i||i.createAndAddNewEditor({x:0,y:0},!1,{methodOfCreation:I,boxes:F,anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z,text:d}),c&&this.showAllEditors("highlight",!0,!0)};c?this.switchToMode(jC.HIGHLIGHT,G):G()}addToAnnotationStorage(I){!I.isEmpty()&&W(this,AZ)&&!W(this,AZ).has(I.id)&&W(this,AZ).setValue(I.id,I)}blur(){if(this.isShiftKeyDown=!1,W(this,NZ)&&(R(this,NZ,!1),U(this,zZ,xZ).call(this,"main_toolbar")),!this.hasSelection)return;const{activeElement:I}=document;for(const g of W(this,DZ))if(g.div.contains(I)){R(this,YZ,[g,I]),g._focusEventsAllowed=!1;break}}focus(){if(!W(this,YZ))return;const[I,g]=W(this,YZ);R(this,YZ,null),g.addEventListener("focusin",(()=>{I._focusEventsAllowed=!0}),{once:!0,signal:this._signal}),g.focus()}addEditListeners(){U(this,zZ,PZ).call(this),U(this,zZ,_Z).call(this)}removeEditListeners(){U(this,zZ,fZ).call(this),U(this,zZ,qZ).call(this)}dragOver(I){for(const{type:g}of I.dataTransfer.items)for(const C of W(this,GZ))if(C.isHandlingMimeForPasting(g))return I.dataTransfer.dropEffect="copy",void I.preventDefault()}drop(I){for(const g of I.dataTransfer.items)for(const C of W(this,GZ))if(C.isHandlingMimeForPasting(g.type))return C.paste(g,this.currentLayer),void I.preventDefault()}copy(I){var g;if(I.preventDefault(),null==(g=W(this,$l))||g.commitOrRemove(),!this.hasSelection)return;const C=[];for(const A of W(this,DZ)){const I=A.serialize(!0);I&&C.push(I)}0!==C.length&&I.clipboardData.setData("application/pdfjs",JSON.stringify(C))}cut(I){this.copy(I),this.delete()}async paste(I){I.preventDefault();const{clipboardData:g}=I;for(const Z of g.items)for(const I of W(this,GZ))if(I.isHandlingMimeForPasting(Z.type))return void I.paste(Z,this.currentLayer);let C=g.getData("application/pdfjs");if(!C)return;try{C=JSON.parse(C)}catch(l){return void lA(`paste: "${l.message}".`)}if(!Array.isArray(C))return;this.unselectAll();const A=this.currentLayer;try{const I=[];for(const Z of C){const g=await A.deserialize(Z);if(!g)return;I.push(g)}const g=()=>{for(const g of I)U(this,zZ,ld).call(this,g);U(this,zZ,Bd).call(this,I)},l=()=>{for(const g of I)g.remove()};this.addCommands({cmd:g,undo:l,mustExec:!0})}catch(l){lA(`paste: "${l.message}".`)}}keydown(g){!this.isShiftKeyDown&&"Shift"===g.key&&(this.isShiftKeyDown=!0),W(this,MZ)!==jC.NONE&&!this.isEditorHandlingKeyboard&&I._keyboardManager.exec(this,g)}keyup(I){this.isShiftKeyDown&&"Shift"===I.key&&(this.isShiftKeyDown=!1,W(this,NZ)&&(R(this,NZ,!1),U(this,zZ,xZ).call(this,"main_toolbar")))}onEditingAction({name:I}){switch(I){case"undo":case"redo":case"delete":case"selectAll":this[I]();break;case"highlightSelection":this.highlightSelection("context_menu");break}}setEditingState(I){I?(U(this,zZ,rZ).call(this),U(this,zZ,_Z).call(this),U(this,zZ,Id).call(this,{isEditing:W(this,MZ)!==jC.NONE,isEmpty:U(this,zZ,dd).call(this),hasSomethingToUndo:W(this,ZZ).hasSomethingToUndo(),hasSomethingToRedo:W(this,ZZ).hasSomethingToRedo(),hasSelectedEditor:!1})):(U(this,zZ,vZ).call(this),U(this,zZ,qZ).call(this),U(this,zZ,Id).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(I){if(!W(this,GZ)){R(this,GZ,I);for(const I of W(this,GZ))U(this,zZ,gd).call(this,I.defaultPropertiesToUpdate)}}getId(){return W(this,nZ).id}get currentLayer(){return W(this,gZ).get(W(this,FZ))}getLayer(I){return W(this,gZ).get(I)}get currentPageIndex(){return W(this,FZ)}addLayer(I){W(this,gZ).set(I.pageIndex,I),W(this,aZ)?I.enable():I.disable()}removeLayer(I){W(this,gZ).delete(I.pageIndex)}async updateMode(I,g=null,C=!1){var A;if(W(this,MZ)!==I&&(!W(this,KZ)||(await W(this,KZ).promise,W(this,KZ)))){if(R(this,KZ,Promise.withResolvers()),R(this,MZ,I),I===jC.NONE)return this.setEditingState(!1),U(this,zZ,Ad).call(this),null==(A=this._editorUndoBar)||A.hide(),void W(this,KZ).resolve();this.setEditingState(!0),await U(this,zZ,Cd).call(this),this.unselectAll();for(const g of W(this,gZ).values())g.updateMode(I);if(!g)return C&&this.addNewEditorFromKeyboard(),void W(this,KZ).resolve();for(const I of W(this,IZ).values())I.annotationElementId===g?(this.setSelected(I),I.enterInEditMode()):I.unselect();W(this,KZ).resolve()}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(I){I!==W(this,MZ)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:I})}updateParams(I,g){var C;if(W(this,GZ)){switch(I){case xC.CREATE:return void this.currentLayer.addNewEditor();case xC.HIGHLIGHT_DEFAULT_COLOR:null==(C=W(this,SZ))||C.updateColor(g);break;case xC.HIGHLIGHT_SHOW_ALL:this._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:{type:"highlight",action:"toggle_visibility"}}}),(W(this,HZ)||R(this,HZ,new Map)).set(I,g),this.showAllEditors("highlight",g);break}for(const C of W(this,DZ))C.updateParams(I,g);for(const C of W(this,GZ))C.updateDefaultParams(I,g)}}showAllEditors(I,g,C=!1){var A;for(const l of W(this,IZ).values())l.editorType===I&&l.show(g);((null==(A=W(this,HZ))?void 0:A.get(xC.HIGHLIGHT_SHOW_ALL))??!0)!==g&&U(this,zZ,gd).call(this,[[xC.HIGHLIGHT_SHOW_ALL,g]])}enableWaiting(I=!1){if(W(this,oZ)!==I){R(this,oZ,I);for(const g of W(this,gZ).values())I?g.disableClick():g.enableClick(),g.div.classList.toggle("waiting",I)}}getEditors(I){const g=[];for(const C of W(this,IZ).values())C.pageIndex===I&&g.push(C);return g}getEditor(I){return W(this,IZ).get(I)}addEditor(I){W(this,IZ).set(I.id,I)}removeEditor(I){var g;I.div.contains(document.activeElement)&&(W(this,sZ)&&clearTimeout(W(this,sZ)),R(this,sZ,setTimeout((()=>{this.focusMainContainer(),R(this,sZ,null)}),0))),W(this,IZ).delete(I.id),this.unselect(I),(!I.annotationElementId||!W(this,iZ).has(I.annotationElementId))&&(null==(g=W(this,AZ))||g.remove(I.id))}addDeletedAnnotationElement(I){W(this,iZ).add(I.annotationElementId),this.addChangedExistingAnnotation(I),I.deleted=!0}isDeletedAnnotationElement(I){return W(this,iZ).has(I)}removeDeletedAnnotationElement(I){W(this,iZ).delete(I.annotationElementId),this.removeChangedExistingAnnotation(I),I.deleted=!1}setActiveEditor(I){W(this,$l)!==I&&(R(this,$l,I),I&&U(this,zZ,gd).call(this,I.propertiesToUpdate))}updateUI(I){W(this,zZ,Zd)===I&&U(this,zZ,gd).call(this,I.propertiesToUpdate)}updateUIForDefaultProperties(I){U(this,zZ,gd).call(this,I.defaultPropertiesToUpdate)}toggleSelected(I){if(W(this,DZ).has(I))return W(this,DZ).delete(I),I.unselect(),void U(this,zZ,Id).call(this,{hasSelectedEditor:this.hasSelection});W(this,DZ).add(I),I.select(),U(this,zZ,gd).call(this,I.propertiesToUpdate),U(this,zZ,Id).call(this,{hasSelectedEditor:!0})}setSelected(I){var g;null==(g=W(this,BZ))||g.commitOrRemove();for(const C of W(this,DZ))C!==I&&C.unselect();W(this,DZ).clear(),W(this,DZ).add(I),I.select(),U(this,zZ,gd).call(this,I.propertiesToUpdate),U(this,zZ,Id).call(this,{hasSelectedEditor:!0})}isSelected(I){return W(this,DZ).has(I)}get firstSelectedEditor(){return W(this,DZ).values().next().value}unselect(I){I.unselect(),W(this,DZ).delete(I),U(this,zZ,Id).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return 0!==W(this,DZ).size}get isEnterHandled(){return 1===W(this,DZ).size&&this.firstSelectedEditor.isEnterHandled}undo(){var I;W(this,ZZ).undo(),U(this,zZ,Id).call(this,{hasSomethingToUndo:W(this,ZZ).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:U(this,zZ,dd).call(this)}),null==(I=this._editorUndoBar)||I.hide()}redo(){W(this,ZZ).redo(),U(this,zZ,Id).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:W(this,ZZ).hasSomethingToRedo(),isEmpty:U(this,zZ,dd).call(this)})}addCommands(I){W(this,ZZ).add(I),U(this,zZ,Id).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:U(this,zZ,dd).call(this)})}cleanUndoStack(I){W(this,ZZ).cleanType(I)}delete(){var I;this.commitOrRemove();const g=null==(I=this.currentLayer)?void 0:I.endDrawingSession(!0);if(!this.hasSelection&&!g)return;const C=g?[g]:[...W(this,DZ)],A=()=>{var I;null==(I=this._editorUndoBar)||I.show(l,1===C.length?C[0].editorType:C.length);for(const g of C)g.remove()},l=()=>{for(const I of C)U(this,zZ,ld).call(this,I)};this.addCommands({cmd:A,undo:l,mustExec:!0})}commitOrRemove(){var I;null==(I=W(this,$l))||I.commitOrRemove()}hasSomethingToControl(){return W(this,$l)||this.hasSelection}selectAll(){for(const I of W(this,DZ))I.commit();U(this,zZ,Bd).call(this,W(this,IZ).values())}unselectAll(){var I;if((!W(this,$l)||(W(this,$l).commitOrRemove(),W(this,MZ)===jC.NONE))&&(null==(I=W(this,BZ))||!I.commitOrRemove())&&this.hasSelection){for(const I of W(this,DZ))I.unselect();W(this,DZ).clear(),U(this,zZ,Id).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(I,g,C=!1){if(C||this.commitOrRemove(),!this.hasSelection)return;W(this,yZ)[0]+=I,W(this,yZ)[1]+=g;const[A,l]=W(this,yZ),Z=[...W(this,DZ)],d=1e3;W(this,uZ)&&clearTimeout(W(this,uZ)),R(this,uZ,setTimeout((()=>{R(this,uZ,null),W(this,yZ)[0]=W(this,yZ)[1]=0,this.addCommands({cmd:()=>{for(const I of Z)W(this,IZ).has(I.id)&&I.translateInPage(A,l)},undo:()=>{for(const I of Z)W(this,IZ).has(I.id)&&I.translateInPage(-A,-l)},mustExec:!1})}),d));for(const B of Z)B.translateInPage(I,g)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),R(this,cZ,new Map);for(const I of W(this,DZ))W(this,cZ).set(I,{savedX:I.x,savedY:I.y,savedPageIndex:I.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!W(this,cZ))return!1;this.disableUserSelect(!1);const I=W(this,cZ);R(this,cZ,null);let g=!1;for(const[{x:A,y:l,pageIndex:Z},d]of I)d.newX=A,d.newY=l,d.newPageIndex=Z,g||(g=A!==d.savedX||l!==d.savedY||Z!==d.savedPageIndex);if(!g)return!1;const C=(I,g,C,A)=>{if(W(this,IZ).has(I.id)){const l=W(this,gZ).get(A);l?I._setParentAndPosition(l,g,C):(I.pageIndex=A,I.x=g,I.y=C)}};return this.addCommands({cmd:()=>{for(const[g,{newX:A,newY:l,newPageIndex:Z}]of I)C(g,A,l,Z)},undo:()=>{for(const[g,{savedX:A,savedY:l,savedPageIndex:Z}]of I)C(g,A,l,Z)},mustExec:!0}),!0}dragSelectedEditors(I,g){if(W(this,cZ))for(const C of W(this,cZ).keys())C.drag(I,g)}rebuild(I){if(null===I.parent){const g=this.getLayer(I.pageIndex);g?(g.changeParent(I),g.addOrRebuild(I)):(this.addEditor(I),this.addToAnnotationStorage(I),I.rebuild())}else I.parent.addOrRebuild(I)}get isEditorHandlingKeyboard(){var I;return(null==(I=this.getActive())?void 0:I.shouldGetKeyboardEvents())||1===W(this,DZ).size&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(I){return W(this,$l)===I}getActive(){return W(this,$l)}getMode(){return W(this,MZ)}get imageManager(){return iA(this,"imageManager",new Tl)}getSelectionBoxes(I){if(!I)return null;const g=document.getSelection();for(let F=0,i=g.rangeCount;F<i;F++)if(!I.contains(g.getRangeAt(F).commonAncestorContainer))return null;const{x:C,y:A,width:l,height:Z}=I.getBoundingClientRect();let d;switch(I.getAttribute("data-main-rotation")){case"90":d=(I,g,d,B)=>({x:(g-A)/Z,y:1-(I+d-C)/l,width:B/Z,height:d/l});break;case"180":d=(I,g,d,B)=>({x:1-(I+d-C)/l,y:1-(g+B-A)/Z,width:d/l,height:B/Z});break;case"270":d=(I,g,d,B)=>({x:1-(g+B-A)/Z,y:(I-C)/l,width:B/Z,height:d/l});break;default:d=(I,g,d,B)=>({x:(I-C)/l,y:(g-A)/Z,width:d/l,height:B/Z});break}const B=[];for(let F=0,i=g.rangeCount;F<i;F++){const I=g.getRangeAt(F);if(!I.collapsed)for(const{x:g,y:C,width:A,height:l}of I.getClientRects())0===A||0===l||B.push(d(g,C,A,l))}return 0===B.length?null:B}addChangedExistingAnnotation({annotationElementId:I,id:g}){(W(this,lZ)||R(this,lZ,new Map)).set(I,g)}removeChangedExistingAnnotation({annotationElementId:I}){var g;null==(g=W(this,lZ))||g.delete(I)}renderAnnotationElement(I){var g;const C=null==(g=W(this,lZ))?void 0:g.get(I.data.id);if(!C)return;const A=W(this,AZ).getRawValue(C);A&&(W(this,MZ)===jC.NONE&&!A.hasBeenModified||A.renderAnnotationElement(I))}};ql=new WeakMap,$l=new WeakMap,IZ=new WeakMap,gZ=new WeakMap,CZ=new WeakMap,AZ=new WeakMap,lZ=new WeakMap,ZZ=new WeakMap,dZ=new WeakMap,BZ=new WeakMap,FZ=new WeakMap,iZ=new WeakMap,cZ=new WeakMap,GZ=new WeakMap,WZ=new WeakMap,VZ=new WeakMap,RZ=new WeakMap,UZ=new WeakMap,bZ=new WeakMap,sZ=new WeakMap,QZ=new WeakMap,mZ=new WeakMap,NZ=new WeakMap,hZ=new WeakMap,nZ=new WeakMap,aZ=new WeakMap,oZ=new WeakMap,wZ=new WeakMap,YZ=new WeakMap,SZ=new WeakMap,JZ=new WeakMap,MZ=new WeakMap,DZ=new WeakMap,tZ=new WeakMap,XZ=new WeakMap,HZ=new WeakMap,eZ=new WeakMap,yZ=new WeakMap,uZ=new WeakMap,pZ=new WeakMap,kZ=new WeakMap,KZ=new WeakMap,zZ=new WeakSet,TZ=function({anchorNode:I}){return I.nodeType===Node.TEXT_NODE?I.parentElement:I},LZ=function(I){const{currentLayer:g}=this;if(g.hasTextLayer(I))return g;for(const C of W(this,gZ).values())if(C.hasTextLayer(I))return C;return null},EZ=function(){const I=document.getSelection();if(!I||I.isCollapsed)return;const g=U(this,zZ,TZ).call(this,I).closest(".textLayer"),C=this.getSelectionBoxes(g);C&&(W(this,hZ)||R(this,hZ,new pl(this)),W(this,hZ).show(g,C,"ltr"===this.direction))},jZ=function(){var I,g,C;const A=document.getSelection();if(!A||A.isCollapsed)return void(W(this,tZ)&&(null==(I=W(this,hZ))||I.hide(),R(this,tZ,null),U(this,zZ,Id).call(this,{hasSelectedText:!1})));const{anchorNode:l}=A;if(l===W(this,tZ))return;const Z=U(this,zZ,TZ).call(this,A).closest(".textLayer");if(Z){if(null==(C=W(this,hZ))||C.hide(),R(this,tZ,l),U(this,zZ,Id).call(this,{hasSelectedText:!0}),(W(this,MZ)===jC.HIGHLIGHT||W(this,MZ)===jC.NONE)&&(W(this,MZ)===jC.HIGHLIGHT&&this.showAllEditors("highlight",!0,!0),R(this,NZ,this.isShiftKeyDown),!this.isShiftKeyDown)){const I=W(this,MZ)===jC.HIGHLIGHT?U(this,zZ,LZ).call(this,Z):null;null==I||I.toggleDrawing();const g=new AbortController,C=this.combinedSignal(g),A=C=>{"pointerup"===C.type&&0!==C.button||(g.abort(),null==I||I.toggleDrawing(!0),"pointerup"===C.type&&U(this,zZ,xZ).call(this,"main_toolbar"))};window.addEventListener("pointerup",A,{signal:C}),window.addEventListener("blur",A,{signal:C})}}else W(this,tZ)&&(null==(g=W(this,hZ))||g.hide(),R(this,tZ,null),U(this,zZ,Id).call(this,{hasSelectedText:!1}))},xZ=function(I=""){W(this,MZ)===jC.HIGHLIGHT?this.highlightSelection(I):W(this,VZ)&&U(this,zZ,EZ).call(this)},OZ=function(){document.addEventListener("selectionchange",U(this,zZ,jZ).bind(this),{signal:this._signal})},rZ=function(){if(W(this,QZ))return;R(this,QZ,new AbortController);const I=this.combinedSignal(W(this,QZ));window.addEventListener("focus",this.focus.bind(this),{signal:I}),window.addEventListener("blur",this.blur.bind(this),{signal:I})},vZ=function(){var I;null==(I=W(this,QZ))||I.abort(),R(this,QZ,null)},PZ=function(){if(W(this,wZ))return;R(this,wZ,new AbortController);const I=this.combinedSignal(W(this,wZ));window.addEventListener("keydown",this.keydown.bind(this),{signal:I}),window.addEventListener("keyup",this.keyup.bind(this),{signal:I})},fZ=function(){var I;null==(I=W(this,wZ))||I.abort(),R(this,wZ,null)},_Z=function(){if(W(this,dZ))return;R(this,dZ,new AbortController);const I=this.combinedSignal(W(this,dZ));document.addEventListener("copy",this.copy.bind(this),{signal:I}),document.addEventListener("cut",this.cut.bind(this),{signal:I}),document.addEventListener("paste",this.paste.bind(this),{signal:I})},qZ=function(){var I;null==(I=W(this,dZ))||I.abort(),R(this,dZ,null)},$Z=function(){const I=this._signal;document.addEventListener("dragover",this.dragOver.bind(this),{signal:I}),document.addEventListener("drop",this.drop.bind(this),{signal:I})},Id=function(I){Object.entries(I).some((([I,g])=>W(this,eZ)[I]!==g))&&(this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(W(this,eZ),I)}),W(this,MZ)===jC.HIGHLIGHT&&!1===I.hasSelectedEditor&&U(this,zZ,gd).call(this,[[xC.HIGHLIGHT_FREE,!0]]))},gd=function(I){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:I})},Cd=async function(){if(!W(this,aZ)){R(this,aZ,!0);const I=[];for(const g of W(this,gZ).values())I.push(g.enable());await Promise.all(I);for(const g of W(this,IZ).values())g.enable()}},Ad=function(){if(this.unselectAll(),W(this,aZ)){R(this,aZ,!1);for(const I of W(this,gZ).values())I.disable();for(const I of W(this,IZ).values())I.disable()}},ld=function(I){const g=W(this,gZ).get(I.pageIndex);g?g.addOrRebuild(I):(this.addEditor(I),this.addToAnnotationStorage(I))},Zd=function(){let I=null;for(I of W(this,DZ));return I},dd=function(){if(0===W(this,IZ).size)return!0;if(1===W(this,IZ).size)for(const I of W(this,IZ).values())return I.isEmpty();return!1},Bd=function(I){for(const g of W(this,DZ))g.unselect();W(this,DZ).clear();for(const g of I)g.isEmpty()||(W(this,DZ).add(g),g.select());U(this,zZ,Id).call(this,{hasSelectedEditor:this.hasSelection})},c(Fd,"TRANSLATE_SMALL",1),c(Fd,"TRANSLATE_BIG",10);let id=Fd;var cd,Gd,Wd,Vd,Rd,Ud,bd,sd,Qd,md,Nd,hd,nd,ad,od,wd;const Yd=class I{constructor(g){V(this,ad),V(this,cd,null),V(this,Gd,!1),V(this,Wd,null),V(this,Vd,null),V(this,Rd,null),V(this,Ud,null),V(this,bd,!1),V(this,sd,null),V(this,Qd,null),V(this,md,null),V(this,Nd,null),V(this,hd,!1),R(this,Qd,g),R(this,hd,g._uiManager.useNewAltTextFlow),W(I,nd)||R(I,nd,Object.freeze({added:"pdfjs-editor-new-alt-text-added-button","added-label":"pdfjs-editor-new-alt-text-added-button-label",missing:"pdfjs-editor-new-alt-text-missing-button","missing-label":"pdfjs-editor-new-alt-text-missing-button-label",review:"pdfjs-editor-new-alt-text-to-review-button","review-label":"pdfjs-editor-new-alt-text-to-review-button-label"}))}static initialize(g){I._l10n??(I._l10n=g)}async render(){const g=R(this,Wd,document.createElement("button"));g.className="altText",g.tabIndex="0";const C=R(this,Vd,document.createElement("span"));g.append(C),W(this,hd)?(g.classList.add("new"),g.setAttribute("data-l10n-id",W(I,nd).missing),C.setAttribute("data-l10n-id",W(I,nd)["missing-label"])):(g.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button"),C.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button-label"));const A=W(this,Qd)._uiManager._signal;g.addEventListener("contextmenu",fA,{signal:A}),g.addEventListener("pointerdown",(I=>I.stopPropagation()),{signal:A});const l=I=>{I.preventDefault(),W(this,Qd)._uiManager.editAltText(W(this,Qd)),W(this,hd)&&W(this,Qd)._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_clicked",data:{label:W(this,ad,od)}})};return g.addEventListener("click",l,{capture:!0,signal:A}),g.addEventListener("keydown",(I=>{I.target===g&&"Enter"===I.key&&(R(this,bd,!0),l(I))}),{signal:A}),await U(this,ad,wd).call(this),g}finish(){W(this,Wd)&&(W(this,Wd).focus({focusVisible:W(this,bd)}),R(this,bd,!1))}isEmpty(){return W(this,hd)?null===W(this,cd):!W(this,cd)&&!W(this,Gd)}hasData(){return W(this,hd)?null!==W(this,cd)||!!W(this,md):this.isEmpty()}get guessedText(){return W(this,md)}async setGuessedText(g){null===W(this,cd)&&(R(this,md,g),R(this,Nd,await I._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer",{generatedAltText:g})),U(this,ad,wd).call(this))}toggleAltTextBadge(I=!1){var g;if(!W(this,hd)||W(this,cd))return null==(g=W(this,sd))||g.remove(),void R(this,sd,null);if(!W(this,sd)){const I=R(this,sd,document.createElement("div"));I.className="noAltTextBadge",W(this,Qd).div.append(I)}W(this,sd).classList.toggle("hidden",!I)}serialize(I){let g=W(this,cd);return!I&&W(this,md)===g&&(g=W(this,Nd)),{altText:g,decorative:W(this,Gd),guessedText:W(this,md),textWithDisclaimer:W(this,Nd)}}get data(){return{altText:W(this,cd),decorative:W(this,Gd)}}set data({altText:I,decorative:g,guessedText:C,textWithDisclaimer:A,cancel:l=!1}){C&&(R(this,md,C),R(this,Nd,A)),(W(this,cd)!==I||W(this,Gd)!==g)&&(l||(R(this,cd,I),R(this,Gd,g)),U(this,ad,wd).call(this))}toggle(I=!1){W(this,Wd)&&(!I&&W(this,Ud)&&(clearTimeout(W(this,Ud)),R(this,Ud,null)),W(this,Wd).disabled=!I)}shown(){W(this,Qd)._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_displayed",data:{label:W(this,ad,od)}})}destroy(){var I,g;null==(I=W(this,Wd))||I.remove(),R(this,Wd,null),R(this,Vd,null),R(this,Rd,null),null==(g=W(this,sd))||g.remove(),R(this,sd,null)}};cd=new WeakMap,Gd=new WeakMap,Wd=new WeakMap,Vd=new WeakMap,Rd=new WeakMap,Ud=new WeakMap,bd=new WeakMap,sd=new WeakMap,Qd=new WeakMap,md=new WeakMap,Nd=new WeakMap,hd=new WeakMap,nd=new WeakMap,ad=new WeakSet,od=function(){return(W(this,cd)?"added":null===W(this,cd)&&this.guessedText&&"review")||"missing"},wd=async function(){var I,g,C;const A=W(this,Wd);if(!A)return;if(W(this,hd)){if(A.classList.toggle("done",!!W(this,cd)),A.setAttribute("data-l10n-id",W(Yd,nd)[W(this,ad,od)]),null==(I=W(this,Vd))||I.setAttribute("data-l10n-id",W(Yd,nd)[`${W(this,ad,od)}-label`]),!W(this,cd))return void(null==(g=W(this,Rd))||g.remove())}else{if(!W(this,cd)&&!W(this,Gd))return A.classList.remove("done"),void(null==(C=W(this,Rd))||C.remove());A.classList.add("done"),A.setAttribute("data-l10n-id","pdfjs-editor-alt-text-edit-button")}let l=W(this,Rd);if(!l){R(this,Rd,l=document.createElement("span")),l.className="tooltip",l.setAttribute("role","tooltip"),l.id=`alt-text-tooltip-${W(this,Qd).id}`;const I=100,g=W(this,Qd)._uiManager._signal;g.addEventListener("abort",(()=>{clearTimeout(W(this,Ud)),R(this,Ud,null)}),{once:!0}),A.addEventListener("mouseenter",(()=>{R(this,Ud,setTimeout((()=>{R(this,Ud,null),W(this,Rd).classList.add("show"),W(this,Qd)._reportTelemetry({action:"alt_text_tooltip"})}),I))}),{signal:g}),A.addEventListener("mouseleave",(()=>{var I;W(this,Ud)&&(clearTimeout(W(this,Ud)),R(this,Ud,null)),null==(I=W(this,Rd))||I.classList.remove("show")}),{signal:g})}W(this,Gd)?l.setAttribute("data-l10n-id","pdfjs-editor-alt-text-decorative-tooltip"):(l.removeAttribute("data-l10n-id"),l.textContent=W(this,cd)),l.parentNode||A.append(l);const Z=W(this,Qd).getImageForAltText();null==Z||Z.setAttribute("aria-describedby",l.id)},V(Yd,nd,null),c(Yd,"_l10n",null);let Sd=Yd;var Jd,Md,Dd,td,Xd,Hd,ed,yd,ud,pd,kd,Kd,zd,Td,Ld,Ed,jd,xd,Od,rd,vd,Pd,fd,_d,qd,$d,IB,gB,CB,AB,lB,ZB,dB,BB,FB,iB,cB,GB,WB,VB,RB;const UB=class I{constructor(g){V(this,_d),V(this,Jd,null),V(this,Md,null),V(this,Dd,null),V(this,td,!1),V(this,Xd,null),V(this,Hd,""),V(this,ed,!1),V(this,yd,null),V(this,ud,null),V(this,pd,null),V(this,kd,null),V(this,Kd,""),V(this,zd,!1),V(this,Td,null),V(this,Ld,!1),V(this,Ed,!1),V(this,jd,!1),V(this,xd,null),V(this,Od,0),V(this,rd,0),V(this,vd,null),c(this,"_editToolbar",null),c(this,"_initialOptions",Object.create(null)),c(this,"_initialData",null),c(this,"_isVisible",!0),c(this,"_uiManager",null),c(this,"_focusEventsAllowed",!0),V(this,Pd,!1),V(this,fd,I._zIndex++),this.parent=g.parent,this.id=g.id,this.width=this.height=null,this.pageIndex=g.parent.pageIndex,this.name=g.name,this.div=null,this._uiManager=g.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=g.isCentered,this._structTreeParentId=null;const{rotation:C,rawDims:{pageWidth:A,pageHeight:l,pageX:Z,pageY:d}}=this.parent.viewport;this.rotation=C,this.pageRotation=(360+C-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[A,l],this.pageTranslation=[Z,d];const[B,F]=this.parentDimensions;this.x=g.x/B,this.y=g.y/F,this.isAttachedToDOM=!1,this.deleted=!1}static get _resizerKeyboardManager(){const g=I.prototype._resizeWithKeyboard,C=id.TRANSLATE_SMALL,A=id.TRANSLATE_BIG;return iA(this,"_resizerKeyboardManager",new Pl([[["ArrowLeft","mac+ArrowLeft"],g,{args:[-C,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],g,{args:[-A,0]}],[["ArrowRight","mac+ArrowRight"],g,{args:[C,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],g,{args:[A,0]}],[["ArrowUp","mac+ArrowUp"],g,{args:[0,-C]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],g,{args:[0,-A]}],[["ArrowDown","mac+ArrowDown"],g,{args:[0,C]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],g,{args:[0,A]}],[["Escape","mac+Escape"],I.prototype._stopResizingWithKeyboard]]))}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get isDrawer(){return!1}static get _defaultLineColor(){return iA(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(I){const g=new sB({id:I.parent.getNextId(),parent:I.parent,uiManager:I._uiManager});g.annotationElementId=I.annotationElementId,g.deleted=!0,g._uiManager.addToAnnotationStorage(g)}static initialize(g,C){if(I._l10n??(I._l10n=g),I._l10nResizer||(I._l10nResizer=Object.freeze({topLeft:"pdfjs-editor-resizer-top-left",topMiddle:"pdfjs-editor-resizer-top-middle",topRight:"pdfjs-editor-resizer-top-right",middleRight:"pdfjs-editor-resizer-middle-right",bottomRight:"pdfjs-editor-resizer-bottom-right",bottomMiddle:"pdfjs-editor-resizer-bottom-middle",bottomLeft:"pdfjs-editor-resizer-bottom-left",middleLeft:"pdfjs-editor-resizer-middle-left"})),-1!==I._borderLineWidth)return;const A=getComputedStyle(document.documentElement);I._borderLineWidth=parseFloat(A.getPropertyValue("--outline-width"))||0}static updateDefaultParams(I,g){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(I){return!1}static paste(I,g){ZA("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return W(this,Pd)}set _isDraggable(I){var g;R(this,Pd,I),null==(g=this.div)||g.classList.toggle("draggable",I)}get isEnterHandled(){return!0}center(){const[I,g]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*g/(2*I),this.y+=this.width*I/(2*g);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*g/(2*I),this.y-=this.width*I/(2*g);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(I){this._uiManager.addCommands(I)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=W(this,fd)}setParent(I){null!==I?(this.pageIndex=I.pageIndex,this.pageDimensions=I.pageDimensions):U(this,_d,RB).call(this),this.parent=I}focusin(I){this._focusEventsAllowed&&(W(this,zd)?R(this,zd,!1):this.parent.setSelected(this))}focusout(I){var g;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const C=I.relatedTarget;null!=C&&C.closest(`#${this.id}`)||(I.preventDefault(),null!=(g=this.parent)&&g.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(I,g,C,A){const[l,Z]=this.parentDimensions;[C,A]=this.screenToPageTranslation(C,A),this.x=(I+C)/l,this.y=(g+A)/Z,this.fixAndSetPosition()}translate(I,g){U(this,_d,qd).call(this,this.parentDimensions,I,g)}translateInPage(I,g){W(this,Td)||R(this,Td,[this.x,this.y,this.width,this.height]),U(this,_d,qd).call(this,this.pageDimensions,I,g),this.div.scrollIntoView({block:"nearest"})}drag(I,g){W(this,Td)||R(this,Td,[this.x,this.y,this.width,this.height]);const{div:C,parentDimensions:[A,l]}=this;if(this.x+=I/A,this.y+=g/l,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:I,y:g}=this.div.getBoundingClientRect();this.parent.findNewParent(this,I,g)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:Z,y:d}=this;const[B,F]=this.getBaseTranslation();Z+=B,d+=F;const{style:i}=C;i.left=`${(100*Z).toFixed(2)}%`,i.top=`${(100*d).toFixed(2)}%`,this._onTranslating(Z,d),C.scrollIntoView({block:"nearest"})}_onTranslating(I,g){}_onTranslated(I,g){}get _hasBeenMoved(){return!!W(this,Td)&&(W(this,Td)[0]!==this.x||W(this,Td)[1]!==this.y)}get _hasBeenResized(){return!!W(this,Td)&&(W(this,Td)[2]!==this.width||W(this,Td)[3]!==this.height)}getBaseTranslation(){const[g,C]=this.parentDimensions,{_borderLineWidth:A}=I,l=A/g,Z=A/C;switch(this.rotation){case 90:return[-l,Z];case 180:return[l,Z];case 270:return[l,-Z];default:return[-l,-Z]}}get _mustFixPosition(){return!0}fixAndSetPosition(I=this.rotation){const{div:{style:g},pageDimensions:[C,A]}=this;let{x:l,y:Z,width:d,height:B}=this;if(d*=C,B*=A,l*=C,Z*=A,this._mustFixPosition)switch(I){case 0:l=Math.max(0,Math.min(C-d,l)),Z=Math.max(0,Math.min(A-B,Z));break;case 90:l=Math.max(0,Math.min(C-B,l)),Z=Math.min(A,Math.max(d,Z));break;case 180:l=Math.min(C,Math.max(d,l)),Z=Math.min(A,Math.max(B,Z));break;case 270:l=Math.min(C,Math.max(B,l)),Z=Math.max(0,Math.min(A-d,Z));break}this.x=l/=C,this.y=Z/=A;const[F,i]=this.getBaseTranslation();l+=F,Z+=i,g.left=`${(100*l).toFixed(2)}%`,g.top=`${(100*Z).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(g,C){var A;return U(A=I,$d,IB).call(A,g,C,this.parentRotation)}pageTranslationToScreen(g,C){var A;return U(A=I,$d,IB).call(A,g,C,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:I,pageDimensions:[g,C]}=this;return[g*I,C*I]}setDims(I,g){const[C,A]=this.parentDimensions,{style:l}=this.div;l.width=`${(100*I/C).toFixed(2)}%`,W(this,ed)||(l.height=`${(100*g/A).toFixed(2)}%`)}fixDims(){const{style:I}=this.div,{height:g,width:C}=I,A=C.endsWith("%"),l=!W(this,ed)&&g.endsWith("%");if(A&&l)return;const[Z,d]=this.parentDimensions;A||(I.width=`${(100*parseFloat(C)/Z).toFixed(2)}%`),!W(this,ed)&&!l&&(I.height=`${(100*parseFloat(g)/d).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}_onResized(){}_onResizing(){}altTextFinish(){var I;null==(I=W(this,Dd))||I.finish()}async addEditToolbar(){return this._editToolbar||W(this,Ed)||(this._editToolbar=new al(this),this.div.append(this._editToolbar.render()),W(this,Dd)&&await this._editToolbar.addAltText(W(this,Dd))),this._editToolbar}removeEditToolbar(){var I;this._editToolbar&&(this._editToolbar.remove(),this._editToolbar=null,null==(I=W(this,Dd))||I.destroy())}addContainer(I){var g;const C=null==(g=this._editToolbar)?void 0:g.div;C?C.before(I):this.div.append(I)}getClientDimensions(){return this.div.getBoundingClientRect()}async addAltTextButton(){W(this,Dd)||(Sd.initialize(I._l10n),R(this,Dd,new Sd(this)),W(this,Jd)&&(W(this,Dd).data=W(this,Jd),R(this,Jd,null)),await this.addEditToolbar())}get altTextData(){var I;return null==(I=W(this,Dd))?void 0:I.data}set altTextData(I){W(this,Dd)&&(W(this,Dd).data=I)}get guessedAltText(){var I;return null==(I=W(this,Dd))?void 0:I.guessedText}async setGuessedAltText(I){var g;await(null==(g=W(this,Dd))?void 0:g.setGuessedText(I))}serializeAltText(I){var g;return null==(g=W(this,Dd))?void 0:g.serialize(I)}hasAltText(){return!!W(this,Dd)&&!W(this,Dd).isEmpty()}hasAltTextData(){var I;return(null==(I=W(this,Dd))?void 0:I.hasData())??!1}render(){var I;this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.tabIndex=W(this,td)?-1:0,this._isVisible||this.div.classList.add("hidden"),this.setInForeground(),U(this,_d,iB).call(this);const[g,C]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*C/g).toFixed(2)}%`,this.div.style.maxHeight=`${(100*g/C).toFixed(2)}%`);const[A,l]=this.getInitialTranslation();return this.translate(A,l),kl(this,this.div,["pointerdown"]),null==(I=this._uiManager._editorUndoBar)||I.hide(),this.div}pointerdown(I){const{isMac:g}=oA.platform;0!==I.button||I.ctrlKey&&g?I.preventDefault():(R(this,zd,!0),this._isDraggable?U(this,_d,FB).call(this,I):U(this,_d,BB).call(this,I))}get isSelected(){return this._uiManager.isSelected(this)}_onStartDragging(){}_onStopDragging(){}moveInDOM(){W(this,xd)&&clearTimeout(W(this,xd)),R(this,xd,setTimeout((()=>{var I;R(this,xd,null),null==(I=this.parent)||I.moveEditorInDOM(this)}),0))}_setParentAndPosition(I,g,C){I.changeParent(this),this.x=g,this.y=C,this.fixAndSetPosition(),this._onTranslated()}getRect(I,g,C=this.rotation){const A=this.parentScale,[l,Z]=this.pageDimensions,[d,B]=this.pageTranslation,F=I/A,i=g/A,c=this.x*l,G=this.y*Z,W=this.width*l,V=this.height*Z;switch(C){case 0:return[c+F+d,Z-G-i-V+B,c+F+W+d,Z-G-i+B];case 90:return[c+i+d,Z-G+F+B,c+i+V+d,Z-G+F+W+B];case 180:return[c-F-W+d,Z-G+i+B,c-F+d,Z-G+i+V+B];case 270:return[c-i-V+d,Z-G-F-W+B,c-i+d,Z-G-F+B];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(I,g){const[C,A,l,Z]=I,d=l-C,B=Z-A;switch(this.rotation){case 0:return[C,g-Z,d,B];case 90:return[C,g-A,B,d];case 180:return[l,g-A,d,B];case 270:return[l,g-Z,B,d];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){R(this,Ed,!0)}disableEditMode(){R(this,Ed,!1)}isInEditMode(){return W(this,Ed)}shouldGetKeyboardEvents(){return W(this,jd)}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}get isOnScreen(){const{top:I,left:g,bottom:C,right:A}=this.getClientDimensions(),{innerHeight:l,innerWidth:Z}=window;return g<Z&&A>0&&I<l&&C>0}rebuild(){U(this,_d,iB).call(this)}rotate(I){}resize(){}serializeDeleted(){var I;return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex,popupRef:(null==(I=this._initialData)?void 0:I.popupRef)||""}}serialize(I=!1,g=null){ZA("An editor must be serializable")}static async deserialize(I,g,C){const A=new this.prototype.constructor({parent:g,id:g.getNextId(),uiManager:C});A.rotation=I.rotation,R(A,Jd,I.accessibilityData);const[l,Z]=A.pageDimensions,[d,B,F,i]=A.getRectInCurrentCoords(I.rect,Z);return A.x=d/l,A.y=B/Z,A.width=F/l,A.height=i/Z,A}get hasBeenModified(){return!!this.annotationElementId&&(this.deleted||null!==this.serialize())}remove(){var I;if(null==(I=W(this,kd))||I.abort(),R(this,kd,null),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),W(this,xd)&&(clearTimeout(W(this,xd)),R(this,xd,null)),U(this,_d,RB).call(this),this.removeEditToolbar(),W(this,vd)){for(const I of W(this,vd).values())clearTimeout(I);R(this,vd,null)}this.parent=null}get isResizable(){return!1}makeResizable(){this.isResizable&&(U(this,_d,CB).call(this),W(this,yd).classList.remove("hidden"),kl(this,this.div,["keydown"]))}get toolbarPosition(){return null}keydown(g){if(!this.isResizable||g.target!==this.div||"Enter"!==g.key)return;this._uiManager.setSelected(this),R(this,pd,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height});const C=W(this,yd).children;if(!W(this,Md)){R(this,Md,Array.from(C));const g=U(this,_d,cB).bind(this),A=U(this,_d,GB).bind(this),l=this._uiManager._signal;for(const C of W(this,Md)){const Z=C.getAttribute("data-resizer-name");C.setAttribute("role","spinbutton"),C.addEventListener("keydown",g,{signal:l}),C.addEventListener("blur",A,{signal:l}),C.addEventListener("focus",U(this,_d,WB).bind(this,Z),{signal:l}),C.setAttribute("data-l10n-id",I._l10nResizer[Z])}}const A=W(this,Md)[0];let l=0;for(const I of C){if(I===A)break;l++}const Z=(360-this.rotation+this.parentRotation)%360/90*(W(this,Md).length/4);if(Z!==l){if(Z<l)for(let I=0;I<l-Z;I++)W(this,yd).append(W(this,yd).firstChild);else if(Z>l)for(let I=0;I<Z-l;I++)W(this,yd).firstChild.before(W(this,yd).lastChild);let g=0;for(const A of C){const C=W(this,Md)[g++].getAttribute("data-resizer-name");A.setAttribute("data-l10n-id",I._l10nResizer[C])}}U(this,_d,VB).call(this,0),R(this,jd,!0),W(this,yd).firstChild.focus({focusVisible:!0}),g.preventDefault(),g.stopImmediatePropagation()}_resizeWithKeyboard(I,g){W(this,jd)&&U(this,_d,dB).call(this,W(this,Kd),{deltaX:I,deltaY:g,fromKeyboard:!0})}_stopResizingWithKeyboard(){U(this,_d,RB).call(this),this.div.focus()}select(){var I,g,C;this.makeResizable(),null==(I=this.div)||I.classList.add("selectedEditor"),this._editToolbar?(null==(g=this._editToolbar)||g.show(),null==(C=W(this,Dd))||C.toggleAltTextBadge(!1)):this.addEditToolbar().then((()=>{var I,g;null!=(I=this.div)&&I.classList.contains("selectedEditor")&&(null==(g=this._editToolbar)||g.show())}))}unselect(){var I,g,C,A,l;null==(I=W(this,yd))||I.classList.add("hidden"),null==(g=this.div)||g.classList.remove("selectedEditor"),null!=(C=this.div)&&C.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus({preventScroll:!0}),null==(A=this._editToolbar)||A.hide(),null==(l=W(this,Dd))||l.toggleAltTextBadge(!0)}updateParams(I,g){}disableEditing(){}enableEditing(){}enterInEditMode(){}getImageForAltText(){return null}get contentDiv(){return this.div}get isEditing(){return W(this,Ld)}set isEditing(I){R(this,Ld,I),this.parent&&(I?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(I,g){R(this,ed,!0);const C=I/g,{style:A}=this.div;A.aspectRatio=C,A.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}get telemetryInitialData(){return{action:"added"}}get telemetryFinalData(){return null}_reportTelemetry(g,C=!1){if(C){W(this,vd)||R(this,vd,new Map);const{action:C}=g;let A=W(this,vd).get(C);return A&&clearTimeout(A),A=setTimeout((()=>{this._reportTelemetry(g),W(this,vd).delete(C),0===W(this,vd).size&&R(this,vd,null)}),I._telemetryTimeout),void W(this,vd).set(C,A)}g.type||(g.type=this.editorType),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:g}})}show(I=this._isVisible){this.div.classList.toggle("hidden",!I),this._isVisible=I}enable(){this.div&&(this.div.tabIndex=0),R(this,td,!1)}disable(){this.div&&(this.div.tabIndex=-1),R(this,td,!0)}renderAnnotationElement(I){let g=I.container.querySelector(".annotationContent");if(g){if("CANVAS"===g.nodeName){const I=g;g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),I.before(g)}}else g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),I.container.prepend(g);return g}resetAnnotationElement(I){const{firstChild:g}=I.container;"DIV"===(null==g?void 0:g.nodeName)&&g.classList.contains("annotationContent")&&g.remove()}};Jd=new WeakMap,Md=new WeakMap,Dd=new WeakMap,td=new WeakMap,Xd=new WeakMap,Hd=new WeakMap,ed=new WeakMap,yd=new WeakMap,ud=new WeakMap,pd=new WeakMap,kd=new WeakMap,Kd=new WeakMap,zd=new WeakMap,Td=new WeakMap,Ld=new WeakMap,Ed=new WeakMap,jd=new WeakMap,xd=new WeakMap,Od=new WeakMap,rd=new WeakMap,vd=new WeakMap,Pd=new WeakMap,fd=new WeakMap,_d=new WeakSet,qd=function([I,g],C,A){[C,A]=this.screenToPageTranslation(C,A),this.x+=C/I,this.y+=A/g,this._onTranslating(this.x,this.y),this.fixAndSetPosition()},$d=new WeakSet,IB=function(I,g,C){switch(C){case 90:return[g,-I];case 180:return[-I,-g];case 270:return[-g,I];default:return[I,g]}},gB=function(I){switch(I){case 90:{const[I,g]=this.pageDimensions;return[0,-I/g,g/I,0]}case 180:return[-1,0,0,-1];case 270:{const[I,g]=this.pageDimensions;return[0,I/g,-g/I,0]}default:return[1,0,0,1]}},CB=function(){if(W(this,yd))return;R(this,yd,document.createElement("div")),W(this,yd).classList.add("resizers");const I=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"],g=this._uiManager._signal;for(const C of I){const I=document.createElement("div");W(this,yd).append(I),I.classList.add("resizer",C),I.setAttribute("data-resizer-name",C),I.addEventListener("pointerdown",U(this,_d,AB).bind(this,C),{signal:g}),I.addEventListener("contextmenu",fA,{signal:g}),I.tabIndex=-1}this.div.prepend(W(this,yd))},AB=function(I,g){var C;g.preventDefault();const{isMac:A}=oA.platform;if(0!==g.button||g.ctrlKey&&A)return;null==(C=W(this,Dd))||C.toggle(!1);const l=this._isDraggable;this._isDraggable=!1,R(this,ud,[g.screenX,g.screenY]);const Z=new AbortController,d=this._uiManager.combinedSignal(Z);this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",U(this,_d,dB).bind(this,I),{passive:!0,capture:!0,signal:d}),window.addEventListener("touchmove",_A,{passive:!1,signal:d}),window.addEventListener("contextmenu",fA,{signal:d}),R(this,pd,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height});const B=this.parent.div.style.cursor,F=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(g.target).cursor;const i=()=>{var I;Z.abort(),this.parent.togglePointerEvents(!0),null==(I=W(this,Dd))||I.toggle(!0),this._isDraggable=l,this.parent.div.style.cursor=B,this.div.style.cursor=F,U(this,_d,ZB).call(this)};window.addEventListener("pointerup",i,{signal:d}),window.addEventListener("blur",i,{signal:d})},lB=function(I,g,C,A){this.width=C,this.height=A,this.x=I,this.y=g;const[l,Z]=this.parentDimensions;this.setDims(l*C,Z*A),this.fixAndSetPosition(),this._onResized()},ZB=function(){if(!W(this,pd))return;const{savedX:I,savedY:g,savedWidth:C,savedHeight:A}=W(this,pd);R(this,pd,null);const l=this.x,Z=this.y,d=this.width,B=this.height;l===I&&Z===g&&d===C&&B===A||this.addCommands({cmd:U(this,_d,lB).bind(this,l,Z,d,B),undo:U(this,_d,lB).bind(this,I,g,C,A),mustExec:!0})},dB=function(I,g){const[C,A]=this.parentDimensions,l=this.x,Z=this.y,d=this.width,B=this.height,F=UB.MIN_SIZE/C,i=UB.MIN_SIZE/A,c=I=>Math.round(1e4*I)/1e4,G=U(this,_d,gB).call(this,this.rotation),V=(I,g)=>[G[0]*I+G[2]*g,G[1]*I+G[3]*g],b=U(this,_d,gB).call(this,360-this.rotation),s=(I,g)=>[b[0]*I+b[2]*g,b[1]*I+b[3]*g];let Q,m,N=!1,h=!1;switch(I){case"topLeft":N=!0,Q=(I,g)=>[0,0],m=(I,g)=>[I,g];break;case"topMiddle":Q=(I,g)=>[I/2,0],m=(I,g)=>[I/2,g];break;case"topRight":N=!0,Q=(I,g)=>[I,0],m=(I,g)=>[0,g];break;case"middleRight":h=!0,Q=(I,g)=>[I,g/2],m=(I,g)=>[0,g/2];break;case"bottomRight":N=!0,Q=(I,g)=>[I,g],m=(I,g)=>[0,0];break;case"bottomMiddle":Q=(I,g)=>[I/2,g],m=(I,g)=>[I/2,0];break;case"bottomLeft":N=!0,Q=(I,g)=>[0,g],m=(I,g)=>[I,0];break;case"middleLeft":h=!0,Q=(I,g)=>[0,g/2],m=(I,g)=>[I,g/2];break}const n=Q(d,B),a=m(d,B);let o=V(...a);const w=c(l+o[0]),Y=c(Z+o[1]);let S,J,M=1,D=1;if(g.fromKeyboard)({deltaX:S,deltaY:J}=g);else{const{screenX:I,screenY:C}=g,[A,l]=W(this,ud);[S,J]=this.screenToPageTranslation(I-A,C-l),W(this,ud)[0]=I,W(this,ud)[1]=C}if([S,J]=s(S/C,J/A),N){const I=Math.hypot(d,B);M=D=Math.max(Math.min(Math.hypot(a[0]-n[0]-S,a[1]-n[1]-J)/I,1/d,1/B),F/d,i/B)}else h?M=Math.max(F,Math.min(1,Math.abs(a[0]-n[0]-S)))/d:D=Math.max(i,Math.min(1,Math.abs(a[1]-n[1]-J)))/B;const t=c(d*M),X=c(B*D);o=V(...m(t,X));const H=w-o[0],e=Y-o[1];W(this,Td)||R(this,Td,[this.x,this.y,this.width,this.height]),this.width=t,this.height=X,this.x=H,this.y=e,this.setDims(C*t,A*X),this.fixAndSetPosition(),this._onResizing()},BB=function(I){const{isMac:g}=oA.platform;I.ctrlKey&&!g||I.shiftKey||I.metaKey&&g?this.parent.toggleSelected(this):this.parent.setSelected(this)},FB=function(I){const{isSelected:g}=this;this._uiManager.setUpDragSession();const C=new AbortController,A=this._uiManager.combinedSignal(C),l={capture:!0,passive:!1,signal:A},Z=I=>{C.abort(),R(this,Xd,null),R(this,zd,!1),this._uiManager.endDragSession()||U(this,_d,BB).call(this,I)};g&&(R(this,Od,I.clientX),R(this,rd,I.clientY),R(this,Xd,I.pointerId),R(this,Hd,I.pointerType),window.addEventListener("pointermove",(I=>{const{clientX:g,clientY:C,pointerId:A}=I;if(A!==W(this,Xd))return void _A(I);const[l,Z]=this.screenToPageTranslation(g-W(this,Od),C-W(this,rd));R(this,Od,g),R(this,rd,C),this._uiManager.dragSelectedEditors(l,Z)}),l),window.addEventListener("touchmove",_A,l),window.addEventListener("pointerdown",(I=>{I.isPrimary&&I.pointerType===W(this,Hd)&&Z(I),_A(I)}),l)),this._onStartDragging();const d=I=>{if(!W(this,Xd)||W(this,Xd)===I.pointerId)return Z(I),void this._onStopDragging();_A(I)};window.addEventListener("pointerup",d,{signal:A}),window.addEventListener("blur",d,{signal:A})},iB=function(){if(W(this,kd)||!this.div)return;R(this,kd,new AbortController);const I=this._uiManager.combinedSignal(W(this,kd));this.div.addEventListener("focusin",this.focusin.bind(this),{signal:I}),this.div.addEventListener("focusout",this.focusout.bind(this),{signal:I})},cB=function(I){UB._resizerKeyboardManager.exec(this,I)},GB=function(I){var g;W(this,jd)&&(null==(g=I.relatedTarget)?void 0:g.parentNode)!==W(this,yd)&&U(this,_d,RB).call(this)},WB=function(I){R(this,Kd,W(this,jd)?I:"")},VB=function(I){if(W(this,Md))for(const g of W(this,Md))g.tabIndex=I},RB=function(){R(this,jd,!1),U(this,_d,VB).call(this,-1),U(this,_d,ZB).call(this)},V(UB,$d),c(UB,"_l10n",null),c(UB,"_l10nResizer",null),c(UB,"_borderLineWidth",-1),c(UB,"_colorManager",new _l),c(UB,"_zIndex",1),c(UB,"_telemetryTimeout",1e3);let bB=UB;class sB extends bB{constructor(I){super(I),this.annotationElementId=I.annotationElementId,this.deleted=!0}serialize(){return this.serializeDeleted()}}const QB=3285377520,mB=4294901760,NB=65535;class hB{constructor(I){this.h1=I?4294967295&I:QB,this.h2=I?4294967295&I:QB}update(I){let g,C;if("string"==typeof I){g=new Uint8Array(2*I.length),C=0;for(let A=0,l=I.length;A<l;A++){const l=I.charCodeAt(A);l<=255?g[C++]=l:(g[C++]=l>>>8,g[C++]=255&l)}}else{if(!ArrayBuffer.isView(I))throw new Error("Invalid data format, must be a string or TypedArray.");g=I.slice(),C=g.byteLength}const A=C>>2,l=C-4*A,Z=new Uint32Array(g.buffer,0,A);let d=0,B=0,F=this.h1,i=this.h2;const c=3432918353,G=461845907,W=c&NB,V=G&NB;for(let R=0;R<A;R++)1&R?(d=Z[R],d=d*c&mB|d*W&NB,d=d<<15|d>>>17,d=d*G&mB|d*V&NB,F^=d,F=F<<13|F>>>19,F=5*F+3864292196):(B=Z[R],B=B*c&mB|B*W&NB,B=B<<15|B>>>17,B=B*G&mB|B*V&NB,i^=B,i=i<<13|i>>>19,i=5*i+3864292196);switch(d=0,l){case 3:d^=g[4*A+2]<<16;case 2:d^=g[4*A+1]<<8;case 1:d^=g[4*A],d=d*c&mB|d*W&NB,d=d<<15|d>>>17,d=d*G&mB|d*V&NB,1&A?F^=d:i^=d}this.h1=F,this.h2=i}hexdigest(){let I=this.h1,g=this.h2;return I^=g>>>1,I=3981806797*I&mB|36045*I&NB,g=4283543511*g&mB|(2950163797*(g<<16|I>>>16)&mB)>>>16,I^=g>>>1,I=444984403*I&mB|60499*I&NB,g=3301882366*g&mB|(3120437893*(g<<16|I>>>16)&mB)>>>16,I^=g>>>1,(I>>>0).toString(16).padStart(8,"0")+(g>>>0).toString(16).padStart(8,"0")}}const nB=Object.freeze({map:null,hash:"",transfer:void 0});var aB,oB,wB,YB,SB,JB,MB,DB,tB,XB,HB,eB,yB,uB,pB,kB,KB,zB,TB,LB,EB,jB,xB,OB,rB,vB,PB,fB;class _B{constructor(){V(this,YB),V(this,aB,!1),V(this,oB,null),V(this,wB,new Map),this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(I,g){const C=W(this,wB).get(I);return void 0===C?g:Object.assign(g,C)}getRawValue(I){return W(this,wB).get(I)}remove(I){if(W(this,wB).delete(I),0===W(this,wB).size&&this.resetModified(),"function"==typeof this.onAnnotationEditor){for(const I of W(this,wB).values())if(I instanceof bB)return;this.onAnnotationEditor(null)}}setValue(I,g){const C=W(this,wB).get(I);let A=!1;if(void 0!==C)for(const[l,Z]of Object.entries(g))C[l]!==Z&&(A=!0,C[l]=Z);else A=!0,W(this,wB).set(I,g);A&&U(this,YB,SB).call(this),g instanceof bB&&"function"==typeof this.onAnnotationEditor&&this.onAnnotationEditor(g.constructor._type)}has(I){return W(this,wB).has(I)}getAll(){return W(this,wB).size>0?hA(W(this,wB)):null}setAll(I){for(const[g,C]of Object.entries(I))this.setValue(g,C)}get size(){return W(this,wB).size}resetModified(){W(this,aB)&&(R(this,aB,!1),"function"==typeof this.onResetModified&&this.onResetModified())}get print(){return new qB(this)}get serializable(){if(0===W(this,wB).size)return nB;const I=new Map,g=new hB,C=[],A=Object.create(null);let l=!1;for(const[Z,d]of W(this,wB)){const C=d instanceof bB?d.serialize(!1,A):d;C&&(I.set(Z,C),g.update(`${Z}:${JSON.stringify(C)}`),l||(l=!!C.bitmap))}if(l)for(const Z of I.values())Z.bitmap&&C.push(Z.bitmap);return I.size>0?{map:I,hash:g.hexdigest(),transfer:C}:nB}get editorStats(){let I=null;const g=new Map;for(const C of W(this,wB).values()){if(!(C instanceof bB))continue;const A=C.telemetryFinalData;if(!A)continue;const{type:l}=A;g.has(l)||g.set(l,Object.getPrototypeOf(C).constructor),I||(I=Object.create(null));const Z=I[l]||(I[l]=new Map);for(const[I,g]of Object.entries(A)){if("type"===I)continue;let C=Z.get(I);C||(C=new Map,Z.set(I,C));const A=C.get(g)??0;C.set(g,A+1)}}for(const[C,A]of g)I[C]=A.computeTelemetryFinalData(I[C]);return I}resetModifiedIds(){R(this,oB,null)}get modifiedIds(){if(W(this,oB))return W(this,oB);const I=[];for(const g of W(this,wB).values())!(g instanceof bB)||!g.annotationElementId||!g.serialize()||I.push(g.annotationElementId);return R(this,oB,{ids:new Set(I),hash:I.join(",")})}}aB=new WeakMap,oB=new WeakMap,wB=new WeakMap,YB=new WeakSet,SB=function(){W(this,aB)||(R(this,aB,!0),"function"==typeof this.onSetModified&&this.onSetModified())};class qB extends _B{constructor(I){super(),V(this,JB);const{map:g,hash:C,transfer:A}=I.serializable,l=structuredClone(g,A?{transfer:A}:null);R(this,JB,{map:l,hash:C,transfer:A})}get print(){ZA("Should not call PrintAnnotationStorage.print")}get serializable(){return W(this,JB)}get modifiedIds(){return iA(this,"modifiedIds",{ids:new Set,hash:""})}}JB=new WeakMap;class $B{constructor({ownerDocument:I=globalThis.document,styleElement:g=null}){V(this,MB,new Set),this._document=I,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(I){this.nativeFontFaces.add(I),this._document.fonts.add(I)}removeNativeFontFace(I){this.nativeFontFaces.delete(I),this._document.fonts.delete(I)}insertRule(I){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const g=this.styleElement.sheet;g.insertRule(I,g.cssRules.length)}clear(){for(const I of this.nativeFontFaces)this._document.fonts.delete(I);this.nativeFontFaces.clear(),W(this,MB).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:I,_inspectFont:g}){if(I&&!W(this,MB).has(I.loadedName)){if(dA(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:C,src:A,style:l}=I,Z=new FontFace(C,A,l);this.addNativeFontFace(Z);try{await Z.load(),W(this,MB).add(C),null==g||g(I)}catch{lA(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(Z)}return}ZA("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(I){if(I.attached||I.missingFile&&!I.systemFontInfo)return;if(I.attached=!0,I.systemFontInfo)return void await this.loadSystemFont(I);if(this.isFontLoadingAPISupported){const g=I.createNativeFontFace();if(g){this.addNativeFontFace(g);try{await g.loaded}catch(C){throw lA(`Failed to load font '${g.family}': '${C}'.`),I.disableFontFace=!0,C}}return}const g=I.createFontFaceRule();if(g){if(this.insertRule(g),this.isSyncFontLoadingSupported)return;await new Promise((g=>{const C=this._queueLoadingCallback(g);this._prepareFontLoadEvent(I,C)}))}}get isFontLoadingAPISupported(){var I;const g=!(null==(I=this._document)||!I.fonts);return iA(this,"isFontLoadingAPISupported",g)}get isSyncFontLoadingSupported(){let I=!1;return(uC||typeof navigator<"u"&&"string"==typeof(null==navigator?void 0:navigator.userAgent)&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(I=!0),iA(this,"isSyncFontLoadingSupported",I)}_queueLoadingCallback(I){function g(){for(dA(!A.done,"completeRequest() cannot be called twice."),A.done=!0;C.length>0&&C[0].done;){const I=C.shift();setTimeout(I.callback,0)}}const{loadingRequests:C}=this,A={done:!1,complete:g,callback:I};return C.push(A),A}get _loadTestFont(){const I=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return iA(this,"_loadTestFont",I)}_prepareFontLoadEvent(I,g){function C(I,g){return I.charCodeAt(g)<<24|I.charCodeAt(g+1)<<16|I.charCodeAt(g+2)<<8|255&I.charCodeAt(g+3)}function A(I,g,C,A){const l=I.substring(0,g),Z=I.substring(g+C);return l+A+Z}let l,Z;const d=this._document.createElement("canvas");d.width=1,d.height=1;const B=d.getContext("2d");let F=0;function i(I,g){if(++F>30)return lA("Load test font never loaded."),void g();B.font="30px "+I,B.fillText(".",0,20),B.getImageData(0,0,1,1).data[3]>0?g():setTimeout(i.bind(null,I,g))}const c=`lt${Date.now()}${this.loadTestFontId++}`;let G=this._loadTestFont;G=A(G,976,c.length,c);const W=16,V=1482184792;let R=C(G,W);for(l=0,Z=c.length-3;l<Z;l+=4)R=R-V+C(c,l)|0;l<c.length&&(R=R-V+C(c+"XXX",l)|0),G=A(G,W,4,NA(R));const U=`url(data:font/opentype;base64,${btoa(G)});`,b=`@font-face {font-family:"${c}";src:${U}}`;this.insertRule(b);const s=this._document.createElement("div");s.style.visibility="hidden",s.style.width=s.style.height="10px",s.style.position="absolute",s.style.top=s.style.left="0px";for(const Q of[I.loadedName,c]){const I=this._document.createElement("span");I.textContent="Hi",I.style.fontFamily=Q,s.append(I)}this._document.body.append(s),i(c,(()=>{s.remove(),g.complete()}))}}MB=new WeakMap;class IF{constructor(I,{disableFontFace:g=!1,inspectFont:C=null}){this.compiledGlyphs=Object.create(null);for(const A in I)this[A]=I[A];this.disableFontFace=!0===g,this._inspectFont=C}createNativeFontFace(){var I;if(!this.data||this.disableFontFace)return null;let g;if(this.cssFontInfo){const I={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(I.style=`oblique ${this.cssFontInfo.italicAngle}deg`),g=new FontFace(this.cssFontInfo.fontFamily,this.data,I)}else g=new FontFace(this.loadedName,this.data,{});return null==(I=this._inspectFont)||I.call(this,this),g}createFontFaceRule(){var I;if(!this.data||this.disableFontFace)return null;const g=`url(data:${this.mimetype};base64,${pA(this.data)});`;let C;if(this.cssFontInfo){let I=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(I+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),C=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${I}src:${g}}`}else C=`@font-face {font-family:"${this.loadedName}";src:${g}}`;return null==(I=this._inspectFont)||I.call(this,this,g),C}getPathGenerator(I,g){if(void 0!==this.compiledGlyphs[g])return this.compiledGlyphs[g];let C;try{C=I.get(this.loadedName+"_path_"+g)}catch(l){lA(`getPathGenerator - ignoring character: "${l}".`)}if(!Array.isArray(C)||0===C.length)return this.compiledGlyphs[g]=function(I,g){};const A=[];for(let Z=0,d=C.length;Z<d;)switch(C[Z++]){case uA.BEZIER_CURVE_TO:{const[I,g,l,d,B,F]=C.slice(Z,Z+6);A.push((C=>C.bezierCurveTo(I,g,l,d,B,F))),Z+=6}break;case uA.MOVE_TO:{const[I,g]=C.slice(Z,Z+2);A.push((C=>C.moveTo(I,g))),Z+=2}break;case uA.LINE_TO:{const[I,g]=C.slice(Z,Z+2);A.push((C=>C.lineTo(I,g))),Z+=2}break;case uA.QUADRATIC_CURVE_TO:{const[I,g,l,d]=C.slice(Z,Z+4);A.push((C=>C.quadraticCurveTo(I,g,l,d))),Z+=4}break;case uA.RESTORE:A.push((I=>I.restore()));break;case uA.SAVE:A.push((I=>I.save()));break;case uA.SCALE:dA(2===A.length,"Scale command is only valid at the third position.");break;case uA.TRANSFORM:{const[I,g,l,d,B,F]=C.slice(Z,Z+6);A.push((C=>C.transform(I,g,l,d,B,F))),Z+=6}break;case uA.TRANSLATE:{const[I,g]=C.slice(Z,Z+2);A.push((C=>C.translate(I,g))),Z+=2}break}return A.push((I=>I.closePath())),this.compiledGlyphs[g]=function(I,g){A[0](I),A[1](I),I.scale(g,-g);for(let C=2,l=A.length;C<l;C++)A[C](I)}}}class gF{constructor({enableHWA:I=!1}){V(this,DB,!1),R(this,DB,I)}create(I,g){if(I<=0||g<=0)throw new Error("Invalid canvas size");const C=this._createCanvas(I,g);return{canvas:C,context:C.getContext("2d",{willReadFrequently:!W(this,DB)})}}reset(I,g,C){if(!I.canvas)throw new Error("Canvas is not specified");if(g<=0||C<=0)throw new Error("Invalid canvas size");I.canvas.width=g,I.canvas.height=C}destroy(I){if(!I.canvas)throw new Error("Canvas is not specified");I.canvas.width=0,I.canvas.height=0,I.canvas=null,I.context=null}_createCanvas(I,g){ZA("Abstract method `_createCanvas` called.")}}DB=new WeakMap;class CF extends gF{constructor({ownerDocument:I=globalThis.document,enableHWA:g=!1}){super({enableHWA:g}),this._document=I}_createCanvas(I,g){const C=this._document.createElement("canvas");return C.width=I,C.height=g,C}}class AF{constructor({baseUrl:I=null,isCompressed:g=!0}){this.baseUrl=I,this.isCompressed=g}async fetch({name:I}){if(!this.baseUrl)throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");if(!I)throw new Error("CMap name must be specified.");const g=this.baseUrl+I+(this.isCompressed?".bcmap":"");return this._fetch(g).then((I=>({cMapData:I,isCompressed:this.isCompressed}))).catch((I=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${g}`)}))}async _fetch(I){ZA("Abstract method `_fetch` called.")}}class lF extends AF{async _fetch(I){const g=await TA(I,this.isCompressed?"arraybuffer":"text");return g instanceof ArrayBuffer?new Uint8Array(g):mA(g)}}class ZF{addFilter(I){return"none"}addHCMFilter(I,g){return"none"}addAlphaFilter(I){return"none"}addLuminosityFilter(I){return"none"}addHighlightHCMFilter(I,g,C,A,l){return"none"}destroy(I=!1){}}class dF extends ZF{constructor({docId:I,ownerDocument:g=globalThis.document}){super(),V(this,kB),V(this,tB),V(this,XB),V(this,HB),V(this,eB),V(this,yB),V(this,uB),V(this,pB,0),R(this,eB,I),R(this,yB,g)}addFilter(I){if(!I)return"none";let g=W(this,kB,KB).get(I);if(g)return g;const[C,A,l]=U(this,kB,LB).call(this,I),Z=1===I.length?C:`${C}${A}${l}`;if(g=W(this,kB,KB).get(Z),g)return W(this,kB,KB).set(I,g),g;const d=`g_${W(this,eB)}_transfer_map_${b(this,pB)._++}`,B=U(this,kB,EB).call(this,d);W(this,kB,KB).set(I,B),W(this,kB,KB).set(Z,B);const F=U(this,kB,OB).call(this,d);return U(this,kB,vB).call(this,C,A,l,F),B}addHCMFilter(I,g){var C;const A=`${I}-${g}`,l="base";let Z=W(this,kB,zB).get(l);if((null==Z?void 0:Z.key)===A||(Z?(null==(C=Z.filter)||C.remove(),Z.key=A,Z.url="none",Z.filter=null):(Z={key:A,url:"none",filter:null},W(this,kB,zB).set(l,Z)),!I||!g))return Z.url;const d=U(this,kB,fB).call(this,I);I=MA.makeHexColor(...d);const B=U(this,kB,fB).call(this,g);if(g=MA.makeHexColor(...B),W(this,kB,TB).style.color="","#000000"===I&&"#ffffff"===g||I===g)return Z.url;const F=new Array(256);for(let W=0;W<=255;W++){const I=W/255;F[W]=I<=.03928?I/12.92:((I+.055)/1.055)**2.4}const i=F.join(","),c=`g_${W(this,eB)}_hcm_filter`,G=Z.filter=U(this,kB,OB).call(this,c);U(this,kB,vB).call(this,i,i,i,G),U(this,kB,xB).call(this,G);const V=(I,g)=>{const C=d[I]/255,A=B[I]/255,l=new Array(g+1);for(let Z=0;Z<=g;Z++)l[Z]=C+Z/g*(A-C);return l.join(",")};return U(this,kB,vB).call(this,V(0,5),V(1,5),V(2,5),G),Z.url=U(this,kB,EB).call(this,c),Z.url}addAlphaFilter(I){let g=W(this,kB,KB).get(I);if(g)return g;const[C]=U(this,kB,LB).call(this,[I]),A=`alpha_${C}`;if(g=W(this,kB,KB).get(A),g)return W(this,kB,KB).set(I,g),g;const l=`g_${W(this,eB)}_alpha_map_${b(this,pB)._++}`,Z=U(this,kB,EB).call(this,l);W(this,kB,KB).set(I,Z),W(this,kB,KB).set(A,Z);const d=U(this,kB,OB).call(this,l);return U(this,kB,PB).call(this,C,d),Z}addLuminosityFilter(I){let g,C,A=W(this,kB,KB).get(I||"luminosity");if(A)return A;if(I?([g]=U(this,kB,LB).call(this,[I]),C=`luminosity_${g}`):C="luminosity",A=W(this,kB,KB).get(C),A)return W(this,kB,KB).set(I,A),A;const l=`g_${W(this,eB)}_luminosity_map_${b(this,pB)._++}`,Z=U(this,kB,EB).call(this,l);W(this,kB,KB).set(I,Z),W(this,kB,KB).set(C,Z);const d=U(this,kB,OB).call(this,l);return U(this,kB,jB).call(this,d),I&&U(this,kB,PB).call(this,g,d),Z}addHighlightHCMFilter(I,g,C,A,l){var Z;const d=`${g}-${C}-${A}-${l}`;let B=W(this,kB,zB).get(I);if((null==B?void 0:B.key)===d||(B?(null==(Z=B.filter)||Z.remove(),B.key=d,B.url="none",B.filter=null):(B={key:d,url:"none",filter:null},W(this,kB,zB).set(I,B)),!g||!C))return B.url;const[F,i]=[g,C].map(U(this,kB,fB).bind(this));let c=Math.round(.2126*F[0]+.7152*F[1]+.0722*F[2]),G=Math.round(.2126*i[0]+.7152*i[1]+.0722*i[2]),[V,R]=[A,l].map(U(this,kB,fB).bind(this));G<c&&([c,G,V,R]=[G,c,R,V]),W(this,kB,TB).style.color="";const b=(I,g,C)=>{const A=new Array(256),l=(G-c)/C,Z=I/255,d=(g-I)/(255*C);let B=0;for(let F=0;F<=C;F++){const I=Math.round(c+F*l),g=Z+F*d;for(let C=B;C<=I;C++)A[C]=g;B=I+1}for(let F=B;F<256;F++)A[F]=A[B-1];return A.join(",")},s=`g_${W(this,eB)}_hcm_${I}_filter`,Q=B.filter=U(this,kB,OB).call(this,s);return U(this,kB,xB).call(this,Q),U(this,kB,vB).call(this,b(V[0],R[0],5),b(V[1],R[1],5),b(V[2],R[2],5),Q),B.url=U(this,kB,EB).call(this,s),B.url}destroy(I=!1){var g,C,A,l;I&&null!=(g=W(this,uB))&&g.size||(null==(C=W(this,HB))||C.parentNode.parentNode.remove(),R(this,HB,null),null==(A=W(this,XB))||A.clear(),R(this,XB,null),null==(l=W(this,uB))||l.clear(),R(this,uB,null),R(this,pB,0))}}tB=new WeakMap,XB=new WeakMap,HB=new WeakMap,eB=new WeakMap,yB=new WeakMap,uB=new WeakMap,pB=new WeakMap,kB=new WeakSet,KB=function(){return W(this,XB)||R(this,XB,new Map)},zB=function(){return W(this,uB)||R(this,uB,new Map)},TB=function(){if(!W(this,HB)){const I=W(this,yB).createElement("div"),{style:g}=I;g.visibility="hidden",g.contain="strict",g.width=g.height=0,g.position="absolute",g.top=g.left=0,g.zIndex=-1;const C=W(this,yB).createElementNS(kA,"svg");C.setAttribute("width",0),C.setAttribute("height",0),R(this,HB,W(this,yB).createElementNS(kA,"defs")),I.append(C),C.append(W(this,HB)),W(this,yB).body.append(I)}return W(this,HB)},LB=function(I){if(1===I.length){const g=I[0],C=new Array(256);for(let I=0;I<256;I++)C[I]=g[I]/255;const A=C.join(",");return[A,A,A]}const[g,C,A]=I,l=new Array(256),Z=new Array(256),d=new Array(256);for(let B=0;B<256;B++)l[B]=g[B]/255,Z[B]=C[B]/255,d[B]=A[B]/255;return[l.join(","),Z.join(","),d.join(",")]},EB=function(I){if(void 0===W(this,tB)){R(this,tB,"");const I=W(this,yB).URL;I!==W(this,yB).baseURI&&(jA(I)?lA('#createUrl: ignore "data:"-URL for performance reasons.'):R(this,tB,I.split("#",1)[0]))}return`url(${W(this,tB)}#${I})`},jB=function(I){const g=W(this,yB).createElementNS(kA,"feColorMatrix");g.setAttribute("type","matrix"),g.setAttribute("values","0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"),I.append(g)},xB=function(I){const g=W(this,yB).createElementNS(kA,"feColorMatrix");g.setAttribute("type","matrix"),g.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),I.append(g)},OB=function(I){const g=W(this,yB).createElementNS(kA,"filter");return g.setAttribute("color-interpolation-filters","sRGB"),g.setAttribute("id",I),W(this,kB,TB).append(g),g},rB=function(I,g,C){const A=W(this,yB).createElementNS(kA,g);A.setAttribute("type","discrete"),A.setAttribute("tableValues",C),I.append(A)},vB=function(I,g,C,A){const l=W(this,yB).createElementNS(kA,"feComponentTransfer");A.append(l),U(this,kB,rB).call(this,l,"feFuncR",I),U(this,kB,rB).call(this,l,"feFuncG",g),U(this,kB,rB).call(this,l,"feFuncB",C)},PB=function(I,g){const C=W(this,yB).createElementNS(kA,"feComponentTransfer");g.append(C),U(this,kB,rB).call(this,C,"feFuncA",I)},fB=function(I){return W(this,kB,TB).style.color=I,bl(getComputedStyle(W(this,kB,TB)).getPropertyValue("color"))};class BF{constructor({baseUrl:I=null}){this.baseUrl=I}async fetch({filename:I}){if(!this.baseUrl)throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");if(!I)throw new Error("Font filename must be specified.");const g=`${this.baseUrl}${I}`;return this._fetch(g).catch((I=>{throw new Error(`Unable to load font data at: ${g}`)}))}async _fetch(I){ZA("Abstract method `_fetch` called.")}}class FF extends BF{async _fetch(I){const g=await TA(I,"arraybuffer");return new Uint8Array(g)}}async function iF(I){const g=await process.getBuiltinModule("fs").promises.readFile(I);return new Uint8Array(g)}class cF extends ZF{}class GF extends gF{_createCanvas(I,g){return process.getBuiltinModule("module").createRequire("file:///E:/office-tools/node_modules/office-tool/dist/es/index.js")("@napi-rs/canvas").createCanvas(I,g)}}class WF extends AF{async _fetch(I){return iF(I)}}class VF extends BF{async _fetch(I){return iF(I)}}const RF={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function UF(I,g){if(!g)return;const C=g[2]-g[0],A=g[3]-g[1],l=new Path2D;l.rect(g[0],g[1],C,A),I.clip(l)}class bF{getPattern(){ZA("Abstract method `getPattern` called.")}}class sF extends bF{constructor(I){super(),this._type=I[1],this._bbox=I[2],this._colorStops=I[3],this._p0=I[4],this._p1=I[5],this._r0=I[6],this._r1=I[7],this.matrix=null}_createGradient(I){let g;"axial"===this._type?g=I.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):"radial"===this._type&&(g=I.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const C of this._colorStops)g.addColorStop(C[0],C[1]);return g}getPattern(I,g,C,A){let l;if(A===RF.STROKE||A===RF.FILL){const Z=g.current.getClippedPathBoundingBox(A,Ql(I))||[0,0,0,0],d=Math.ceil(Z[2]-Z[0])||1,B=Math.ceil(Z[3]-Z[1])||1,F=g.cachedCanvases.getCanvas("pattern",d,B),i=F.context;i.clearRect(0,0,i.canvas.width,i.canvas.height),i.beginPath(),i.rect(0,0,i.canvas.width,i.canvas.height),i.translate(-Z[0],-Z[1]),C=MA.transform(C,[1,0,0,1,Z[0],Z[1]]),i.transform(...g.baseTransform),this.matrix&&i.transform(...this.matrix),UF(i,this._bbox),i.fillStyle=this._createGradient(i),i.fill(),l=I.createPattern(F.canvas,"no-repeat");const c=new DOMMatrix(C);l.setTransform(c)}else UF(I,this._bbox),l=this._createGradient(I);return l}}function QF(I,g,C,A,l,Z,d,B){const F=g.coords,i=g.colors,c=I.data,G=4*I.width;let W;F[C+1]>F[A+1]&&(W=C,C=A,A=W,W=Z,Z=d,d=W),F[A+1]>F[l+1]&&(W=A,A=l,l=W,W=d,d=B,B=W),F[C+1]>F[A+1]&&(W=C,C=A,A=W,W=Z,Z=d,d=W);const V=(F[C]+g.offsetX)*g.scaleX,R=(F[C+1]+g.offsetY)*g.scaleY,U=(F[A]+g.offsetX)*g.scaleX,b=(F[A+1]+g.offsetY)*g.scaleY,s=(F[l]+g.offsetX)*g.scaleX,Q=(F[l+1]+g.offsetY)*g.scaleY;if(R>=Q)return;const m=i[Z],N=i[Z+1],h=i[Z+2],n=i[d],a=i[d+1],o=i[d+2],w=i[B],Y=i[B+1],S=i[B+2],J=Math.round(R),M=Math.round(Q);let D,t,X,H,e,y,u,p;for(let k=J;k<=M;k++){if(k<b){const I=k<R?0:(R-k)/(R-b);D=V-(V-U)*I,t=m-(m-n)*I,X=N-(N-a)*I,H=h-(h-o)*I}else{let I;I=k>Q?1:b===Q?0:(b-k)/(b-Q),D=U-(U-s)*I,t=n-(n-w)*I,X=a-(a-Y)*I,H=o-(o-S)*I}let I;I=k<R?0:k>Q?1:(R-k)/(R-Q),e=V-(V-s)*I,y=m-(m-w)*I,u=N-(N-Y)*I,p=h-(h-S)*I;const g=Math.round(Math.min(D,e)),C=Math.round(Math.max(D,e));let A=G*k+4*g;for(let l=g;l<=C;l++)I=(D-l)/(D-e),I<0?I=0:I>1&&(I=1),c[A++]=t-(t-y)*I|0,c[A++]=X-(X-u)*I|0,c[A++]=H-(H-p)*I|0,c[A++]=255}}function mF(I,g,C){const A=g.coords,l=g.colors;let Z,d;switch(g.type){case"lattice":const B=g.verticesPerRow,F=Math.floor(A.length/B)-1,i=B-1;for(Z=0;Z<F;Z++){let g=Z*B;for(let Z=0;Z<i;Z++,g++)QF(I,C,A[g],A[g+1],A[g+B],l[g],l[g+1],l[g+B]),QF(I,C,A[g+B+1],A[g+1],A[g+B],l[g+B+1],l[g+1],l[g+B])}break;case"triangles":for(Z=0,d=A.length;Z<d;Z+=3)QF(I,C,A[Z],A[Z+1],A[Z+2],l[Z],l[Z+1],l[Z+2]);break;default:throw new Error("illegal figure")}}class NF extends bF{constructor(I){super(),this._coords=I[2],this._colors=I[3],this._figures=I[4],this._bounds=I[5],this._bbox=I[7],this._background=I[8],this.matrix=null}_createMeshCanvas(I,g,C){const A=Math.floor(this._bounds[0]),l=Math.floor(this._bounds[1]),Z=Math.ceil(this._bounds[2])-A,d=Math.ceil(this._bounds[3])-l,B=Math.min(Math.ceil(Math.abs(Z*I[0]*1.1)),3e3),F=Math.min(Math.ceil(Math.abs(d*I[1]*1.1)),3e3),i=Z/B,c=d/F,G={coords:this._coords,colors:this._colors,offsetX:-A,offsetY:-l,scaleX:1/i,scaleY:1/c},W=B+4,V=F+4,R=C.getCanvas("mesh",W,V),U=R.context,b=U.createImageData(B,F);if(g){const I=b.data;for(let C=0,A=I.length;C<A;C+=4)I[C]=g[0],I[C+1]=g[1],I[C+2]=g[2],I[C+3]=255}for(const s of this._figures)mF(b,s,G);return U.putImageData(b,2,2),{canvas:R.canvas,offsetX:A-2*i,offsetY:l-2*c,scaleX:i,scaleY:c}}getPattern(I,g,C,A){let l;if(UF(I,this._bbox),A===RF.SHADING)l=MA.singularValueDecompose2dScale(Ql(I));else if(l=MA.singularValueDecompose2dScale(g.baseTransform),this.matrix){const I=MA.singularValueDecompose2dScale(this.matrix);l=[l[0]*I[0],l[1]*I[1]]}const Z=this._createMeshCanvas(l,A===RF.SHADING?null:this._background,g.cachedCanvases);return A!==RF.SHADING&&(I.setTransform(...g.baseTransform),this.matrix&&I.transform(...this.matrix)),I.translate(Z.offsetX,Z.offsetY),I.scale(Z.scaleX,Z.scaleY),I.createPattern(Z.canvas,"no-repeat")}}class hF extends bF{getPattern(){return"hotpink"}}function nF(I){switch(I[0]){case"RadialAxial":return new sF(I);case"Mesh":return new NF(I);case"Dummy":return new hF}throw new Error(`Unknown IR type: ${I[0]}`)}const aF={COLORED:1,UNCOLORED:2},oF=class I{constructor(I,g,C,A,l){this.operatorList=I[2],this.matrix=I[3],this.bbox=I[4],this.xstep=I[5],this.ystep=I[6],this.paintType=I[7],this.tilingType=I[8],this.color=g,this.ctx=C,this.canvasGraphicsFactory=A,this.baseTransform=l}createPatternCanvas(I){const{bbox:g,operatorList:C,paintType:A,tilingType:l,color:Z,canvasGraphicsFactory:d}=this;let{xstep:B,ystep:F}=this;B=Math.abs(B),F=Math.abs(F),AA("TilingType: "+l);const i=g[0],c=g[1],G=g[2],W=g[3],V=G-i,R=W-c,U=MA.singularValueDecompose2dScale(this.matrix),b=MA.singularValueDecompose2dScale(this.baseTransform),s=U[0]*b[0],Q=U[1]*b[1];let m=V,N=R,h=!1,n=!1;const a=Math.ceil(B*s),o=Math.ceil(F*Q),w=Math.ceil(V*s),Y=Math.ceil(R*Q);a>=w?m=B:h=!0,o>=Y?N=F:n=!0;const S=this.getSizeAndScale(m,this.ctx.canvas.width,s),J=this.getSizeAndScale(N,this.ctx.canvas.height,Q),M=I.cachedCanvases.getCanvas("pattern",S.size,J.size),D=M.context,t=d.createCanvasGraphics(D);if(t.groupLevel=I.groupLevel,this.setFillAndStrokeStyleToContext(t,A,Z),D.translate(-S.scale*i,-J.scale*c),t.transform(S.scale,0,0,J.scale,0,0),D.save(),this.clipBbox(t,i,c,G,W),t.baseTransform=Ql(t.ctx),t.executeOperatorList(C),t.endDrawing(),D.restore(),h||n){const g=M.canvas;h&&(m=B),n&&(N=F);const C=this.getSizeAndScale(m,this.ctx.canvas.width,s),A=this.getSizeAndScale(N,this.ctx.canvas.height,Q),l=C.size,Z=A.size,d=I.cachedCanvases.getCanvas("pattern-workaround",l,Z),G=d.context,W=h?Math.floor(V/B):0,U=n?Math.floor(R/F):0;for(let I=0;I<=W;I++)for(let C=0;C<=U;C++)G.drawImage(g,l*I,Z*C,l,Z,0,0,l,Z);return{canvas:d.canvas,scaleX:C.scale,scaleY:A.scale,offsetX:i,offsetY:c}}return{canvas:M.canvas,scaleX:S.scale,scaleY:J.scale,offsetX:i,offsetY:c}}getSizeAndScale(g,C,A){const l=Math.max(I.MAX_PATTERN_SIZE,C);let Z=Math.ceil(g*A);return Z>=l?Z=l:A=Z/g,{scale:A,size:Z}}clipBbox(I,g,C,A,l){const Z=A-g,d=l-C;I.ctx.rect(g,C,Z,d),I.current.updateRectMinMax(Ql(I.ctx),[g,C,A,l]),I.clip(),I.endPath()}setFillAndStrokeStyleToContext(I,g,C){const A=I.ctx,l=I.current;switch(g){case aF.COLORED:const I=this.ctx;A.fillStyle=I.fillStyle,A.strokeStyle=I.strokeStyle,l.fillColor=I.fillStyle,l.strokeColor=I.strokeStyle;break;case aF.UNCOLORED:const Z=MA.makeHexColor(C[0],C[1],C[2]);A.fillStyle=Z,A.strokeStyle=Z,l.fillColor=Z,l.strokeColor=Z;break;default:throw new bA(`Unsupported paint type: ${g}`)}}getPattern(I,g,C,A){let l=C;A!==RF.SHADING&&(l=MA.transform(l,g.baseTransform),this.matrix&&(l=MA.transform(l,this.matrix)));const Z=this.createPatternCanvas(g);let d=new DOMMatrix(l);d=d.translate(Z.offsetX,Z.offsetY),d=d.scale(1/Z.scaleX,1/Z.scaleY);const B=I.createPattern(Z.canvas,"repeat");return B.setTransform(d),B}};c(oF,"MAX_PATTERN_SIZE",3e3);let wF=oF;function YF({src:I,srcPos:g=0,dest:C,width:A,height:l,nonBlackColor:Z=4294967295,inverseDecode:d=!1}){const B=oA.isLittleEndian?4278190080:255,[F,i]=d?[Z,B]:[B,Z],c=A>>3,G=7&A,W=I.length;C=new Uint32Array(C.buffer);let V=0;for(let R=0;R<l;R++){for(const l=g+c;g<l;g++){const A=g<W?I[g]:255;C[V++]=128&A?i:F,C[V++]=64&A?i:F,C[V++]=32&A?i:F,C[V++]=16&A?i:F,C[V++]=8&A?i:F,C[V++]=4&A?i:F,C[V++]=2&A?i:F,C[V++]=1&A?i:F}if(0===G)continue;const A=g<W?I[g++]:255;for(let I=0;I<G;I++)C[V++]=A&1<<7-I?i:F}return{srcPos:g,destPos:V}}const SF=16,JF=100,MF=15,DF=10,tF=1e3,XF=16;function HF(I,g){if(I._removeMirroring)throw new Error("Context is already forwarding operations.");I.__originalSave=I.save,I.__originalRestore=I.restore,I.__originalRotate=I.rotate,I.__originalScale=I.scale,I.__originalTranslate=I.translate,I.__originalTransform=I.transform,I.__originalSetTransform=I.setTransform,I.__originalResetTransform=I.resetTransform,I.__originalClip=I.clip,I.__originalMoveTo=I.moveTo,I.__originalLineTo=I.lineTo,I.__originalBezierCurveTo=I.bezierCurveTo,I.__originalRect=I.rect,I.__originalClosePath=I.closePath,I.__originalBeginPath=I.beginPath,I._removeMirroring=()=>{I.save=I.__originalSave,I.restore=I.__originalRestore,I.rotate=I.__originalRotate,I.scale=I.__originalScale,I.translate=I.__originalTranslate,I.transform=I.__originalTransform,I.setTransform=I.__originalSetTransform,I.resetTransform=I.__originalResetTransform,I.clip=I.__originalClip,I.moveTo=I.__originalMoveTo,I.lineTo=I.__originalLineTo,I.bezierCurveTo=I.__originalBezierCurveTo,I.rect=I.__originalRect,I.closePath=I.__originalClosePath,I.beginPath=I.__originalBeginPath,delete I._removeMirroring},I.save=function(){g.save(),this.__originalSave()},I.restore=function(){g.restore(),this.__originalRestore()},I.translate=function(I,C){g.translate(I,C),this.__originalTranslate(I,C)},I.scale=function(I,C){g.scale(I,C),this.__originalScale(I,C)},I.transform=function(I,C,A,l,Z,d){g.transform(I,C,A,l,Z,d),this.__originalTransform(I,C,A,l,Z,d)},I.setTransform=function(I,C,A,l,Z,d){g.setTransform(I,C,A,l,Z,d),this.__originalSetTransform(I,C,A,l,Z,d)},I.resetTransform=function(){g.resetTransform(),this.__originalResetTransform()},I.rotate=function(I){g.rotate(I),this.__originalRotate(I)},I.clip=function(I){g.clip(I),this.__originalClip(I)},I.moveTo=function(I,C){g.moveTo(I,C),this.__originalMoveTo(I,C)},I.lineTo=function(I,C){g.lineTo(I,C),this.__originalLineTo(I,C)},I.bezierCurveTo=function(I,C,A,l,Z,d){g.bezierCurveTo(I,C,A,l,Z,d),this.__originalBezierCurveTo(I,C,A,l,Z,d)},I.rect=function(I,C,A,l){g.rect(I,C,A,l),this.__originalRect(I,C,A,l)},I.closePath=function(){g.closePath(),this.__originalClosePath()},I.beginPath=function(){g.beginPath(),this.__originalBeginPath()}}class eF{constructor(I){this.canvasFactory=I,this.cache=Object.create(null)}getCanvas(I,g,C){let A;return void 0!==this.cache[I]?(A=this.cache[I],this.canvasFactory.reset(A,g,C)):(A=this.canvasFactory.create(g,C),this.cache[I]=A),A}delete(I){delete this.cache[I]}clear(){for(const I in this.cache){const g=this.cache[I];this.canvasFactory.destroy(g),delete this.cache[I]}}}function yF(I,g,C,A,l,Z,d,B,F,i){const[c,G,W,V,R,U]=Ql(I);if(0===G&&0===W){const b=d*c+R,s=Math.round(b),Q=B*V+U,m=Math.round(Q),N=(d+F)*c+R,h=Math.abs(Math.round(N)-s)||1,n=(B+i)*V+U,a=Math.abs(Math.round(n)-m)||1;return I.setTransform(Math.sign(c),0,0,Math.sign(V),s,m),I.drawImage(g,C,A,l,Z,0,0,h,a),I.setTransform(c,G,W,V,R,U),[h,a]}if(0===c&&0===V){const b=B*W+R,s=Math.round(b),Q=d*G+U,m=Math.round(Q),N=(B+i)*W+R,h=Math.abs(Math.round(N)-s)||1,n=(d+F)*G+U,a=Math.abs(Math.round(n)-m)||1;return I.setTransform(0,Math.sign(G),Math.sign(W),0,s,m),I.drawImage(g,C,A,l,Z,0,0,a,h),I.setTransform(c,G,W,V,R,U),[a,h]}I.drawImage(g,C,A,l,Z,d,B,F,i);const b=Math.hypot(c,G),s=Math.hypot(W,V);return[b*F,s*i]}function uF(I){const{width:g,height:C}=I;if(g>tF||C>tF)return null;const A=1e3,l=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),Z=g+1;let d,B,F,i=new Uint8Array(Z*(C+1));const c=g+7&-8;let G=new Uint8Array(c*C),W=0;for(const b of I.data){let I=128;for(;I>0;)G[W++]=b&I?0:255,I>>=1}let V=0;for(W=0,0!==G[W]&&(i[0]=1,++V),B=1;B<g;B++)G[W]!==G[W+1]&&(i[B]=G[W]?2:1,++V),W++;for(0!==G[W]&&(i[B]=2,++V),d=1;d<C;d++){W=d*c,F=d*Z,G[W-c]!==G[W]&&(i[F]=G[W]?1:8,++V);let I=(G[W]?4:0)+(G[W-c]?8:0);for(B=1;B<g;B++)I=(I>>2)+(G[W+1]?4:0)+(G[W-c+1]?8:0),l[I]&&(i[F+B]=l[I],++V),W++;if(G[W-c]!==G[W]&&(i[F+B]=G[W]?2:4,++V),V>A)return null}for(W=c*(C-1),F=d*Z,0!==G[W]&&(i[F]=8,++V),B=1;B<g;B++)G[W]!==G[W+1]&&(i[F+B]=G[W]?4:8,++V),W++;if(0!==G[W]&&(i[F+B]=4,++V),V>A)return null;const R=new Int32Array([0,Z,-1,0,-Z,0,0,0,1]),U=new Path2D;for(d=0;V&&d<=C;d++){let I=d*Z;const C=I+g;for(;I<C&&!i[I];)I++;if(I===C)continue;U.moveTo(I%Z,d);const A=I;let l=i[I];do{const g=R[l];do{I+=g}while(!i[I]);const C=i[I];5!==C&&10!==C?(l=C,i[I]=0):(l=C&51*l>>4,i[I]&=l>>2|l<<2),U.lineTo(I%Z,I/Z|0),i[I]||--V}while(A!==I);--d}return G=null,i=null,function(I){I.save(),I.scale(1/g,-1/C),I.translate(0,-C),I.fill(U),I.beginPath(),I.restore()}}class pF{constructor(I,g){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=pC,this.textMatrixScale=1,this.fontMatrix=kC,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=rC.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.patternStroke=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,I,g])}clone(){const I=Object.create(this);return I.clipBox=this.clipBox.slice(),I}setCurrentPoint(I,g){this.x=I,this.y=g}updatePathMinMax(I,g,C){[g,C]=MA.applyTransform([g,C],I),this.minX=Math.min(this.minX,g),this.minY=Math.min(this.minY,C),this.maxX=Math.max(this.maxX,g),this.maxY=Math.max(this.maxY,C)}updateRectMinMax(I,g){const C=MA.applyTransform(g,I),A=MA.applyTransform(g.slice(2),I),l=MA.applyTransform([g[0],g[3]],I),Z=MA.applyTransform([g[2],g[1]],I);this.minX=Math.min(this.minX,C[0],A[0],l[0],Z[0]),this.minY=Math.min(this.minY,C[1],A[1],l[1],Z[1]),this.maxX=Math.max(this.maxX,C[0],A[0],l[0],Z[0]),this.maxY=Math.max(this.maxY,C[1],A[1],l[1],Z[1])}updateScalingPathMinMax(I,g){MA.scaleMinMax(I,g),this.minX=Math.min(this.minX,g[0]),this.minY=Math.min(this.minY,g[1]),this.maxX=Math.max(this.maxX,g[2]),this.maxY=Math.max(this.maxY,g[3])}updateCurvePathMinMax(I,g,C,A,l,Z,d,B,F,i){const c=MA.bezierBoundingBox(g,C,A,l,Z,d,B,F,i);i||this.updateRectMinMax(I,c)}getPathBoundingBox(I=RF.FILL,g=null){const C=[this.minX,this.minY,this.maxX,this.maxY];if(I===RF.STROKE){g||ZA("Stroke bounding box must include transform.");const I=MA.singularValueDecompose2dScale(g),A=I[0]*this.lineWidth/2,l=I[1]*this.lineWidth/2;C[0]-=A,C[1]-=l,C[2]+=A,C[3]+=l}return C}updateClipFromPath(){const I=MA.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(I||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(I){this.clipBox=I,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(I=RF.FILL,g=null){return MA.intersect(this.clipBox,this.getPathBoundingBox(I,g))}}function kF(I,g){if(g instanceof ImageData)return void I.putImageData(g,0,0);const C=g.height,A=g.width,l=C%XF,Z=(C-l)/XF,d=0===l?Z:Z+1,B=I.createImageData(A,XF);let F,i=0;const c=g.data,G=B.data;let W,V,R,U;if(g.kind===vC.GRAYSCALE_1BPP){const g=c.byteLength,C=new Uint32Array(G.buffer,0,G.byteLength>>2),U=C.length,b=A+7>>3,s=4294967295,Q=oA.isLittleEndian?4278190080:255;for(W=0;W<d;W++){for(R=W<Z?XF:l,F=0,V=0;V<R;V++){const I=g-i;let l=0;const Z=I>b?A:8*I-7,d=-8&Z;let B=0,G=0;for(;l<d;l+=8)G=c[i++],C[F++]=128&G?s:Q,C[F++]=64&G?s:Q,C[F++]=32&G?s:Q,C[F++]=16&G?s:Q,C[F++]=8&G?s:Q,C[F++]=4&G?s:Q,C[F++]=2&G?s:Q,C[F++]=1&G?s:Q;for(;l<Z;l++)0===B&&(G=c[i++],B=128),C[F++]=G&B?s:Q,B>>=1}for(;F<U;)C[F++]=0;I.putImageData(B,0,W*XF)}}else if(g.kind===vC.RGBA_32BPP){for(V=0,U=A*XF*4,W=0;W<Z;W++)G.set(c.subarray(i,i+U)),i+=U,I.putImageData(B,0,V),V+=XF;W<d&&(U=A*l*4,G.set(c.subarray(i,i+U)),I.putImageData(B,0,V))}else{if(g.kind!==vC.RGB_24BPP)throw new Error(`bad image kind: ${g.kind}`);for(R=XF,U=A*R,W=0;W<d;W++){for(W>=Z&&(R=l,U=A*R),F=0,V=U;V--;)G[F++]=c[i++],G[F++]=c[i++],G[F++]=c[i++],G[F++]=255;I.putImageData(B,0,W*XF)}}}function KF(I,g){if(g.bitmap)return void I.drawImage(g.bitmap,0,0);const C=g.height,A=g.width,l=C%XF,Z=(C-l)/XF,d=0===l?Z:Z+1,B=I.createImageData(A,XF);let F=0;const i=g.data,c=B.data;for(let G=0;G<d;G++){const g=G<Z?XF:l;({srcPos:F}=YF({src:i,srcPos:F,dest:c,width:A,height:g,nonBlackColor:0})),I.putImageData(B,0,G*XF)}}function zF(I,g){const C=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const A of C)void 0!==I[A]&&(g[A]=I[A]);void 0!==I.setLineDash&&(g.setLineDash(I.getLineDash()),g.lineDashOffset=I.lineDashOffset)}function TF(I){if(I.strokeStyle=I.fillStyle="#000000",I.fillRule="nonzero",I.globalAlpha=1,I.lineWidth=1,I.lineCap="butt",I.lineJoin="miter",I.miterLimit=10,I.globalCompositeOperation="source-over",I.font="10px sans-serif",void 0!==I.setLineDash&&(I.setLineDash([]),I.lineDashOffset=0),!uC){const{filter:g}=I;"none"!==g&&""!==g&&(I.filter="none")}}function LF(I,g){if(g)return!0;const C=MA.singularValueDecompose2dScale(I);C[0]=Math.fround(C[0]),C[1]=Math.fround(C[1]);const A=Math.fround((globalThis.devicePixelRatio||1)*zA.PDF_TO_CSS_UNITS);return C[0]<=A&&C[1]<=A}const EF=["butt","round","square"],jF=["miter","round","bevel"],xF={},OF={};var rF,vF,PF;const fF=class I{constructor(I,g,C,A,l,{optionalContentConfig:Z,markedContentStack:d=null},B,F){V(this,rF),this.ctx=I,this.current=new pF(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=g,this.objs=C,this.canvasFactory=A,this.filterFactory=l,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=d||[],this.optionalContentConfig=Z,this.cachedCanvases=new eF(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=B,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=F,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(I,g=null){return"string"==typeof I?I.startsWith("g_")?this.commonObjs.get(I):this.objs.get(I):g}beginDrawing({transform:I,viewport:g,transparency:C=!1,background:A=null}){const l=this.ctx.canvas.width,Z=this.ctx.canvas.height,d=this.ctx.fillStyle;if(this.ctx.fillStyle=A||"#ffffff",this.ctx.fillRect(0,0,l,Z),this.ctx.fillStyle=d,C){const I=this.cachedCanvases.getCanvas("transparent",l,Z);this.compositeCtx=this.ctx,this.transparentCanvas=I.canvas,this.ctx=I.context,this.ctx.save(),this.ctx.transform(...Ql(this.compositeCtx))}this.ctx.save(),TF(this.ctx),I&&(this.ctx.transform(...I),this.outputScaleX=I[0],this.outputScaleY=I[0]),this.ctx.transform(...g.transform),this.viewportScale=g.scale,this.baseTransform=Ql(this.ctx)}executeOperatorList(I,g,C,A){const l=I.argsArray,Z=I.fnArray;let d=g||0;const B=l.length;if(B===d)return d;const F=B-d>DF&&"function"==typeof C,i=F?Date.now()+MF:0;let c=0;const G=this.commonObjs,W=this.objs;let V;for(;;){if(void 0!==A&&d===A.nextBreakPoint)return A.breakIt(d,C),d;if(V=Z[d],V!==qC.dependency)this[V].apply(this,l[d]);else for(const I of l[d]){const g=I.startsWith("g_")?G:W;if(!g.has(I))return g.get(I,C),d}if(d++,d===B)return d;if(F&&++c>DF){if(Date.now()>i)return C(),d;c=0}}}endDrawing(){U(this,rF,vF).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const I of this._cachedBitmapsMap.values()){for(const g of I.values())typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement&&(g.width=g.height=0);I.clear()}this._cachedBitmapsMap.clear(),U(this,rF,PF).call(this)}_scaleImage(I,g){const C=I.width??I.displayWidth,A=I.height??I.displayHeight;let l,Z,d=Math.max(Math.hypot(g[0],g[1]),1),B=Math.max(Math.hypot(g[2],g[3]),1),F=C,i=A,c="prescale1";for(;d>2&&F>1||B>2&&i>1;){let g=F,C=i;d>2&&F>1&&(g=F>=16384?Math.floor(F/2)-1||1:Math.ceil(F/2),d/=F/g),B>2&&i>1&&(C=i>=16384?Math.floor(i/2)-1||1:Math.ceil(i)/2,B/=i/C),l=this.cachedCanvases.getCanvas(c,g,C),Z=l.context,Z.clearRect(0,0,g,C),Z.drawImage(I,0,0,F,i,0,0,g,C),I=l.canvas,F=g,i=C,c="prescale1"===c?"prescale2":"prescale1"}return{img:I,paintWidth:F,paintHeight:i}}_createMaskCanvas(I){const g=this.ctx,{width:C,height:A}=I,l=this.current.fillColor,Z=this.current.patternFill,d=Ql(g);let B,F,i,c;if((I.bitmap||I.data)&&I.count>1){const g=I.bitmap||I.data.buffer;F=JSON.stringify(Z?d:[d.slice(0,4),l]),B=this._cachedBitmapsMap.get(g),B||(B=new Map,this._cachedBitmapsMap.set(g,B));const C=B.get(F);if(C&&!Z){const I=Math.round(Math.min(d[0],d[2])+d[4]),g=Math.round(Math.min(d[1],d[3])+d[5]);return{canvas:C,offsetX:I,offsetY:g}}i=C}i||(c=this.cachedCanvases.getCanvas("maskCanvas",C,A),KF(c.context,I));let G=MA.transform(d,[1/C,0,0,-1/A,0,0]);G=MA.transform(G,[1,0,0,1,0,-A]);const[W,V,R,U]=MA.getAxialAlignedBoundingBox([0,0,C,A],G),b=Math.round(R-W)||1,s=Math.round(U-V)||1,Q=this.cachedCanvases.getCanvas("fillCanvas",b,s),m=Q.context,N=W,h=V;m.translate(-N,-h),m.transform(...G),i||(i=this._scaleImage(c.canvas,ml(m)),i=i.img,B&&Z&&B.set(F,i)),m.imageSmoothingEnabled=LF(Ql(m),I.interpolate),yF(m,i,0,0,i.width,i.height,0,0,C,A),m.globalCompositeOperation="source-in";const n=MA.transform(ml(m),[1,0,0,1,-N,-h]);return m.fillStyle=Z?l.getPattern(g,this,n,RF.FILL):l,m.fillRect(0,0,C,A),B&&!Z&&(this.cachedCanvases.delete("fillCanvas"),B.set(F,Q.canvas)),{canvas:Q.canvas,offsetX:Math.round(N),offsetY:Math.round(h)}}setLineWidth(I){I!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=I,this.ctx.lineWidth=I}setLineCap(I){this.ctx.lineCap=EF[I]}setLineJoin(I){this.ctx.lineJoin=jF[I]}setMiterLimit(I){this.ctx.miterLimit=I}setDash(I,g){const C=this.ctx;void 0!==C.setLineDash&&(C.setLineDash(I),C.lineDashOffset=g)}setRenderingIntent(I){}setFlatness(I){}setGState(I){for(const[g,C]of I)switch(g){case"LW":this.setLineWidth(C);break;case"LC":this.setLineCap(C);break;case"LJ":this.setLineJoin(C);break;case"ML":this.setMiterLimit(C);break;case"D":this.setDash(C[0],C[1]);break;case"RI":this.setRenderingIntent(C);break;case"FL":this.setFlatness(C);break;case"Font":this.setFont(C[0],C[1]);break;case"CA":this.current.strokeAlpha=C;break;case"ca":this.current.fillAlpha=C,this.ctx.globalAlpha=C;break;case"BM":this.ctx.globalCompositeOperation=C;break;case"SMask":this.current.activeSMask=C?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(C);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const I=this.inSMaskMode;this.current.activeSMask&&!I?this.beginSMaskMode():!this.current.activeSMask&&I&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const I=this.ctx.canvas.width,g=this.ctx.canvas.height,C="smaskGroupAt"+this.groupLevel,A=this.cachedCanvases.getCanvas(C,I,g);this.suspendedCtx=this.ctx,this.ctx=A.context;const l=this.ctx;l.setTransform(...Ql(this.suspendedCtx)),zF(this.suspendedCtx,l),HF(l,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),zF(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(I){if(!this.current.activeSMask)return;I?(I[0]=Math.floor(I[0]),I[1]=Math.floor(I[1]),I[2]=Math.ceil(I[2]),I[3]=Math.ceil(I[3])):I=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const g=this.current.activeSMask,C=this.suspendedCtx;this.composeSMask(C,g,this.ctx,I),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}composeSMask(I,g,C,A){const l=A[0],Z=A[1],d=A[2]-l,B=A[3]-Z;0===d||0===B||(this.genericComposeSMask(g.context,C,d,B,g.subtype,g.backdrop,g.transferMap,l,Z,g.offsetX,g.offsetY),I.save(),I.globalAlpha=1,I.globalCompositeOperation="source-over",I.setTransform(1,0,0,1,0,0),I.drawImage(C.canvas,0,0),I.restore())}genericComposeSMask(I,g,C,A,l,Z,d,B,F,i,c){let G=I.canvas,W=B-i,V=F-c;if(Z){const g=MA.makeHexColor(...Z);if(W<0||V<0||W+C>G.width||V+A>G.height){const I=this.cachedCanvases.getCanvas("maskExtension",C,A),l=I.context;l.drawImage(G,-W,-V),l.globalCompositeOperation="destination-atop",l.fillStyle=g,l.fillRect(0,0,C,A),l.globalCompositeOperation="source-over",G=I.canvas,W=V=0}else{I.save(),I.globalAlpha=1,I.setTransform(1,0,0,1,0,0);const l=new Path2D;l.rect(W,V,C,A),I.clip(l),I.globalCompositeOperation="destination-atop",I.fillStyle=g,I.fillRect(W,V,C,A),I.restore()}}g.save(),g.globalAlpha=1,g.setTransform(1,0,0,1,0,0),"Alpha"===l&&d?g.filter=this.filterFactory.addAlphaFilter(d):"Luminosity"===l&&(g.filter=this.filterFactory.addLuminosityFilter(d));const R=new Path2D;R.rect(B,F,C,A),g.clip(R),g.globalCompositeOperation="destination-in",g.drawImage(G,W,V,C,A,B,F,C,A),g.restore()}save(){this.inSMaskMode?(zF(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const I=this.current;this.stateStack.push(I),this.current=I.clone()}restore(){0===this.stateStack.length&&this.inSMaskMode&&this.endSMaskMode(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),zF(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(I,g,C,A,l,Z){this.ctx.transform(I,g,C,A,l,Z),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(I,g,C){const A=this.ctx,l=this.current;let Z,d,B=l.x,F=l.y;const i=Ql(A),c=0===i[0]&&0===i[3]||0===i[1]&&0===i[2],G=c?C.slice(0):null;for(let W=0,V=0,R=I.length;W<R;W++)switch(0|I[W]){case qC.rectangle:B=g[V++],F=g[V++];const I=g[V++],C=g[V++],W=B+I,R=F+C;A.moveTo(B,F),0===I||0===C?A.lineTo(W,R):(A.lineTo(W,F),A.lineTo(W,R),A.lineTo(B,R)),c||l.updateRectMinMax(i,[B,F,W,R]),A.closePath();break;case qC.moveTo:B=g[V++],F=g[V++],A.moveTo(B,F),c||l.updatePathMinMax(i,B,F);break;case qC.lineTo:B=g[V++],F=g[V++],A.lineTo(B,F),c||l.updatePathMinMax(i,B,F);break;case qC.curveTo:Z=B,d=F,B=g[V+4],F=g[V+5],A.bezierCurveTo(g[V],g[V+1],g[V+2],g[V+3],B,F),l.updateCurvePathMinMax(i,Z,d,g[V],g[V+1],g[V+2],g[V+3],B,F,G),V+=6;break;case qC.curveTo2:Z=B,d=F,A.bezierCurveTo(B,F,g[V],g[V+1],g[V+2],g[V+3]),l.updateCurvePathMinMax(i,Z,d,B,F,g[V],g[V+1],g[V+2],g[V+3],G),B=g[V+2],F=g[V+3],V+=4;break;case qC.curveTo3:Z=B,d=F,B=g[V+2],F=g[V+3],A.bezierCurveTo(g[V],g[V+1],B,F,B,F),l.updateCurvePathMinMax(i,Z,d,g[V],g[V+1],B,F,B,F,G),V+=4;break;case qC.closePath:A.closePath();break}c&&l.updateScalingPathMinMax(i,G),l.setCurrentPoint(B,F)}closePath(){this.ctx.closePath()}stroke(I=!0){const g=this.ctx,C=this.current.strokeColor;g.globalAlpha=this.current.strokeAlpha,this.contentVisible&&("object"==typeof C&&null!=C&&C.getPattern?(g.save(),g.strokeStyle=C.getPattern(g,this,ml(g),RF.STROKE),this.rescaleAndStroke(!1),g.restore()):this.rescaleAndStroke(!0)),I&&this.consumePath(this.current.getClippedPathBoundingBox()),g.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(I=!0){const g=this.ctx,C=this.current.fillColor,A=this.current.patternFill;let l=!1;A&&(g.save(),g.fillStyle=C.getPattern(g,this,ml(g),RF.FILL),l=!0);const Z=this.current.getClippedPathBoundingBox();this.contentVisible&&null!==Z&&(this.pendingEOFill?(g.fill("evenodd"),this.pendingEOFill=!1):g.fill()),l&&g.restore(),I&&this.consumePath(Z)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=xF}eoClip(){this.pendingClip=OF}beginText(){this.current.textMatrix=pC,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const I=this.pendingTextPaths,g=this.ctx;if(void 0!==I){g.save(),g.beginPath();for(const C of I)g.setTransform(...C.transform),g.translate(C.x,C.y),C.addToPath(g,C.fontSize);g.restore(),g.clip(),g.beginPath(),delete this.pendingTextPaths}else g.beginPath()}setCharSpacing(I){this.current.charSpacing=I}setWordSpacing(I){this.current.wordSpacing=I}setHScale(I){this.current.textHScale=I/100}setLeading(I){this.current.leading=-I}setFont(I,g){var C;const A=this.commonObjs.get(I),l=this.current;if(!A)throw new Error(`Can't find font for ${I}`);if(l.fontMatrix=A.fontMatrix||kC,(0===l.fontMatrix[0]||0===l.fontMatrix[3])&&lA("Invalid font matrix for font "+I),g<0?(g=-g,l.fontDirection=-1):l.fontDirection=1,this.current.font=A,this.current.fontSize=g,A.isType3Font)return;const Z=A.loadedName||"sans-serif",d=(null==(C=A.systemFontInfo)?void 0:C.css)||`"${Z}", ${A.fallbackName}`;let B="normal";A.black?B="900":A.bold&&(B="bold");const F=A.italic?"italic":"normal";let i=g;g<SF?i=SF:g>JF&&(i=JF),this.current.fontSizeScale=g/i,this.ctx.font=`${F} ${B} ${i}px ${d}`}setTextRenderingMode(I){this.current.textRenderingMode=I}setTextRise(I){this.current.textRise=I}moveText(I,g){this.current.x=this.current.lineX+=I,this.current.y=this.current.lineY+=g}setLeadingMoveText(I,g){this.setLeading(-g),this.moveText(I,g)}setTextMatrix(I,g,C,A,l,Z){this.current.textMatrix=[I,g,C,A,l,Z],this.current.textMatrixScale=Math.hypot(I,g),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(I,g,C,A,l){const Z=this.ctx,d=this.current,B=d.font,F=d.textRenderingMode,i=d.fontSize/d.fontSizeScale,c=F&rC.FILL_STROKE_MASK,G=!!(F&rC.ADD_TO_PATH_FLAG),W=d.patternFill&&!B.missingFile,V=d.patternStroke&&!B.missingFile;let R;(B.disableFontFace||G||W||V)&&(R=B.getPathGenerator(this.commonObjs,I)),B.disableFontFace||W||V?(Z.save(),Z.translate(g,C),Z.beginPath(),R(Z,i),(c===rC.FILL||c===rC.FILL_STROKE)&&(A&&Z.setTransform(...A),Z.fill()),(c===rC.STROKE||c===rC.FILL_STROKE)&&(l&&Z.setTransform(...l),Z.stroke()),Z.restore()):((c===rC.FILL||c===rC.FILL_STROKE)&&Z.fillText(I,g,C),(c===rC.STROKE||c===rC.FILL_STROKE)&&Z.strokeText(I,g,C)),G&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:Ql(Z),x:g,y:C,fontSize:i,addToPath:R})}get isFontSubpixelAAEnabled(){const{context:I}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);I.scale(1.5,1),I.fillText("I",0,10);const g=I.getImageData(0,0,10,10).data;let C=!1;for(let A=3;A<g.length;A+=4)if(g[A]>0&&g[A]<255){C=!0;break}return iA(this,"isFontSubpixelAAEnabled",C)}showText(I){const g=this.current,C=g.font;if(C.isType3Font)return this.showType3Text(I);const A=g.fontSize;if(0===A)return;const l=this.ctx,Z=g.fontSizeScale,d=g.charSpacing,B=g.wordSpacing,F=g.fontDirection,i=g.textHScale*F,c=I.length,G=C.vertical,W=G?1:-1,V=C.defaultVMetrics,R=A*g.fontMatrix[0],U=g.textRenderingMode===rC.FILL&&!C.disableFontFace&&!g.patternFill;let b,s;if(l.save(),l.transform(...g.textMatrix),l.translate(g.x,g.y+g.textRise),F>0?l.scale(i,-1):l.scale(i,1),g.patternFill){l.save();const I=g.fillColor.getPattern(l,this,ml(l),RF.FILL);b=Ql(l),l.restore(),l.fillStyle=I}if(g.patternStroke){l.save();const I=g.strokeColor.getPattern(l,this,ml(l),RF.STROKE);s=Ql(l),l.restore(),l.strokeStyle=I}let Q=g.lineWidth;const m=g.textMatrixScale;if(0===m||0===Q){const I=g.textRenderingMode&rC.FILL_STROKE_MASK;(I===rC.STROKE||I===rC.FILL_STROKE)&&(Q=this.getSinglePixelWidth())}else Q/=m;if(1!==Z&&(l.scale(Z,Z),Q/=Z),l.lineWidth=Q,C.isInvalidPDFjsFont){const C=[];let A=0;for(const g of I)C.push(g.unicode),A+=g.width;return l.fillText(C.join(""),0,0),g.x+=A*R*i,l.restore(),void this.compose()}let N,h=0;for(N=0;N<c;++N){const g=I[N];if("number"==typeof g){h+=W*g*A/1e3;continue}let i=!1;const c=(g.isSpace?B:0)+d,Q=g.fontChar,m=g.accent;let n,a,o=g.width;if(G){const I=g.vmetric||V,C=-(g.vmetric?I[1]:.5*o)*R,A=I[2]*R;o=I?-I[0]:o,n=C/Z,a=(h+A)/Z}else n=h/Z,a=0;if(C.remeasure&&o>0){const I=1e3*l.measureText(Q).width/A*Z;if(o<I&&this.isFontSubpixelAAEnabled){const g=o/I;i=!0,l.save(),l.scale(g,1),n/=g}else o!==I&&(n+=(o-I)/2e3*A/Z)}if(this.contentVisible&&(g.isInFont||C.missingFile))if(U&&!m)l.fillText(Q,n,a);else if(this.paintChar(Q,n,a,b,s),m){const I=n+A*m.offset.x/Z,g=a-A*m.offset.y/Z;this.paintChar(m.fontChar,I,g,b,s)}const w=G?o*R-c*F:o*R+c*F;h+=w,i&&l.restore()}G?g.y-=h:g.x+=h*i,l.restore(),this.compose()}showType3Text(I){const g=this.ctx,C=this.current,A=C.font,l=C.fontSize,Z=C.fontDirection,d=A.vertical?1:-1,B=C.charSpacing,F=C.wordSpacing,i=C.textHScale*Z,c=C.fontMatrix||kC,G=I.length,W=C.textRenderingMode===rC.INVISIBLE;let V,R,U,b;if(!W&&0!==l){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,g.save(),g.transform(...C.textMatrix),g.translate(C.x,C.y),g.scale(i,Z),V=0;V<G;++V){if(R=I[V],"number"==typeof R){b=d*R*l/1e3,this.ctx.translate(b,0),C.x+=b*i;continue}const Z=(R.isSpace?F:0)+B,G=A.charProcOperatorList[R.operatorListId];G?(this.contentVisible&&(this.processingType3=R,this.save(),g.scale(l,l),g.transform(...c),this.executeOperatorList(G),this.restore()),U=MA.applyTransform([R.width,0],c)[0]*l+Z,g.translate(U,0),C.x+=U*i):lA(`Type3 character "${R.operatorListId}" is not available.`)}g.restore(),this.processingType3=null}}setCharWidth(I,g){}setCharWidthAndBounds(I,g,C,A,l,Z){this.ctx.rect(C,A,l-C,Z-A),this.ctx.clip(),this.endPath()}getColorN_Pattern(g){let C;if("TilingPattern"===g[0]){const A=g[1],l=this.baseTransform||Ql(this.ctx),Z={createCanvasGraphics:g=>new I(g,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};C=new wF(g,A,this.ctx,Z,l)}else C=this._getPattern(g[1],g[2]);return C}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments),this.current.patternStroke=!0}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(I,g,C){this.ctx.strokeStyle=this.current.strokeColor=MA.makeHexColor(I,g,C),this.current.patternStroke=!1}setStrokeTransparent(){this.ctx.strokeStyle=this.current.strokeColor="transparent",this.current.patternStroke=!1}setFillRGBColor(I,g,C){this.ctx.fillStyle=this.current.fillColor=MA.makeHexColor(I,g,C),this.current.patternFill=!1}setFillTransparent(){this.ctx.fillStyle=this.current.fillColor="transparent",this.current.patternFill=!1}_getPattern(I,g=null){let C;return this.cachedPatterns.has(I)?C=this.cachedPatterns.get(I):(C=nF(this.getObject(I)),this.cachedPatterns.set(I,C)),g&&(C.matrix=g),C}shadingFill(I){if(!this.contentVisible)return;const g=this.ctx;this.save();const C=this._getPattern(I);g.fillStyle=C.getPattern(g,this,ml(g),RF.SHADING);const A=ml(g);if(A){const{width:I,height:C}=g.canvas,[l,Z,d,B]=MA.getAxialAlignedBoundingBox([0,0,I,C],A);this.ctx.fillRect(l,Z,d-l,B-Z)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){ZA("Should not call beginInlineImage")}beginImageData(){ZA("Should not call beginImageData")}paintFormXObjectBegin(I,g){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),I&&this.transform(...I),this.baseTransform=Ql(this.ctx),g)){const I=g[2]-g[0],C=g[3]-g[1];this.ctx.rect(g[0],g[1],I,C),this.current.updateRectMinMax(Ql(this.ctx),g),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(I){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const g=this.ctx;I.isolated||AA("TODO: Support non-isolated groups."),I.knockout&&lA("Knockout groups not supported.");const C=Ql(g);if(I.matrix&&g.transform(...I.matrix),!I.bbox)throw new Error("Bounding box is required.");let A=MA.getAxialAlignedBoundingBox(I.bbox,Ql(g));const l=[0,0,g.canvas.width,g.canvas.height];A=MA.intersect(A,l)||[0,0,0,0];const Z=Math.floor(A[0]),d=Math.floor(A[1]),B=Math.max(Math.ceil(A[2])-Z,1),F=Math.max(Math.ceil(A[3])-d,1);this.current.startNewPathAndClipBox([0,0,B,F]);let i="groupAt"+this.groupLevel;I.smask&&(i+="_smask_"+this.smaskCounter++%2);const c=this.cachedCanvases.getCanvas(i,B,F),G=c.context;G.translate(-Z,-d),G.transform(...C),I.smask?this.smaskStack.push({canvas:c.canvas,context:G,offsetX:Z,offsetY:d,subtype:I.smask.subtype,backdrop:I.smask.backdrop,transferMap:I.smask.transferMap||null,startTransformInverse:null}):(g.setTransform(1,0,0,1,0,0),g.translate(Z,d),g.save()),zF(g,G),this.ctx=G,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(g),this.groupLevel++}endGroup(I){if(!this.contentVisible)return;this.groupLevel--;const g=this.ctx,C=this.groupStack.pop();if(this.ctx=C,this.ctx.imageSmoothingEnabled=!1,I.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const I=Ql(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...I);const C=MA.getAxialAlignedBoundingBox([0,0,g.canvas.width,g.canvas.height],I);this.ctx.drawImage(g.canvas,0,0),this.ctx.restore(),this.compose(C)}}beginAnnotation(I,g,C,A,l){if(U(this,rF,vF).call(this),TF(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),g){const A=g[2]-g[0],Z=g[3]-g[1];if(l&&this.annotationCanvasMap){C=C.slice(),C[4]-=g[0],C[5]-=g[1],g=g.slice(),g[0]=g[1]=0,g[2]=A,g[3]=Z;const[l,d]=MA.singularValueDecompose2dScale(Ql(this.ctx)),{viewportScale:B}=this,F=Math.ceil(A*this.outputScaleX*B),i=Math.ceil(Z*this.outputScaleY*B);this.annotationCanvas=this.canvasFactory.create(F,i);const{canvas:c,context:G}=this.annotationCanvas;this.annotationCanvasMap.set(I,c),this.annotationCanvas.savedCtx=this.ctx,this.ctx=G,this.ctx.save(),this.ctx.setTransform(l,0,0,-d,0,Z*d),TF(this.ctx)}else TF(this.ctx),this.endPath(),this.ctx.rect(g[0],g[1],A,Z),this.ctx.clip(),this.ctx.beginPath()}this.current=new pF(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...C),this.transform(...A)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),U(this,rF,PF).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(I){if(!this.contentVisible)return;const g=I.count;I=this.getObject(I.data,I),I.count=g;const C=this.ctx,A=this.processingType3;if(A&&(void 0===A.compiled&&(A.compiled=uF(I)),A.compiled))return void A.compiled(C);const l=this._createMaskCanvas(I),Z=l.canvas;C.save(),C.setTransform(1,0,0,1,0,0),C.drawImage(Z,l.offsetX,l.offsetY),C.restore(),this.compose()}paintImageMaskXObjectRepeat(I,g,C=0,A=0,l,Z){if(!this.contentVisible)return;I=this.getObject(I.data,I);const d=this.ctx;d.save();const B=Ql(d);d.transform(g,C,A,l,0,0);const F=this._createMaskCanvas(I);d.setTransform(1,0,0,1,F.offsetX-B[4],F.offsetY-B[5]);for(let i=0,c=Z.length;i<c;i+=2){const I=MA.transform(B,[g,C,A,l,Z[i],Z[i+1]]),[c,G]=MA.applyTransform([0,0],I);d.drawImage(F.canvas,c,G)}d.restore(),this.compose()}paintImageMaskXObjectGroup(I){if(!this.contentVisible)return;const g=this.ctx,C=this.current.fillColor,A=this.current.patternFill;for(const l of I){const{data:I,width:Z,height:d,transform:B}=l,F=this.cachedCanvases.getCanvas("maskCanvas",Z,d),i=F.context;i.save();const c=this.getObject(I,l);KF(i,c),i.globalCompositeOperation="source-in",i.fillStyle=A?C.getPattern(i,this,ml(g),RF.FILL):C,i.fillRect(0,0,Z,d),i.restore(),g.save(),g.transform(...B),g.scale(1,-1),yF(g,F.canvas,0,0,Z,d,0,-1,1,1),g.restore()}this.compose()}paintImageXObject(I){if(!this.contentVisible)return;const g=this.getObject(I);g?this.paintInlineImageXObject(g):lA("Dependent image isn't ready yet")}paintImageXObjectRepeat(I,g,C,A){if(!this.contentVisible)return;const l=this.getObject(I);if(!l)return void lA("Dependent image isn't ready yet");const Z=l.width,d=l.height,B=[];for(let F=0,i=A.length;F<i;F+=2)B.push({transform:[g,0,0,C,A[F],A[F+1]],x:0,y:0,w:Z,h:d});this.paintInlineImageXObjectGroup(l,B)}applyTransferMapsToCanvas(I){return"none"!==this.current.transferMaps&&(I.filter=this.current.transferMaps,I.drawImage(I.canvas,0,0),I.filter="none"),I.canvas}applyTransferMapsToBitmap(I){if("none"===this.current.transferMaps)return I.bitmap;const{bitmap:g,width:C,height:A}=I,l=this.cachedCanvases.getCanvas("inlineImage",C,A),Z=l.context;return Z.filter=this.current.transferMaps,Z.drawImage(g,0,0),Z.filter="none",l.canvas}paintInlineImageXObject(I){if(!this.contentVisible)return;const g=I.width,C=I.height,A=this.ctx;if(this.save(),!uC){const{filter:I}=A;"none"!==I&&""!==I&&(A.filter="none")}let l;if(A.scale(1/g,-1/C),I.bitmap)l=this.applyTransferMapsToBitmap(I);else if("function"==typeof HTMLElement&&I instanceof HTMLElement||!I.data)l=I;else{const A=this.cachedCanvases.getCanvas("inlineImage",g,C).context;kF(A,I),l=this.applyTransferMapsToCanvas(A)}const Z=this._scaleImage(l,ml(A));A.imageSmoothingEnabled=LF(Ql(A),I.interpolate),yF(A,Z.img,0,0,Z.paintWidth,Z.paintHeight,0,-C,g,C),this.compose(),this.restore()}paintInlineImageXObjectGroup(I,g){if(!this.contentVisible)return;const C=this.ctx;let A;if(I.bitmap)A=I.bitmap;else{const g=I.width,C=I.height,l=this.cachedCanvases.getCanvas("inlineImage",g,C).context;kF(l,I),A=this.applyTransferMapsToCanvas(l)}for(const l of g)C.save(),C.transform(...l.transform),C.scale(1,-1),yF(C,A,l.x,l.y,l.w,l.h,0,-1,1,1),C.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(I){}markPointProps(I,g){}beginMarkedContent(I){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(I,g){"OC"===I?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(g)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(I){const g=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(I);const C=this.ctx;this.pendingClip&&(g||(this.pendingClip===OF?C.clip("evenodd"):C.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),C.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const I=Ql(this.ctx);if(0===I[1]&&0===I[2])this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(I[0]),Math.abs(I[3]));else{const g=Math.abs(I[0]*I[3]-I[2]*I[1]),C=Math.hypot(I[0],I[2]),A=Math.hypot(I[1],I[3]);this._cachedGetSinglePixelWidth=Math.max(C,A)/g}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(-1===this._cachedScaleForStroking[0]){const{lineWidth:I}=this.current,{a:g,b:C,c:A,d:l}=this.ctx.getTransform();let Z,d;if(0===C&&0===A){const C=Math.abs(g),A=Math.abs(l);if(C===A)if(0===I)Z=d=1/C;else{const g=C*I;Z=d=g<1?1/g:1}else if(0===I)Z=1/C,d=1/A;else{const g=C*I,l=A*I;Z=g<1?1/g:1,d=l<1?1/l:1}}else{const B=Math.abs(g*l-C*A),F=Math.hypot(g,C),i=Math.hypot(A,l);if(0===I)Z=i/B,d=F/B;else{const g=I*B;Z=i>g?i/g:1,d=F>g?F/g:1}}this._cachedScaleForStroking[0]=Z,this._cachedScaleForStroking[1]=d}return this._cachedScaleForStroking}rescaleAndStroke(I){const{ctx:g}=this,{lineWidth:C}=this.current,[A,l]=this.getScaleForStroking();if(g.lineWidth=C||1,1===A&&1===l)return void g.stroke();const Z=g.getLineDash();if(I&&g.save(),g.scale(A,l),Z.length>0){const I=Math.max(A,l);g.setLineDash(Z.map((g=>g/I))),g.lineDashOffset/=I}g.stroke(),I&&g.restore()}isContentVisible(){for(let I=this.markedContentStack.length-1;I>=0;I--)if(!this.markedContentStack[I].visible)return!1;return!0}};rF=new WeakSet,vF=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.current.activeSMask=null,this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},PF=function(){if(this.pageColors){const I=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if("none"!==I){const g=this.ctx.filter;this.ctx.filter=I,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=g}}};let _F=fF;for(const RQ in qC)void 0!==_F.prototype[RQ]&&(_F.prototype[qC[RQ]]=_F.prototype[RQ]);var qF,$F;class Ii{static get workerPort(){return W(this,qF)}static set workerPort(I){if(!(typeof Worker<"u"&&I instanceof Worker)&&null!==I)throw new Error("Invalid `workerPort` type.");R(this,qF,I)}static get workerSrc(){return W(this,$F)}static set workerSrc(I){if("string"!=typeof I)throw new Error("Invalid `workerSrc` type.");R(this,$F,I)}}qF=new WeakMap,$F=new WeakMap,V(Ii,qF,null),V(Ii,$F,"");const gi={UNKNOWN:0,DATA:1,ERROR:2},Ci={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function Ai(){}function li(I){switch(I instanceof Error||"object"==typeof I&&null!==I||ZA('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),I.name){case"AbortException":return new sA(I.message);case"MissingPDFException":return new RA(I.message);case"PasswordException":return new GA(I.message,I.code);case"UnexpectedResponseException":return new UA(I.message,I.status);case"UnknownErrorException":return new WA(I.message,I.details);default:return new WA(I.message,I.toString())}}var Zi,di,Bi,Fi,ii,ci,Gi,Wi;class Vi{constructor(I,g,C){V(this,di),V(this,Zi,new AbortController),this.sourceName=I,this.targetName=g,this.comObj=C,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),C.addEventListener("message",U(this,di,Bi).bind(this),{signal:W(this,Zi).signal})}on(I,g){const C=this.actionHandler;if(C[I])throw new Error(`There is already an actionName called "${I}"`);C[I]=g}send(I,g,C){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,data:g},C)}sendWithPromise(I,g,C){const A=this.callbackId++,l=Promise.withResolvers();this.callbackCapabilities[A]=l;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,callbackId:A,data:g},C)}catch(Z){l.reject(Z)}return l.promise}sendWithStream(I,g,C,A){const l=this.streamId++,Z=this.sourceName,d=this.targetName,B=this.comObj;return new ReadableStream({start:C=>{const F=Promise.withResolvers();return this.streamControllers[l]={controller:C,startCall:F,pullCall:null,cancelCall:null,isClosed:!1},B.postMessage({sourceName:Z,targetName:d,action:I,streamId:l,data:g,desiredSize:C.desiredSize},A),F.promise},pull:I=>{const g=Promise.withResolvers();return this.streamControllers[l].pullCall=g,B.postMessage({sourceName:Z,targetName:d,stream:Ci.PULL,streamId:l,desiredSize:I.desiredSize}),g.promise},cancel:I=>{dA(I instanceof Error,"cancel must have a valid reason");const g=Promise.withResolvers();return this.streamControllers[l].cancelCall=g,this.streamControllers[l].isClosed=!0,B.postMessage({sourceName:Z,targetName:d,stream:Ci.CANCEL,streamId:l,reason:li(I)}),g.promise}},C)}destroy(){var I;null==(I=W(this,Zi))||I.abort(),R(this,Zi,null)}}Zi=new WeakMap,di=new WeakSet,Bi=function({data:I}){if(I.targetName!==this.sourceName)return;if(I.stream)return void U(this,di,ii).call(this,I);if(I.callback){const g=I.callbackId,C=this.callbackCapabilities[g];if(!C)throw new Error(`Cannot resolve callback ${g}`);if(delete this.callbackCapabilities[g],I.callback===gi.DATA)C.resolve(I.data);else{if(I.callback!==gi.ERROR)throw new Error("Unexpected callback case");C.reject(li(I.reason))}return}const g=this.actionHandler[I.action];if(!g)throw new Error(`Unknown action from worker: ${I.action}`);if(I.callbackId){const C=this.sourceName,A=I.sourceName,l=this.comObj;Promise.try(g,I.data).then((function(g){l.postMessage({sourceName:C,targetName:A,callback:gi.DATA,callbackId:I.callbackId,data:g})}),(function(g){l.postMessage({sourceName:C,targetName:A,callback:gi.ERROR,callbackId:I.callbackId,reason:li(g)})}))}else I.streamId?U(this,di,Fi).call(this,I):g(I.data)},Fi=function(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this,d=this.actionHandler[I.action],B={enqueue(I,Z=1,d){if(this.isCancelled)return;const B=this.desiredSize;this.desiredSize-=Z,B>0&&this.desiredSize<=0&&(this.sinkCapability=Promise.withResolvers(),this.ready=this.sinkCapability.promise),l.postMessage({sourceName:C,targetName:A,stream:Ci.ENQUEUE,streamId:g,chunk:I},d)},close(){this.isCancelled||(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:Ci.CLOSE,streamId:g}),delete Z.streamSinks[g])},error(I){dA(I instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:Ci.ERROR,streamId:g,reason:li(I)}))},sinkCapability:Promise.withResolvers(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:I.desiredSize,ready:null};B.sinkCapability.resolve(),B.ready=B.sinkCapability.promise,this.streamSinks[g]=B,Promise.try(d,I.data,B).then((function(){l.postMessage({sourceName:C,targetName:A,stream:Ci.START_COMPLETE,streamId:g,success:!0})}),(function(I){l.postMessage({sourceName:C,targetName:A,stream:Ci.START_COMPLETE,streamId:g,reason:li(I)})}))},ii=function(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this.streamControllers[g],d=this.streamSinks[g];switch(I.stream){case Ci.START_COMPLETE:I.success?Z.startCall.resolve():Z.startCall.reject(li(I.reason));break;case Ci.PULL_COMPLETE:I.success?Z.pullCall.resolve():Z.pullCall.reject(li(I.reason));break;case Ci.PULL:if(!d){l.postMessage({sourceName:C,targetName:A,stream:Ci.PULL_COMPLETE,streamId:g,success:!0});break}d.desiredSize<=0&&I.desiredSize>0&&d.sinkCapability.resolve(),d.desiredSize=I.desiredSize,Promise.try(d.onPull||Ai).then((function(){l.postMessage({sourceName:C,targetName:A,stream:Ci.PULL_COMPLETE,streamId:g,success:!0})}),(function(I){l.postMessage({sourceName:C,targetName:A,stream:Ci.PULL_COMPLETE,streamId:g,reason:li(I)})}));break;case Ci.ENQUEUE:if(dA(Z,"enqueue should have stream controller"),Z.isClosed)break;Z.controller.enqueue(I.chunk);break;case Ci.CLOSE:if(dA(Z,"close should have stream controller"),Z.isClosed)break;Z.isClosed=!0,Z.controller.close(),U(this,di,ci).call(this,Z,g);break;case Ci.ERROR:dA(Z,"error should have stream controller"),Z.controller.error(li(I.reason)),U(this,di,ci).call(this,Z,g);break;case Ci.CANCEL_COMPLETE:I.success?Z.cancelCall.resolve():Z.cancelCall.reject(li(I.reason)),U(this,di,ci).call(this,Z,g);break;case Ci.CANCEL:if(!d)break;const B=li(I.reason);Promise.try(d.onCancel||Ai,B).then((function(){l.postMessage({sourceName:C,targetName:A,stream:Ci.CANCEL_COMPLETE,streamId:g,success:!0})}),(function(I){l.postMessage({sourceName:C,targetName:A,stream:Ci.CANCEL_COMPLETE,streamId:g,reason:li(I)})})),d.sinkCapability.reject(B),d.isCancelled=!0,delete this.streamSinks[g];break;default:throw new Error("Unexpected stream case")}},ci=async function(I,g){var C,A,l;await Promise.allSettled([null==(C=I.startCall)?void 0:C.promise,null==(A=I.pullCall)?void 0:A.promise,null==(l=I.cancelCall)?void 0:l.promise]),delete this.streamControllers[g]};class Ri{constructor({parsedData:I,rawData:g}){V(this,Gi),V(this,Wi),R(this,Gi,I),R(this,Wi,g)}getRaw(){return W(this,Wi)}get(I){return W(this,Gi).get(I)??null}getAll(){return hA(W(this,Gi))}has(I){return W(this,Gi).has(I)}}Gi=new WeakMap,Wi=new WeakMap;const Ui=Symbol("INTERNAL");var bi,si,Qi,mi,Ni,hi,ni,ai,oi,wi;class Yi{constructor(I,{name:g,intent:C,usage:A,rbGroups:l}){V(this,bi,!1),V(this,si,!1),V(this,Qi,!1),V(this,mi,!0),R(this,bi,!!(I&TC.DISPLAY)),R(this,si,!!(I&TC.PRINT)),this.name=g,this.intent=C,this.usage=A,this.rbGroups=l}get visible(){if(W(this,Qi))return W(this,mi);if(!W(this,mi))return!1;const{print:I,view:g}=this.usage;return W(this,bi)?"OFF"!==(null==g?void 0:g.viewState):!W(this,si)||"OFF"!==(null==I?void 0:I.printState)}_setVisible(I,g,C=!1){I!==Ui&&ZA("Internal method `_setVisible` called."),R(this,Qi,C),R(this,mi,g)}}bi=new WeakMap,si=new WeakMap,Qi=new WeakMap,mi=new WeakMap;class Si{constructor(I,g=TC.DISPLAY){if(V(this,oi),V(this,Ni,null),V(this,hi,new Map),V(this,ni,null),V(this,ai,null),this.renderingIntent=g,this.name=null,this.creator=null,null!==I){this.name=I.name,this.creator=I.creator,R(this,ai,I.order);for(const C of I.groups)W(this,hi).set(C.id,new Yi(g,C));if("OFF"===I.baseState)for(const I of W(this,hi).values())I._setVisible(Ui,!1);for(const g of I.on)W(this,hi).get(g)._setVisible(Ui,!0);for(const g of I.off)W(this,hi).get(g)._setVisible(Ui,!1);R(this,ni,this.getHash())}}isVisible(I){if(0===W(this,hi).size)return!0;if(!I)return AA("Optional content group not defined."),!0;if("OCG"===I.type)return W(this,hi).has(I.id)?W(this,hi).get(I.id).visible:(lA(`Optional content group not found: ${I.id}`),!0);if("OCMD"===I.type){if(I.expression)return U(this,oi,wi).call(this,I.expression);if(!I.policy||"AnyOn"===I.policy){for(const g of I.ids){if(!W(this,hi).has(g))return lA(`Optional content group not found: ${g}`),!0;if(W(this,hi).get(g).visible)return!0}return!1}if("AllOn"===I.policy){for(const g of I.ids){if(!W(this,hi).has(g))return lA(`Optional content group not found: ${g}`),!0;if(!W(this,hi).get(g).visible)return!1}return!0}if("AnyOff"===I.policy){for(const g of I.ids){if(!W(this,hi).has(g))return lA(`Optional content group not found: ${g}`),!0;if(!W(this,hi).get(g).visible)return!0}return!1}if("AllOff"===I.policy){for(const g of I.ids){if(!W(this,hi).has(g))return lA(`Optional content group not found: ${g}`),!0;if(W(this,hi).get(g).visible)return!1}return!0}return lA(`Unknown optional content policy ${I.policy}.`),!0}return lA(`Unknown group type ${I.type}.`),!0}setVisibility(I,g=!0,C=!0){var A;const l=W(this,hi).get(I);if(l){if(C&&g&&l.rbGroups.length)for(const g of l.rbGroups)for(const C of g)C!==I&&(null==(A=W(this,hi).get(C))||A._setVisible(Ui,!1,!0));l._setVisible(Ui,!!g,!0),R(this,Ni,null)}else lA(`Optional content group not found: ${I}`)}setOCGState({state:I,preserveRB:g}){let C;for(const A of I){switch(A){case"ON":case"OFF":case"Toggle":C=A;continue}const I=W(this,hi).get(A);if(I)switch(C){case"ON":this.setVisibility(A,!0,g);break;case"OFF":this.setVisibility(A,!1,g);break;case"Toggle":this.setVisibility(A,!I.visible,g);break}}R(this,Ni,null)}get hasInitialVisibility(){return null===W(this,ni)||this.getHash()===W(this,ni)}getOrder(){return W(this,hi).size?W(this,ai)?W(this,ai).slice():[...W(this,hi).keys()]:null}getGroups(){return W(this,hi).size>0?hA(W(this,hi)):null}getGroup(I){return W(this,hi).get(I)||null}getHash(){if(null!==W(this,Ni))return W(this,Ni);const I=new hB;for(const[g,C]of W(this,hi))I.update(`${g}:${C.visible}`);return R(this,Ni,I.hexdigest())}}Ni=new WeakMap,hi=new WeakMap,ni=new WeakMap,ai=new WeakMap,oi=new WeakSet,wi=function(I){const g=I.length;if(g<2)return!0;const C=I[0];for(let A=1;A<g;A++){const g=I[A];let l;if(Array.isArray(g))l=U(this,oi,wi).call(this,g);else{if(!W(this,hi).has(g))return lA(`Optional content group not found: ${g}`),!0;l=W(this,hi).get(g).visible}switch(C){case"And":if(!l)return!1;break;case"Or":if(l)return!0;break;case"Not":return!l;default:return!0}}return"And"===C};class Ji{constructor(I,{disableRange:g=!1,disableStream:C=!1}){dA(I,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');const{length:A,initialData:l,progressiveDone:Z,contentDispositionFilename:d}=I;if(this._queuedChunks=[],this._progressiveDone=Z,this._contentDispositionFilename=d,(null==l?void 0:l.length)>0){const I=l instanceof Uint8Array&&l.byteLength===l.buffer.byteLength?l.buffer:new Uint8Array(l).buffer;this._queuedChunks.push(I)}this._pdfDataRangeTransport=I,this._isStreamingSupported=!C,this._isRangeSupported=!g,this._contentLength=A,this._fullRequestReader=null,this._rangeReaders=[],I.addRangeListener(((I,g)=>{this._onReceiveData({begin:I,chunk:g})})),I.addProgressListener(((I,g)=>{this._onProgress({loaded:I,total:g})})),I.addProgressiveReadListener((I=>{this._onReceiveData({chunk:I})})),I.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),I.transportReady()}_onReceiveData({begin:I,chunk:g}){const C=g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength?g.buffer:new Uint8Array(g).buffer;if(void 0===I)this._fullRequestReader?this._fullRequestReader._enqueue(C):this._queuedChunks.push(C);else{const g=this._rangeReaders.some((function(g){return g._begin===I&&(g._enqueue(C),!0)}));dA(g,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var I;return(null==(I=this._fullRequestReader)?void 0:I._loaded)??0}_onProgress(I){var g,C,A,l;void 0===I.total?null==(C=null==(g=this._rangeReaders[0])?void 0:g.onProgress)||C.call(g,{loaded:I.loaded}):null==(l=null==(A=this._fullRequestReader)?void 0:A.onProgress)||l.call(A,{loaded:I.loaded,total:I.total})}_onProgressiveDone(){var I;null==(I=this._fullRequestReader)||I.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(I){const g=this._rangeReaders.indexOf(I);g>=0&&this._rangeReaders.splice(g,1)}getFullReader(){dA(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const I=this._queuedChunks;return this._queuedChunks=null,new Mi(this,I,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new Di(this,I,g);return this._pdfDataRangeTransport.requestDataRange(I,g),this._rangeReaders.push(C),C}cancelAllRequests(I){var g;null==(g=this._fullRequestReader)||g.cancel(I);for(const C of this._rangeReaders.slice(0))C.cancel(I);this._pdfDataRangeTransport.abort()}}class Mi{constructor(I,g,C=!1,A=null){this._stream=I,this._done=C||!1,this._filename=xA(A)?A:null,this._queuedChunks=g||[],this._loaded=0;for(const l of this._queuedChunks)this._loaded+=l.byteLength;this._requests=[],this._headersReady=Promise.resolve(),I._fullRequestReader=this,this.onProgress=null}_enqueue(I){this._done||(this._requests.length>0?this._requests.shift().resolve({value:I,done:!1}):this._queuedChunks.push(I),this._loaded+=I.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class Di{constructor(I,g,C){this._stream=I,this._begin=g,this._end=C,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(I){if(!this._done){if(0===this._requests.length)this._queuedChunk=I;else{this._requests.shift().resolve({value:I,done:!1});for(const I of this._requests)I.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const I=this._queuedChunk;return this._queuedChunk=null,{value:I,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}function ti(I){let g=!0,C=A("filename\\*","i").exec(I);if(C){C=C[1];let I=B(C);return I=unescape(I),I=F(I),I=i(I),Z(I)}if(C=d(I),C){const I=i(C);return Z(I)}if(C=A("filename","i").exec(I),C){C=C[1];let I=B(C);return I=i(I),Z(I)}function A(I,g){return new RegExp("(?:^|;)\\s*"+I+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',g)}function l(I,C){if(I){if(!/^[\x00-\xFF]+$/.test(C))return C;try{const A=new TextDecoder(I,{fatal:!0}),l=mA(C);C=A.decode(l),g=!1}catch{}}return C}function Z(I){return g&&/[\x80-\xff]/.test(I)&&(I=l("utf-8",I),g&&(I=l("iso-8859-1",I))),I}function d(I){const g=[];let C;const l=A("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(C=l.exec(I));){let[,I,A,l]=C;if(I=parseInt(I,10),I in g){if(0===I)break}else g[I]=[A,l]}const Z=[];for(let A=0;A<g.length&&A in g;++A){let[I,C]=g[A];C=B(C),I&&(C=unescape(C),0===A&&(C=F(C))),Z.push(C)}return Z.join("")}function B(I){if(I.startsWith('"')){const g=I.slice(1).split('\\"');for(let I=0;I<g.length;++I){const C=g[I].indexOf('"');-1!==C&&(g[I]=g[I].slice(0,C),g.length=I+1),g[I]=g[I].replaceAll(/\\(.)/g,"$1")}I=g.join('"')}return I}function F(I){const g=I.indexOf("'");if(-1===g)return I;const C=I.slice(0,g),A=I.slice(g+1).replace(/^[^']*'/,"");return l(C,A)}function i(I){return!I.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(I)?I:I.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(I,g,C,A){if("q"===C||"Q"===C)return A=A.replaceAll("_"," "),A=A.replaceAll(/=([0-9a-fA-F]{2})/g,(function(I,g){return String.fromCharCode(parseInt(g,16))})),l(g,A);try{A=atob(A)}catch{}return l(g,A)}))}return""}function Xi(I,g){const C=new Headers;if(!I||!g||"object"!=typeof g)return C;for(const A in g){const I=g[A];void 0!==I&&C.append(A,I)}return C}function Hi(I){try{return new URL(I).origin}catch{}return null}function ei({responseHeaders:I,isHttp:g,rangeChunkSize:C,disableRange:A}){const l={allowRangeRequests:!1,suggestedLength:void 0},Z=parseInt(I.get("Content-Length"),10);return!Number.isInteger(Z)||(l.suggestedLength=Z,Z<=2*C)||A||!g||"bytes"!==I.get("Accept-Ranges")||"identity"!==(I.get("Content-Encoding")||"identity")||(l.allowRangeRequests=!0),l}function yi(I){const g=I.get("Content-Disposition");if(g){let I=ti(g);if(I.includes("%"))try{I=decodeURIComponent(I)}catch{}if(xA(I))return I}return null}function ui(I,g){return 404===I||0===I&&g.startsWith("file:")?new RA('Missing PDF "'+g+'".'):new UA(`Unexpected server response (${I}) while retrieving PDF "${g}".`,I)}function pi(I){return 200===I||206===I}function ki(I,g,C){return{method:"GET",headers:I,signal:C.signal,mode:"cors",credentials:g?"include":"same-origin",redirect:"follow"}}function Ki(I){return I instanceof Uint8Array?I.buffer:I instanceof ArrayBuffer?I:(lA(`getArrayBuffer - unexpected data format: ${I}`),new Uint8Array(I).buffer)}class zi{constructor(I){c(this,"_responseOrigin",null),this.source=I,this.isHttp=/^https?:/i.test(I.url),this.headers=Xi(this.isHttp,I.httpHeaders),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var I;return(null==(I=this._fullRequestReader)?void 0:I._loaded)??0}getFullReader(){return dA(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new Ti(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new Li(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;null==(g=this._fullRequestReader)||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class Ti{constructor(I){this._stream=I,this._reader=null,this._loaded=0,this._filename=null;const g=I.source;this._withCredentials=g.withCredentials||!1,this._contentLength=g.length,this._headersCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange;const C=new Headers(I.headers),A=g.url;fetch(A,ki(C,this._withCredentials,this._abortController)).then((g=>{if(I._responseOrigin=Hi(g.url),!pi(g.status))throw ui(g.status,A);this._reader=g.body.getReader(),this._headersCapability.resolve();const C=g.headers,{allowRangeRequests:l,suggestedLength:Z}=ei({responseHeaders:C,isHttp:I.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=l,this._contentLength=Z||this._contentLength,this._filename=yi(C),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new sA("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var I;await this._headersCapability.promise;const{value:g,done:C}=await this._reader.read();return C?{value:g,done:C}:(this._loaded+=g.byteLength,null==(I=this.onProgress)||I.call(this,{loaded:this._loaded,total:this._contentLength}),{value:Ki(g),done:!1})}cancel(I){var g;null==(g=this._reader)||g.cancel(I),this._abortController.abort()}}class Li{constructor(I,g,C){this._stream=I,this._reader=null,this._loaded=0;const A=I.source;this._withCredentials=A.withCredentials||!1,this._readCapability=Promise.withResolvers(),this._isStreamingSupported=!A.disableStream,this._abortController=new AbortController;const l=new Headers(I.headers);l.append("Range",`bytes=${g}-${C-1}`);const Z=A.url;fetch(Z,ki(l,this._withCredentials,this._abortController)).then((g=>{const C=Hi(g.url);if(C!==I._responseOrigin)throw new Error(`Expected range response-origin "${C}" to match "${I._responseOrigin}".`);if(!pi(g.status))throw ui(g.status,Z);this._readCapability.resolve(),this._reader=g.body.getReader()})).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var I;await this._readCapability.promise;const{value:g,done:C}=await this._reader.read();return C?{value:g,done:C}:(this._loaded+=g.byteLength,null==(I=this.onProgress)||I.call(this,{loaded:this._loaded}),{value:Ki(g),done:!1})}cancel(I){var g;null==(g=this._reader)||g.cancel(I),this._abortController.abort()}}const Ei=200,ji=206;function xi(I){const g=I.response;return"string"!=typeof g?g:mA(g).buffer}class Oi{constructor({url:I,httpHeaders:g,withCredentials:C}){c(this,"_responseOrigin",null),this.url=I,this.isHttp=/^https?:/i.test(I),this.headers=Xi(this.isHttp,g),this.withCredentials=C||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(I,g,C){const A={begin:I,end:g};for(const l in C)A[l]=C[l];return this.request(A)}requestFull(I){return this.request(I)}request(I){const g=new XMLHttpRequest,C=this.currXhrId++,A=this.pendingRequests[C]={xhr:g};g.open("GET",this.url),g.withCredentials=this.withCredentials;for(const[l,Z]of this.headers)g.setRequestHeader(l,Z);return this.isHttp&&"begin"in I&&"end"in I?(g.setRequestHeader("Range",`bytes=${I.begin}-${I.end-1}`),A.expectedStatus=ji):A.expectedStatus=Ei,g.responseType="arraybuffer",I.onError&&(g.onerror=function(C){I.onError(g.status)}),g.onreadystatechange=this.onStateChange.bind(this,C),g.onprogress=this.onProgress.bind(this,C),A.onHeadersReceived=I.onHeadersReceived,A.onDone=I.onDone,A.onError=I.onError,A.onProgress=I.onProgress,g.send(null),C}onProgress(I,g){var C;const A=this.pendingRequests[I];A&&(null==(C=A.onProgress)||C.call(A,g))}onStateChange(I,g){var C,A,l;const Z=this.pendingRequests[I];if(!Z)return;const d=Z.xhr;if(d.readyState>=2&&Z.onHeadersReceived&&(Z.onHeadersReceived(),delete Z.onHeadersReceived),4!==d.readyState||!(I in this.pendingRequests))return;if(delete this.pendingRequests[I],0===d.status&&this.isHttp)return void(null==(C=Z.onError)||C.call(Z,d.status));const B=d.status||Ei;if((B!==Ei||Z.expectedStatus!==ji)&&B!==Z.expectedStatus)return void(null==(A=Z.onError)||A.call(Z,d.status));const F=xi(d);if(B===ji){const I=d.getResponseHeader("Content-Range"),g=/bytes (\d+)-(\d+)\/(\d+)/.exec(I);Z.onDone({begin:parseInt(g[1],10),chunk:F})}else F?Z.onDone({begin:0,chunk:F}):null==(l=Z.onError)||l.call(Z,d.status)}getRequestXhr(I){return this.pendingRequests[I].xhr}isPendingRequest(I){return I in this.pendingRequests}abortRequest(I){const g=this.pendingRequests[I].xhr;delete this.pendingRequests[I],g.abort()}}class ri{constructor(I){this._source=I,this._manager=new Oi(I),this._rangeChunkSize=I.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(I){const g=this._rangeRequestReaders.indexOf(I);g>=0&&this._rangeRequestReaders.splice(g,1)}getFullReader(){return dA(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new vi(this._manager,this._source),this._fullRequestReader}getRangeReader(I,g){const C=new Pi(this._manager,I,g);return C.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;null==(g=this._fullRequestReader)||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class vi{constructor(I,g){this._manager=I;const C={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=g.url,this._fullRequestId=I.requestFull(C),this._headersCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._contentLength=g.length,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const I=this._fullRequestId,g=this._manager.getRequestXhr(I);this._manager._responseOrigin=Hi(g.responseURL);const C=g.getAllResponseHeaders(),A=new Headers(C?C.trim().split(/[\r\n]+/).map((I=>{const[g,...C]=I.split(": ");return[g,C.join(": ")]})):[]),{allowRangeRequests:l,suggestedLength:Z}=ei({responseHeaders:A,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});l&&(this._isRangeSupported=!0),this._contentLength=Z||this._contentLength,this._filename=yi(A),this._isRangeSupported&&this._manager.abortRequest(I),this._headersCapability.resolve()}_onDone(I){if(I&&(this._requests.length>0?this._requests.shift().resolve({value:I.chunk,done:!1}):this._cachedChunks.push(I.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const I of this._requests)I.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(I){this._storedError=ui(I,this._url),this._headersCapability.reject(this._storedError);for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(I){var g;null==(g=this.onProgress)||g.call(this,{loaded:I.loaded,total:I.lengthComputable?I.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersCapability.promise}async read(){if(await this._headersCapability.promise,this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0,this._headersCapability.reject(I);for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class Pi{constructor(I,g,C){this._manager=I;const A={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=I.url,this._requestId=I.requestRange(g,C,A),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_onHeadersReceived(){var I;const g=Hi(null==(I=this._manager.getRequestXhr(this._requestId))?void 0:I.responseURL);g!==this._manager._responseOrigin&&(this._storedError=new Error(`Expected range response-origin "${g}" to match "${this._manager._responseOrigin}".`),this._onError(0))}_close(){var I;null==(I=this.onClosed)||I.call(this,this)}_onDone(I){const g=I.chunk;this._requests.length>0?this._requests.shift().resolve({value:g,done:!1}):this._queuedChunk=g,this._done=!0;for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(I){this._storedError??(this._storedError=ui(I,this._url));for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(I){var g;this.isStreamingSupported||null==(g=this.onProgress)||g.call(this,{loaded:I.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(null!==this._queuedChunk){const I=this._queuedChunk;return this._queuedChunk=null,{value:I,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}const fi=/^[a-z][a-z0-9\-+.]+:/i;function _i(I){if(fi.test(I))return new URL(I);const g=process.getBuiltinModule("url");return new URL(g.pathToFileURL(I))}class qi{constructor(I){this.source=I,this.url=_i(I.url),dA("file:"===this.url.protocol,"PDFNodeStream only supports file:// URLs."),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var I;return(null==(I=this._fullRequestReader)?void 0:I._loaded)??0}getFullReader(){return dA(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=new $i(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new Ic(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;null==(g=this._fullRequestReader)||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class $i{constructor(I){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null;const g=I.source;this._contentLength=g.length,this._loaded=0,this._filename=null,this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange,this._readableStream=null,this._readCapability=Promise.withResolvers(),this._headersCapability=Promise.withResolvers();const C=process.getBuiltinModule("fs");C.promises.lstat(this._url).then((I=>{this._contentLength=I.size,this._setReadableStream(C.createReadStream(this._url)),this._headersCapability.resolve()}),(I=>{"ENOENT"===I.code&&(I=new RA(`Missing PDF "${this._url}".`)),this._storedError=I,this._headersCapability.reject(I)}))}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var I;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const g=this._readableStream.read();return null===g?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=g.length,null==(I=this.onProgress)||I.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(g).buffer,done:!1})}cancel(I){this._readableStream?this._readableStream.destroy(I):this._error(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",(()=>{this._readCapability.resolve()})),I.on("end",(()=>{I.destroy(),this._done=!0,this._readCapability.resolve()})),I.on("error",(I=>{this._error(I)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new sA("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class Ic{constructor(I,g,C){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=Promise.withResolvers();const A=I.source;this._isStreamingSupported=!A.disableStream;const l=process.getBuiltinModule("fs");this._setReadableStream(l.createReadStream(this._url,{start:g,end:C-1}))}get isStreamingSupported(){return this._isStreamingSupported}async read(){var I;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const g=this._readableStream.read();return null===g?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=g.length,null==(I=this.onProgress)||I.call(this,{loaded:this._loaded}),{value:new Uint8Array(g).buffer,done:!1})}cancel(I){this._readableStream?this._readableStream.destroy(I):this._error(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",(()=>{this._readCapability.resolve()})),I.on("end",(()=>{I.destroy(),this._done=!0,this._readCapability.resolve()})),I.on("error",(I=>{this._error(I)})),this._storedError&&this._readableStream.destroy(this._storedError)}}const gc=1e5,Cc=30,Ac=.8;var lc,Zc,dc,Bc,Fc,ic,cc,Gc,Wc,Vc,Rc,Uc,bc,sc,Qc,mc,Nc,hc,nc,ac,oc,wc,Yc,Sc,Jc,Mc,Dc,tc,Xc,Hc,ec,yc,uc;const pc=class I{constructor({textContentSource:g,container:C,viewport:A}){var l;if(V(this,Jc),V(this,Zc,Promise.withResolvers()),V(this,dc,null),V(this,Bc,!1),V(this,Fc,!(null==(lc=globalThis.FontInspector)||!lc.enabled)),V(this,ic,null),V(this,cc,null),V(this,Gc,0),V(this,Wc,0),V(this,Vc,null),V(this,Rc,null),V(this,Uc,0),V(this,bc,0),V(this,sc,Object.create(null)),V(this,Qc,[]),V(this,mc,null),V(this,Nc,[]),V(this,hc,new WeakMap),V(this,nc,null),g instanceof ReadableStream)R(this,mc,g);else{if("object"!=typeof g)throw new Error('No "textContentSource" parameter specified.');R(this,mc,new ReadableStream({start(I){I.enqueue(g),I.close()}}))}R(this,dc,R(this,Rc,C)),R(this,bc,A.scale*(globalThis.devicePixelRatio||1)),R(this,Uc,A.rotation),R(this,cc,{div:null,properties:null,ctx:null});const{pageWidth:Z,pageHeight:d,pageX:B,pageY:F}=A.rawDims;R(this,nc,[1,0,0,-1,-B,F+d]),R(this,Wc,Z),R(this,Gc,d),U(l=I,Xc,yc).call(l),Nl(C,A),W(this,Zc).promise.finally((()=>{W(I,Sc).delete(this),R(this,cc,null),R(this,sc,null)})).catch((()=>{}))}static get fontFamilyMap(){const{isWindows:I,isFirefox:g}=oA.platform;return iA(this,"fontFamilyMap",new Map([["sans-serif",(I&&g?"Calibri, ":"")+"sans-serif"],["monospace",(I&&g?"Lucida Console, ":"")+"monospace"]]))}render(){const g=()=>{W(this,Vc).read().then((({value:I,done:C})=>{C?W(this,Zc).resolve():(W(this,ic)??R(this,ic,I.lang),Object.assign(W(this,sc),I.styles),U(this,Jc,Mc).call(this,I.items),g())}),W(this,Zc).reject)};return R(this,Vc,W(this,mc).getReader()),W(I,Sc).add(this),g(),W(this,Zc).promise}update({viewport:g,onBefore:C=null}){var A;const l=g.scale*(globalThis.devicePixelRatio||1),Z=g.rotation;if(Z!==W(this,Uc)&&(null==C||C(),R(this,Uc,Z),Nl(W(this,Rc),{rotation:Z})),l!==W(this,bc)){null==C||C(),R(this,bc,l);const g={div:null,properties:null,ctx:U(A=I,Xc,Hc).call(A,W(this,ic))};for(const I of W(this,Nc))g.properties=W(this,hc).get(I),g.div=I,U(this,Jc,tc).call(this,g)}}cancel(){var I;const g=new sA("TextLayer task cancelled.");null==(I=W(this,Vc))||I.cancel(g).catch((()=>{})),R(this,Vc,null),W(this,Zc).reject(g)}get textDivs(){return W(this,Nc)}get textContentItemsStr(){return W(this,Qc)}static cleanup(){if(!(W(this,Sc).size>0)){W(this,ac).clear();for(const{canvas:I}of W(this,oc).values())I.remove();W(this,oc).clear()}}};Zc=new WeakMap,dc=new WeakMap,Bc=new WeakMap,Fc=new WeakMap,ic=new WeakMap,cc=new WeakMap,Gc=new WeakMap,Wc=new WeakMap,Vc=new WeakMap,Rc=new WeakMap,Uc=new WeakMap,bc=new WeakMap,sc=new WeakMap,Qc=new WeakMap,mc=new WeakMap,Nc=new WeakMap,hc=new WeakMap,nc=new WeakMap,ac=new WeakMap,oc=new WeakMap,wc=new WeakMap,Yc=new WeakMap,Sc=new WeakMap,Jc=new WeakSet,Mc=function(I){var g,C;if(W(this,Bc))return;(C=W(this,cc)).ctx??(C.ctx=U(g=pc,Xc,Hc).call(g,W(this,ic)));const A=W(this,Nc),l=W(this,Qc);for(const Z of I){if(A.length>gc)return lA("Ignoring additional textDivs for performance reasons."),void R(this,Bc,!0);if(void 0!==Z.str)l.push(Z.str),U(this,Jc,Dc).call(this,Z);else if("beginMarkedContentProps"===Z.type||"beginMarkedContent"===Z.type){const I=W(this,dc);R(this,dc,document.createElement("span")),W(this,dc).classList.add("markedContent"),null!==Z.id&&W(this,dc).setAttribute("id",`${Z.id}`),I.append(W(this,dc))}else"endMarkedContent"===Z.type&&R(this,dc,W(this,dc).parentNode)}},Dc=function(I){var g;const C=document.createElement("span"),A={angle:0,canvasWidth:0,hasText:""!==I.str,hasEOL:I.hasEOL,fontSize:0};W(this,Nc).push(C);const l=MA.transform(W(this,nc),I.transform);let Z=Math.atan2(l[1],l[0]);const d=W(this,sc)[I.fontName];d.vertical&&(Z+=Math.PI/2);let B=W(this,Fc)&&d.fontSubstitution||d.fontFamily;B=pc.fontFamilyMap.get(B)||B;const F=Math.hypot(l[2],l[3]),i=F*U(g=pc,Xc,uc).call(g,B,W(this,ic));let c,G;0===Z?(c=l[4],G=l[5]-i):(c=l[4]+i*Math.sin(Z),G=l[5]-i*Math.cos(Z));const V="calc(var(--scale-factor)*",R=C.style;W(this,dc)===W(this,Rc)?(R.left=`${(100*c/W(this,Wc)).toFixed(2)}%`,R.top=`${(100*G/W(this,Gc)).toFixed(2)}%`):(R.left=`${V}${c.toFixed(2)}px)`,R.top=`${V}${G.toFixed(2)}px)`),R.fontSize=`${V}${(W(pc,Yc)*F).toFixed(2)}px)`,R.fontFamily=B,A.fontSize=F,C.setAttribute("role","presentation"),C.textContent=I.str,C.dir=I.dir,W(this,Fc)&&(C.dataset.fontName=d.fontSubstitutionLoadedName||I.fontName),0!==Z&&(A.angle=Z*(180/Math.PI));let b=!1;if(I.str.length>1)b=!0;else if(" "!==I.str&&I.transform[0]!==I.transform[3]){const g=Math.abs(I.transform[0]),C=Math.abs(I.transform[3]);g!==C&&Math.max(g,C)/Math.min(g,C)>1.5&&(b=!0)}if(b&&(A.canvasWidth=d.vertical?I.height:I.width),W(this,hc).set(C,A),W(this,cc).div=C,W(this,cc).properties=A,U(this,Jc,tc).call(this,W(this,cc)),A.hasText&&W(this,dc).append(C),A.hasEOL){const I=document.createElement("br");I.setAttribute("role","presentation"),W(this,dc).append(I)}},tc=function(I){var g;const{div:C,properties:A,ctx:l}=I,{style:Z}=C;let d="";if(W(pc,Yc)>1&&(d=`scale(${1/W(pc,Yc)})`),0!==A.canvasWidth&&A.hasText){const{fontFamily:I}=Z,{canvasWidth:B,fontSize:F}=A;U(g=pc,Xc,ec).call(g,l,F*W(this,bc),I);const{width:i}=l.measureText(C.textContent);i>0&&(d=`scaleX(${B*W(this,bc)/i}) ${d}`)}0!==A.angle&&(d=`rotate(${A.angle}deg) ${d}`),d.length>0&&(Z.transform=d)},Xc=new WeakSet,Hc=function(I=null){let g=W(this,oc).get(I||(I=""));if(!g){const C=document.createElement("canvas");C.className="hiddenCanvasElement",C.lang=I,document.body.append(C),g=C.getContext("2d",{alpha:!1,willReadFrequently:!0}),W(this,oc).set(I,g),W(this,wc).set(g,{size:0,family:""})}return g},ec=function(I,g,C){const A=W(this,wc).get(I);g===A.size&&C===A.family||(I.font=`${g}px ${C}`,A.size=g,A.family=C)},yc=function(){if(null!==W(this,Yc))return;const I=document.createElement("div");I.style.opacity=0,I.style.lineHeight=1,I.style.fontSize="1px",I.style.position="absolute",I.textContent="X",document.body.append(I),R(this,Yc,I.getBoundingClientRect().height),I.remove()},uc=function(I,g){const C=W(this,ac).get(I);if(C)return C;const A=U(this,Xc,Hc).call(this,g);A.canvas.width=A.canvas.height=Cc,U(this,Xc,ec).call(this,A,Cc,I);const l=A.measureText("");let Z=l.fontBoundingBoxAscent,d=Math.abs(l.fontBoundingBoxDescent);if(Z){const g=Z/(Z+d);return W(this,ac).set(I,g),A.canvas.width=A.canvas.height=0,g}A.strokeStyle="red",A.clearRect(0,0,Cc,Cc),A.strokeText("g",0,0);let B=A.getImageData(0,0,Cc,Cc).data;d=0;for(let i=B.length-1-3;i>=0;i-=4)if(B[i]>0){d=Math.ceil(i/4/Cc);break}A.clearRect(0,0,Cc,Cc),A.strokeText("A",0,Cc),B=A.getImageData(0,0,Cc,Cc).data,Z=0;for(let i=0,c=B.length;i<c;i+=4)if(B[i]>0){Z=Cc-Math.floor(i/4/Cc);break}A.canvas.width=A.canvas.height=0;const F=Z?Z/(Z+d):Ac;return W(this,ac).set(I,F),F},V(pc,Xc),V(pc,ac,new Map),V(pc,oc,new Map),V(pc,wc,new WeakMap),V(pc,Yc,null),V(pc,Sc,new Set);let kc=pc;class Kc{static textContent(I){const g=[],C={items:g,styles:Object.create(null)};function A(I){var C;if(!I)return;let l=null;const Z=I.name;if("#text"===Z)l=I.value;else{if(!Kc.shouldBuildText(Z))return;null!=(C=null==I?void 0:I.attributes)&&C.textContent?l=I.attributes.textContent:I.value&&(l=I.value)}if(null!==l&&g.push({str:l}),I.children)for(const g of I.children)A(g)}return A(I),C}static shouldBuildText(I){return!("textarea"===I||"input"===I||"option"===I||"select"===I)}}const zc=65536,Tc=100,Lc=5e3,Ec=uC?GF:CF,jc=uC?WF:lF,xc=uC?cF:dF,Oc=uC?VF:FF;function rc(I={}){"string"==typeof I||I instanceof URL?I={url:I}:(I instanceof ArrayBuffer||ArrayBuffer.isView(I))&&(I={data:I});const g=new $c,{docId:C}=g,A=I.url?vc(I.url):null,l=I.data?Pc(I.data):null,Z=I.httpHeaders||null,d=!0===I.withCredentials,B=I.password??null,F=I.range instanceof IG?I.range:null,i=Number.isInteger(I.rangeChunkSize)&&I.rangeChunkSize>0?I.rangeChunkSize:zc;let c=I.worker instanceof mG?I.worker:null;const G=I.verbosity,W="string"!=typeof I.docBaseUrl||jA(I.docBaseUrl)?null:I.docBaseUrl,V="string"==typeof I.cMapUrl?I.cMapUrl:null,R=!1!==I.cMapPacked,U=I.CMapReaderFactory||jc,b="string"==typeof I.standardFontDataUrl?I.standardFontDataUrl:null,s=I.StandardFontDataFactory||Oc,Q=!0!==I.stopAtErrors,m=Number.isInteger(I.maxImageSize)&&I.maxImageSize>-1?I.maxImageSize:-1,N=!1!==I.isEvalSupported,h="boolean"==typeof I.isOffscreenCanvasSupported?I.isOffscreenCanvasSupported:!uC,n="boolean"==typeof I.isImageDecoderSupported?I.isImageDecoderSupported:!uC&&(oA.platform.isFirefox||!globalThis.chrome),a=Number.isInteger(I.canvasMaxAreaInBytes)?I.canvasMaxAreaInBytes:-1,o="boolean"==typeof I.disableFontFace?I.disableFontFace:uC,w=!0===I.fontExtraProperties,Y=!0===I.enableXfa,S=I.ownerDocument||globalThis.document,J=!0===I.disableRange,M=!0===I.disableStream,D=!0===I.disableAutoFetch,t=!0===I.pdfBug,X=I.CanvasFactory||Ec,H=I.FilterFactory||xc,e=!0===I.enableHWA,y=F?F.length:I.length??NaN,u="boolean"==typeof I.useSystemFonts?I.useSystemFonts:!uC&&!o,p="boolean"==typeof I.useWorkerFetch?I.useWorkerFetch:U===lF&&s===FF&&V&&b&&PA(V,document.baseURI)&&PA(b,document.baseURI);I.canvasFactory&&qA("`canvasFactory`-instance option, please use `CanvasFactory` instead."),I.filterFactory&&qA("`filterFactory`-instance option, please use `FilterFactory` instead.");const k=null;gA(G);const K={canvasFactory:new X({ownerDocument:S,enableHWA:e}),filterFactory:new H({docId:C,ownerDocument:S}),cMapReaderFactory:p?null:new U({baseUrl:V,isCompressed:R}),standardFontDataFactory:p?null:new s({baseUrl:b})};if(!c){const I={verbosity:G,port:Ii.workerPort};c=I.port?mG.fromPort(I):new mG(I),g._worker=c}const z={docId:C,apiVersion:"4.9.155",data:l,password:B,disableAutoFetch:D,rangeChunkSize:i,length:y,docBaseUrl:W,enableXfa:Y,evaluatorOptions:{maxImageSize:m,disableFontFace:o,ignoreErrors:Q,isEvalSupported:N,isOffscreenCanvasSupported:h,isImageDecoderSupported:n,canvasMaxAreaInBytes:a,fontExtraProperties:w,useSystemFonts:u,cMapUrl:p?V:null,standardFontDataUrl:p?b:null}},T={disableFontFace:o,fontExtraProperties:w,ownerDocument:S,pdfBug:t,styleElement:k,loadingParams:{disableAutoFetch:D,enableXfa:Y}};return c.promise.then((function(){if(g.destroyed)throw new Error("Loading aborted");if(c.destroyed)throw new Error("Worker was destroyed");const I=c.messageHandler.sendWithPromise("GetDocRequest",z,l?[l.buffer]:null);let B;if(F)B=new Ji(F,{disableRange:J,disableStream:M});else if(!l){if(!A)throw new Error("getDocument - no `url` parameter provided.");let I;if(uC)if(PA(A)){if(typeof fetch>"u"||typeof Response>"u"||!("body"in Response.prototype))throw new Error("getDocument - the Fetch API was disabled in Node.js, see `--no-experimental-fetch`.");I=zi}else I=qi;else I=PA(A)?zi:ri;B=new I({url:A,length:y,httpHeaders:Z,withCredentials:d,rangeChunkSize:i,disableRange:J,disableStream:M})}return I.then((I=>{if(g.destroyed)throw new Error("Loading aborted");if(c.destroyed)throw new Error("Worker was destroyed");const A=new Vi(C,I,c.port),l=new SG(A,g,B,T,K);g._transport=l,A.send("Ready",null)}))})).catch(g._capability.reject),g}function vc(I){if(I instanceof URL)return I.href;try{return new URL(I,window.location).href}catch{if(uC&&"string"==typeof I)return I}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function Pc(I){if(uC&&typeof Buffer<"u"&&I instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(I instanceof Uint8Array&&I.byteLength===I.buffer.byteLength)return I;if("string"==typeof I)return mA(I);if(I instanceof ArrayBuffer||ArrayBuffer.isView(I)||"object"==typeof I&&!isNaN(null==I?void 0:I.length))return new Uint8Array(I);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}function fc(I){return"object"==typeof I&&Number.isInteger(null==I?void 0:I.num)&&I.num>=0&&Number.isInteger(null==I?void 0:I.gen)&&I.gen>=0}var _c;const qc=class I{constructor(){this._capability=Promise.withResolvers(),this._transport=null,this._worker=null,this.docId="d"+b(I,_c)._++,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var I,g,C,A;this.destroyed=!0;try{null!=(I=this._worker)&&I.port&&(this._worker._pendingDestroy=!0),await(null==(g=this._transport)?void 0:g.destroy())}catch(l){throw null!=(C=this._worker)&&C.port&&delete this._worker._pendingDestroy,l}this._transport=null,null==(A=this._worker)||A.destroy(),this._worker=null}};_c=new WeakMap,V(qc,_c,0);let $c=qc;class IG{constructor(I,g,C=!1,A=null){this.length=I,this.initialData=g,this.progressiveDone=C,this.contentDispositionFilename=A,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=Promise.withResolvers()}addRangeListener(I){this._rangeListeners.push(I)}addProgressListener(I){this._progressListeners.push(I)}addProgressiveReadListener(I){this._progressiveReadListeners.push(I)}addProgressiveDoneListener(I){this._progressiveDoneListeners.push(I)}onDataRange(I,g){for(const C of this._rangeListeners)C(I,g)}onDataProgress(I,g){this._readyCapability.promise.then((()=>{for(const C of this._progressListeners)C(I,g)}))}onDataProgressiveRead(I){this._readyCapability.promise.then((()=>{for(const g of this._progressiveReadListeners)g(I)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const I of this._progressiveDoneListeners)I()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(I,g){ZA("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class gG{constructor(I,g){this._pdfInfo=I,this._transport=g}get annotationStorage(){return this._transport.annotationStorage}get canvasFactory(){return this._transport.canvasFactory}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return iA(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(I){return this._transport.getPage(I)}getPageIndex(I){return this._transport.getPageIndex(I)}getDestinations(){return this._transport.getDestinations()}getDestination(I){return this._transport.getDestination(I)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getOptionalContentConfig(g)}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(I=!1){return this._transport.startCleanup(I||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}cachedPageNumber(I){return this._transport.cachedPageNumber(I)}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}var CG,AG,lG,ZG,dG,BG,FG,iG,cG,GG,WG,VG,RG,UG;class bG{constructor(I,g,C,A=!1){V(this,lG),V(this,CG,null),V(this,AG,!1),this._pageIndex=I,this._pageInfo=g,this._transport=C,this._stats=A?new vA:null,this._pdfBug=A,this.commonObjs=C.commonObjs,this.objs=new yG,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:I,rotation:g=this.rotate,offsetX:C=0,offsetY:A=0,dontFlip:l=!1}={}){return new LA({viewBox:this.view,scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}getAnnotations({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getAnnotations(this._pageIndex,g)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return iA(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var I;return(null==(I=this._transport._htmlForXfa)?void 0:I.children[this._pageIndex])||null}render({canvasContext:I,viewport:g,intent:C="display",annotationMode:A=LC.ENABLE,transform:l=null,background:Z=null,optionalContentConfigPromise:d=null,annotationCanvasMap:B=null,pageColors:F=null,printAnnotationStorage:i=null,isEditing:c=!1}){var G,W;null==(G=this._stats)||G.time("Overall");const V=this._transport.getRenderingIntent(C,A,i,c),{renderingIntent:b,cacheKey:s}=V;R(this,AG,!1),U(this,lG,dG).call(this),d||(d=this._transport.getOptionalContentConfig(b));let Q=this._intentStates.get(s);Q||(Q=Object.create(null),this._intentStates.set(s,Q)),Q.streamReaderCancelTimeout&&(clearTimeout(Q.streamReaderCancelTimeout),Q.streamReaderCancelTimeout=null);const m=!!(b&TC.PRINT);Q.displayReadyCapability||(Q.displayReadyCapability=Promise.withResolvers(),Q.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},null==(W=this._stats)||W.time("Page Request"),this._pumpOperatorList(V));const N=I=>{var g;Q.renderTasks.delete(h),(this._maybeCleanupAfterRender||m)&&R(this,AG,!0),U(this,lG,ZG).call(this,!m),I?(h.capability.reject(I),this._abortOperatorList({intentState:Q,reason:I instanceof Error?I:new Error(I)})):h.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"),null!=(g=globalThis.Stats)&&g.enabled&&globalThis.Stats.add(this.pageNumber,this._stats))},h=new kG({callback:N,params:{canvasContext:I,viewport:g,transform:l,background:Z},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:B,operatorList:Q.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!m,pdfBug:this._pdfBug,pageColors:F});(Q.renderTasks||(Q.renderTasks=new Set)).add(h);const n=h.task;return Promise.all([Q.displayReadyCapability.promise,d]).then((([I,g])=>{var C;if(this.destroyed)N();else{if(null==(C=this._stats)||C.time("Rendering"),!(g.renderingIntent&b))throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");h.initializeGraphics({transparency:I,optionalContentConfig:g}),h.operatorListChanged()}})).catch(N),n}getOperatorList({intent:I="display",annotationMode:g=LC.ENABLE,printAnnotationStorage:C=null,isEditing:A=!1}={}){var l;function Z(){F.operatorList.lastChunk&&(F.opListReadCapability.resolve(F.operatorList),F.renderTasks.delete(B))}const d=this._transport.getRenderingIntent(I,g,C,A,!0);let B,F=this._intentStates.get(d.cacheKey);return F||(F=Object.create(null),this._intentStates.set(d.cacheKey,F)),F.opListReadCapability||(B=Object.create(null),B.operatorListChanged=Z,F.opListReadCapability=Promise.withResolvers(),(F.renderTasks||(F.renderTasks=new Set)).add(B),F.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},null==(l=this._stats)||l.time("Page Request"),this._pumpOperatorList(d)),F.opListReadCapability.promise}streamTextContent({includeMarkedContent:I=!1,disableNormalization:g=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:!0===I,disableNormalization:!0===g},{highWaterMark:100,size(I){return I.items.length}})}getTextContent(I={}){if(this._transport._htmlForXfa)return this.getXfa().then((I=>Kc.textContent(I)));const g=this.streamTextContent(I);return new Promise((function(I,C){function A(){l.read().then((function({value:g,done:C}){C?I(Z):(Z.lang??(Z.lang=g.lang),Object.assign(Z.styles,g.styles),Z.items.push(...g.items),A())}),C)}const l=g.getReader(),Z={items:[],styles:Object.create(null),lang:null};A()}))}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const I=[];for(const g of this._intentStates.values())if(this._abortOperatorList({intentState:g,reason:new Error("Page was destroyed."),force:!0}),!g.opListReadCapability)for(const C of g.renderTasks)I.push(C.completed),C.cancel();return this.objs.clear(),R(this,AG,!1),U(this,lG,dG).call(this),Promise.all(I)}cleanup(I=!1){R(this,AG,!0);const g=U(this,lG,ZG).call(this,!1);return I&&g&&this._stats&&(this._stats=new vA),g}_startRenderPage(I,g){var C,A;const l=this._intentStates.get(g);l&&(null==(C=this._stats)||C.timeEnd("Page Request"),null==(A=l.displayReadyCapability)||A.resolve(I))}_renderPageChunk(I,g){for(let C=0,A=I.length;C<A;C++)g.operatorList.fnArray.push(I.fnArray[C]),g.operatorList.argsArray.push(I.argsArray[C]);g.operatorList.lastChunk=I.lastChunk,g.operatorList.separateAnnots=I.separateAnnots;for(const C of g.renderTasks)C.operatorListChanged();I.lastChunk&&U(this,lG,ZG).call(this,!0)}_pumpOperatorList({renderingIntent:I,cacheKey:g,annotationStorageSerializable:C,modifiedIds:A}){const{map:l,transfer:Z}=C,d=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:I,cacheKey:g,annotationStorage:l,modifiedIds:A},Z).getReader(),B=this._intentStates.get(g);B.streamReader=d;const F=()=>{d.read().then((({value:I,done:g})=>{g?B.streamReader=null:this._transport.destroyed||(this._renderPageChunk(I,B),F())}),(I=>{if(B.streamReader=null,!this._transport.destroyed){if(B.operatorList){B.operatorList.lastChunk=!0;for(const I of B.renderTasks)I.operatorListChanged();U(this,lG,ZG).call(this,!0)}if(B.displayReadyCapability)B.displayReadyCapability.reject(I);else{if(!B.opListReadCapability)throw I;B.opListReadCapability.reject(I)}}}))};F()}_abortOperatorList({intentState:I,reason:g,force:C=!1}){if(I.streamReader){if(I.streamReaderCancelTimeout&&(clearTimeout(I.streamReaderCancelTimeout),I.streamReaderCancelTimeout=null),!C){if(I.renderTasks.size>0)return;if(g instanceof EA){let C=Tc;return g.extraDelay>0&&g.extraDelay<1e3&&(C+=g.extraDelay),void(I.streamReaderCancelTimeout=setTimeout((()=>{I.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:I,reason:g,force:!0})}),C))}}if(I.streamReader.cancel(new sA(g.message)).catch((()=>{})),I.streamReader=null,!this._transport.destroyed){for(const[g,C]of this._intentStates)if(C===I){this._intentStates.delete(g);break}this.cleanup()}}}get stats(){return this._stats}}CG=new WeakMap,AG=new WeakMap,lG=new WeakSet,ZG=function(I=!1){if(U(this,lG,dG).call(this),!W(this,AG)||this.destroyed)return!1;if(I)return R(this,CG,setTimeout((()=>{R(this,CG,null),U(this,lG,ZG).call(this,!1)}),Lc)),!1;for(const{renderTasks:g,operatorList:C}of this._intentStates.values())if(g.size>0||!C.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),R(this,AG,!1),!0},dG=function(){W(this,CG)&&(clearTimeout(W(this,CG)),R(this,CG,null))};class sG{constructor(){V(this,BG,new Map),V(this,FG,Promise.resolve())}postMessage(I,g){const C={data:structuredClone(I,g?{transfer:g}:null)};W(this,FG).then((()=>{for(const[I]of W(this,BG))I.call(this,C)}))}addEventListener(I,g,C=null){let A=null;if((null==C?void 0:C.signal)instanceof AbortSignal){const{signal:l}=C;if(l.aborted)return void lA("LoopbackPort - cannot use an `aborted` signal.");const Z=()=>this.removeEventListener(I,g);A=()=>l.removeEventListener("abort",Z),l.addEventListener("abort",Z)}W(this,BG).set(g,A)}removeEventListener(I,g){const C=W(this,BG).get(g);null==C||C(),W(this,BG).delete(g)}terminate(){for(const[,I]of W(this,BG))null==I||I();W(this,BG).clear()}}BG=new WeakMap,FG=new WeakMap;const QG=class I{constructor({name:g=null,port:C=null,verbosity:A=CA()}={}){var l;if(V(this,WG),this.name=g,this.destroyed=!1,this.verbosity=A,this._readyCapability=Promise.withResolvers(),this._port=null,this._webWorker=null,this._messageHandler=null,C){if(null!=(l=W(I,GG))&&l.has(C))throw new Error("Cannot use more than one PDFWorker per port.");return(W(I,GG)||R(I,GG,new WeakMap)).set(C,this),void this._initializeFromPort(C)}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(I){this._port=I,this._messageHandler=new Vi("main","worker",I),this._messageHandler.on("ready",(function(){})),U(this,WG,VG).call(this)}_initialize(){if(W(I,cG)||W(I,RG,UG))return void this._setupFakeWorker();let{workerSrc:g}=I;try{I._isSameOrigin(window.location.href,g)||(g=I._createCDNWrapper(new URL(g,window.location).href));const C=new Worker(g,{type:"module"}),A=new Vi("main","worker",C),l=()=>{Z.abort(),A.destroy(),C.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},Z=new AbortController;C.addEventListener("error",(()=>{this._webWorker||l()}),{signal:Z.signal}),A.on("test",(I=>{Z.abort(),!this.destroyed&&I?(this._messageHandler=A,this._port=C,this._webWorker=C,U(this,WG,VG).call(this)):l()})),A.on("ready",(I=>{if(Z.abort(),this.destroyed)l();else try{d()}catch{this._setupFakeWorker()}}));const d=()=>{const I=new Uint8Array;A.send("test",I,[I.buffer])};return void d()}catch{AA("The worker has been disabled.")}this._setupFakeWorker()}_setupFakeWorker(){W(I,cG)||(lA("Setting up fake worker."),R(I,cG,!0)),I._setupFakeWorkerGlobal.then((g=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const C=new sG;this._port=C;const A="fake"+b(I,iG)._++,l=new Vi(A+"_worker",A,C);g.setup(l,C),this._messageHandler=new Vi(A,A+"_worker",C),U(this,WG,VG).call(this)})).catch((I=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${I.message}".`))}))}destroy(){var g,C,A;this.destroyed=!0,null==(g=this._webWorker)||g.terminate(),this._webWorker=null,null==(C=W(I,GG))||C.delete(this._port),this._port=null,null==(A=this._messageHandler)||A.destroy(),this._messageHandler=null}static fromPort(g){var C;if(null==g||!g.port)throw new Error("PDFWorker.fromPort - invalid method signature.");const A=null==(C=W(this,GG))?void 0:C.get(g.port);if(A){if(A._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return A}return new I(g)}static get workerSrc(){if(Ii.workerSrc)return Ii.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _setupFakeWorkerGlobal(){return iA(this,"_setupFakeWorkerGlobal",(async()=>W(this,RG,UG)?W(this,RG,UG):(await import(this.workerSrc)).WorkerMessageHandler)())}};iG=new WeakMap,cG=new WeakMap,GG=new WeakMap,WG=new WeakSet,VG=function(){this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})},RG=new WeakSet,UG=function(){var I;try{return(null==(I=globalThis.pdfjsWorker)?void 0:I.WorkerMessageHandler)||null}catch{return null}},V(QG,RG),V(QG,iG,0),V(QG,cG,!1),V(QG,GG),uC&&(R(QG,cG,!0),Ii.workerSrc||(Ii.workerSrc="./pdf.worker.mjs")),QG._isSameOrigin=(I,g)=>{let C;try{if(C=new URL(I),!C.origin||"null"===C.origin)return!1}catch{return!1}const A=new URL(g,C);return C.origin===A.origin},QG._createCDNWrapper=I=>{const g=`await import("${I}");`;return URL.createObjectURL(new Blob([g],{type:"text/javascript"}))};let mG=QG;var NG,hG,nG,aG,oG,wG,YG;class SG{constructor(I,g,C,A,l){V(this,wG),V(this,NG,new Map),V(this,hG,new Map),V(this,nG,new Map),V(this,aG,new Map),V(this,oG,null),this.messageHandler=I,this.loadingTask=g,this.commonObjs=new yG,this.fontLoader=new $B({ownerDocument:A.ownerDocument,styleElement:A.styleElement}),this.loadingParams=A.loadingParams,this._params=A,this.canvasFactory=l.canvasFactory,this.filterFactory=l.filterFactory,this.cMapReaderFactory=l.cMapReaderFactory,this.standardFontDataFactory=l.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=C,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=Promise.withResolvers(),this.setupMessageHandler()}get annotationStorage(){return iA(this,"annotationStorage",new _B)}getRenderingIntent(I,g=LC.ENABLE,C=null,A=!1,l=!1){let Z=TC.DISPLAY,d=nB;switch(I){case"any":Z=TC.ANY;break;case"display":break;case"print":Z=TC.PRINT;break;default:lA(`getRenderingIntent - invalid intent: ${I}`)}const B=Z&TC.PRINT&&C instanceof qB?C:this.annotationStorage;switch(g){case LC.DISABLE:Z+=TC.ANNOTATIONS_DISABLE;break;case LC.ENABLE:break;case LC.ENABLE_FORMS:Z+=TC.ANNOTATIONS_FORMS;break;case LC.ENABLE_STORAGE:Z+=TC.ANNOTATIONS_STORAGE,d=B.serializable;break;default:lA(`getRenderingIntent - invalid annotationMode: ${g}`)}A&&(Z+=TC.IS_EDITING),l&&(Z+=TC.OPLIST);const{ids:F,hash:i}=B.modifiedIds,c=[Z,d.hash,i];return{renderingIntent:Z,cacheKey:c.join("_"),annotationStorageSerializable:d,modifiedIds:F}}destroy(){var I;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=Promise.withResolvers(),null==(I=W(this,oG))||I.reject(new Error("Worker was destroyed during onPassword callback"));const g=[];for(const A of W(this,hG).values())g.push(A._destroy());W(this,hG).clear(),W(this,nG).clear(),W(this,aG).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const C=this.messageHandler.sendWithPromise("Terminate",null);return g.push(C),Promise.all(g).then((()=>{var I,g;this.commonObjs.clear(),this.fontLoader.clear(),W(this,NG).clear(),this.filterFactory.destroy(),kc.cleanup(),null==(I=this._networkStream)||I.cancelAllRequests(new sA("Worker was terminated.")),null==(g=this.messageHandler)||g.destroy(),this.messageHandler=null,this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:I,loadingTask:g}=this;I.on("GetReader",((I,g)=>{dA(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=I=>{this._lastProgress={loaded:I.loaded,total:I.total}},g.onPull=()=>{this._fullReader.read().then((function({value:I,done:C}){C?g.close():(dA(I instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),g.enqueue(new Uint8Array(I),1,[I]))})).catch((I=>{g.error(I)}))},g.onCancel=I=>{this._fullReader.cancel(I),g.ready.catch((I=>{if(!this.destroyed)throw I}))}})),I.on("ReaderHeadersReady",(async I=>{var C;await this._fullReader.headersReady;const{isStreamingSupported:A,isRangeSupported:l,contentLength:Z}=this._fullReader;return(!A||!l)&&(this._lastProgress&&(null==(C=g.onProgress)||C.call(g,this._lastProgress)),this._fullReader.onProgress=I=>{var C;null==(C=g.onProgress)||C.call(g,{loaded:I.loaded,total:I.total})}),{isStreamingSupported:A,isRangeSupported:l,contentLength:Z}})),I.on("GetRangeReader",((I,g)=>{dA(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const C=this._networkStream.getRangeReader(I.begin,I.end);C?(g.onPull=()=>{C.read().then((function({value:I,done:C}){C?g.close():(dA(I instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),g.enqueue(new Uint8Array(I),1,[I]))})).catch((I=>{g.error(I)}))},g.onCancel=I=>{C.cancel(I),g.ready.catch((I=>{if(!this.destroyed)throw I}))}):g.close()})),I.on("GetDoc",(({pdfInfo:I})=>{this._numPages=I.numPages,this._htmlForXfa=I.htmlForXfa,delete I.htmlForXfa,g._capability.resolve(new gG(I,this))})),I.on("DocException",(function(I){let C;switch(I.name){case"PasswordException":C=new GA(I.message,I.code);break;case"InvalidPDFException":C=new VA(I.message);break;case"MissingPDFException":C=new RA(I.message);break;case"UnexpectedResponseException":C=new UA(I.message,I.status);break;case"UnknownErrorException":C=new WA(I.message,I.details);break;default:ZA("DocException - expected a valid Error.")}g._capability.reject(C)})),I.on("PasswordRequest",(I=>{if(R(this,oG,Promise.withResolvers()),g.onPassword){const A=I=>{I instanceof Error?W(this,oG).reject(I):W(this,oG).resolve({password:I})};try{g.onPassword(A,I.code)}catch(C){W(this,oG).reject(C)}}else W(this,oG).reject(new GA(I.message,I.code));return W(this,oG).promise})),I.on("DataLoaded",(I=>{var C;null==(C=g.onProgress)||C.call(g,{loaded:I.length,total:I.length}),this.downloadInfoCapability.resolve(I)})),I.on("StartRenderPage",(I=>{this.destroyed||W(this,hG).get(I.pageIndex)._startRenderPage(I.transparency,I.cacheKey)})),I.on("commonobj",(([g,C,A])=>{var l;if(this.destroyed||this.commonObjs.has(g))return null;switch(C){case"Font":const{disableFontFace:Z,fontExtraProperties:d,pdfBug:B}=this._params;if("error"in A){const I=A.error;lA(`Error during font loading: ${I}`),this.commonObjs.resolve(g,I);break}const F=B&&null!=(l=globalThis.FontInspector)&&l.enabled?(I,g)=>globalThis.FontInspector.fontAdded(I,g):null,i=new IF(A,{disableFontFace:Z,inspectFont:F});this.fontLoader.bind(i).catch((()=>I.sendWithPromise("FontFallback",{id:g}))).finally((()=>{!d&&i.data&&(i.data=null),this.commonObjs.resolve(g,i)}));break;case"CopyLocalImage":const{imageRef:c}=A;dA(c,"The imageRef must be defined.");for(const I of W(this,hG).values())for(const[,C]of I.objs)if((null==C?void 0:C.ref)===c)return C.dataLen?(this.commonObjs.resolve(g,structuredClone(C)),C.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(g,A);break;default:throw new Error(`Got unknown common object type ${C}`)}return null})),I.on("obj",(([I,g,C,A])=>{var l;if(this.destroyed)return;const Z=W(this,hG).get(g);if(!Z.objs.has(I)){if(0===Z._intentStates.size)return void(null==(l=null==A?void 0:A.bitmap)||l.close());switch(C){case"Image":Z.objs.resolve(I,A),(null==A?void 0:A.dataLen)>KC&&(Z._maybeCleanupAfterRender=!0);break;case"Pattern":Z.objs.resolve(I,A);break;default:throw new Error(`Got unknown object type ${C}`)}}})),I.on("DocProgress",(I=>{var C;this.destroyed||null==(C=g.onProgress)||C.call(g,{loaded:I.loaded,total:I.total})})),I.on("FetchBuiltInCMap",(async I=>{if(this.destroyed)throw new Error("Worker was destroyed.");if(!this.cMapReaderFactory)throw new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.");return this.cMapReaderFactory.fetch(I)})),I.on("FetchStandardFontData",(async I=>{if(this.destroyed)throw new Error("Worker was destroyed.");if(!this.standardFontDataFactory)throw new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.");return this.standardFontDataFactory.fetch(I)}))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var I;this.annotationStorage.size<=0&&lA("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:g,transfer:C}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:g,filename:(null==(I=this._fullReader)?void 0:I.filename)??null},C).finally((()=>{this.annotationStorage.resetModified()}))}getPage(I){if(!Number.isInteger(I)||I<=0||I>this._numPages)return Promise.reject(new Error("Invalid page request."));const g=I-1,C=W(this,nG).get(g);if(C)return C;const A=this.messageHandler.sendWithPromise("GetPage",{pageIndex:g}).then((C=>{if(this.destroyed)throw new Error("Transport destroyed");C.refStr&&W(this,aG).set(C.refStr,I);const A=new bG(g,C,this,this._params.pdfBug);return W(this,hG).set(g,A),A}));return W(this,nG).set(g,A),A}getPageIndex(I){return fc(I)?this.messageHandler.sendWithPromise("GetPageIndex",{num:I.num,gen:I.gen}):Promise.reject(new Error("Invalid pageIndex request."))}getAnnotations(I,g){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:I,intent:g})}getFieldObjects(){return U(this,wG,YG).call(this,"GetFieldObjects")}hasJSActions(){return U(this,wG,YG).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(I){return"string"!=typeof I?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:I})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return U(this,wG,YG).call(this,"GetDocJSActions")}getPageJSActions(I){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:I})}getStructTree(I){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:I})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(I){return U(this,wG,YG).call(this,"GetOptionalContentConfig").then((g=>new Si(g,I)))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const I="GetMetadata",g=W(this,NG).get(I);if(g)return g;const C=this.messageHandler.sendWithPromise(I,null).then((I=>{var g,C;return{info:I[0],metadata:I[1]?new Ri(I[1]):null,contentDispositionFilename:(null==(g=this._fullReader)?void 0:g.filename)??null,contentLength:(null==(C=this._fullReader)?void 0:C.contentLength)??null}}));return W(this,NG).set(I,C),C}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(I=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const I of W(this,hG).values())if(!I.cleanup())throw new Error(`startCleanup: Page ${I.pageNumber} is currently rendering.`);this.commonObjs.clear(),I||this.fontLoader.clear(),W(this,NG).clear(),this.filterFactory.destroy(!0),kc.cleanup()}}cachedPageNumber(I){if(!fc(I))return null;const g=0===I.gen?`${I.num}R`:`${I.num}R${I.gen}`;return W(this,aG).get(g)??null}}NG=new WeakMap,hG=new WeakMap,nG=new WeakMap,aG=new WeakMap,oG=new WeakMap,wG=new WeakSet,YG=function(I,g=null){const C=W(this,NG).get(I);if(C)return C;const A=this.messageHandler.sendWithPromise(I,g);return W(this,NG).set(I,A),A};const JG=Symbol("INITIAL_DATA");var MG,DG,tG,XG,HG,eG;class yG{constructor(){V(this,DG),V(this,MG,Object.create(null))}get(I,g=null){if(g){const C=U(this,DG,tG).call(this,I);return C.promise.then((()=>g(C.data))),null}const C=W(this,MG)[I];if(!C||C.data===JG)throw new Error(`Requesting object that isn't resolved yet ${I}.`);return C.data}has(I){const g=W(this,MG)[I];return!!g&&g.data!==JG}resolve(I,g=null){const C=U(this,DG,tG).call(this,I);C.data=g,C.resolve()}clear(){var I;for(const g in W(this,MG)){const{data:C}=W(this,MG)[g];null==(I=null==C?void 0:C.bitmap)||I.close()}R(this,MG,Object.create(null))}*[Symbol.iterator](){for(const I in W(this,MG)){const{data:g}=W(this,MG)[I];g!==JG&&(yield[I,g])}}}MG=new WeakMap,DG=new WeakSet,tG=function(I){var g;return(g=W(this,MG))[I]||(g[I]={...Promise.withResolvers(),data:JG})};class uG{constructor(I){V(this,XG,null),R(this,XG,I),this.onContinue=null}get promise(){return W(this,XG).capability.promise}cancel(I=0){W(this,XG).cancel(null,I)}get separateAnnots(){const{separateAnnots:I}=W(this,XG).operatorList;if(!I)return!1;const{annotationCanvasMap:g}=W(this,XG);return I.form||I.canvas&&(null==g?void 0:g.size)>0}}XG=new WeakMap;const pG=class I{constructor({callback:I,params:g,objs:C,commonObjs:A,annotationCanvasMap:l,operatorList:Z,pageIndex:d,canvasFactory:B,filterFactory:F,useRequestAnimationFrame:i=!1,pdfBug:c=!1,pageColors:G=null}){V(this,HG,null),this.callback=I,this.params=g,this.objs=C,this.commonObjs=A,this.annotationCanvasMap=l,this.operatorListIdx=null,this.operatorList=Z,this._pageIndex=d,this.canvasFactory=B,this.filterFactory=F,this._pdfBug=c,this.pageColors=G,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===i&&typeof window<"u",this.cancelled=!1,this.capability=Promise.withResolvers(),this.task=new uG(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=g.canvasContext.canvas}get completed(){return this.capability.promise.catch((function(){}))}initializeGraphics({transparency:g=!1,optionalContentConfig:C}){var A,l;if(this.cancelled)return;if(this._canvas){if(W(I,eG).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");W(I,eG).add(this._canvas)}this._pdfBug&&null!=(A=globalThis.StepperManager)&&A.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:Z,viewport:d,transform:B,background:F}=this.params;this.gfx=new _F(Z,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:C},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:B,viewport:d,transparency:g,background:F}),this.operatorListIdx=0,this.graphicsReady=!0,null==(l=this.graphicsReadyCallback)||l.call(this)}cancel(g=null,C=0){var A;this.running=!1,this.cancelled=!0,null==(A=this.gfx)||A.endDrawing(),W(this,HG)&&(window.cancelAnimationFrame(W(this,HG)),R(this,HG,null)),W(I,eG).delete(this._canvas),this.callback(g||new EA(`Rendering cancelled, page ${this._pageIndex+1}`,C))}operatorListChanged(){var I;this.graphicsReady?(null==(I=this.stepper)||I.updateOperatorList(this.operatorList),!this.running&&this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?R(this,HG,window.requestAnimationFrame((()=>{R(this,HG,null),this._nextBound().catch(this._cancelBound)}))):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),W(I,eG).delete(this._canvas),this.callback())))}};HG=new WeakMap,eG=new WeakMap,V(pG,eG,new WeakSet);let kG=pG;const KG="4.9.155",zG="a4eb8407c";function TG(I){return Math.floor(255*Math.max(0,Math.min(1,I))).toString(16).padStart(2,"0")}function LG(I){return Math.max(0,Math.min(255,255*I))}class EG{static CMYK_G([I,g,C,A]){return["G",1-Math.min(1,.3*I+.59*C+.11*g+A)]}static G_CMYK([I]){return["CMYK",0,0,0,1-I]}static G_RGB([I]){return["RGB",I,I,I]}static G_rgb([I]){return I=LG(I),[I,I,I]}static G_HTML([I]){const g=TG(I);return`#${g}${g}${g}`}static RGB_G([I,g,C]){return["G",.3*I+.59*g+.11*C]}static RGB_rgb(I){return I.map(LG)}static RGB_HTML(I){return`#${I.map(TG).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([I,g,C,A]){return["RGB",1-Math.min(1,I+A),1-Math.min(1,C+A),1-Math.min(1,g+A)]}static CMYK_rgb([I,g,C,A]){return[LG(1-Math.min(1,I+A)),LG(1-Math.min(1,C+A)),LG(1-Math.min(1,g+A))]}static CMYK_HTML(I){const g=this.CMYK_RGB(I).slice(1);return this.RGB_HTML(g)}static RGB_CMYK([I,g,C]){const A=1-I,l=1-g,Z=1-C,d=Math.min(A,l,Z);return["CMYK",A,l,Z,d]}}class jG{create(I,g,C=!1){if(I<=0||g<=0)throw new Error("Invalid SVG dimensions");const A=this._createSVG("svg:svg");return A.setAttribute("version","1.1"),C||(A.setAttribute("width",`${I}px`),A.setAttribute("height",`${g}px`)),A.setAttribute("preserveAspectRatio","none"),A.setAttribute("viewBox",`0 0 ${I} ${g}`),A}createElement(I){if("string"!=typeof I)throw new Error("Invalid SVG element type");return this._createSVG(I)}_createSVG(I){ZA("Abstract method `_createSVG` called.")}}class xG extends jG{_createSVG(I){return document.createElementNS(kA,I)}}class OG{static setupStorage(I,g,C,A,l){const Z=A.getValue(g,{value:null});switch(C.name){case"textarea":if(null!==Z.value&&(I.textContent=Z.value),"print"===l)break;I.addEventListener("input",(I=>{A.setValue(g,{value:I.target.value})}));break;case"input":if("radio"===C.attributes.type||"checkbox"===C.attributes.type){if(Z.value===C.attributes.xfaOn?I.setAttribute("checked",!0):Z.value===C.attributes.xfaOff&&I.removeAttribute("checked"),"print"===l)break;I.addEventListener("change",(I=>{A.setValue(g,{value:I.target.checked?I.target.getAttribute("xfaOn"):I.target.getAttribute("xfaOff")})}))}else{if(null!==Z.value&&I.setAttribute("value",Z.value),"print"===l)break;I.addEventListener("input",(I=>{A.setValue(g,{value:I.target.value})}))}break;case"select":if(null!==Z.value){I.setAttribute("value",Z.value);for(const I of C.children)I.attributes.value===Z.value?I.attributes.selected=!0:I.attributes.hasOwnProperty("selected")&&delete I.attributes.selected}I.addEventListener("input",(I=>{const C=I.target.options,l=-1===C.selectedIndex?"":C[C.selectedIndex].value;A.setValue(g,{value:l})}));break}}static setAttributes({html:I,element:g,storage:C=null,intent:A,linkService:l}){const{attributes:Z}=g,d=I instanceof HTMLAnchorElement;"radio"===Z.type&&(Z.name=`${Z.name}-${A}`);for(const[B,F]of Object.entries(Z))if(null!=F)switch(B){case"class":F.length&&I.setAttribute(B,F.join(" "));break;case"dataId":break;case"id":I.setAttribute("data-element-id",F);break;case"style":Object.assign(I.style,F);break;case"textContent":I.textContent=F;break;default:(!d||"href"!==B&&"newWindow"!==B)&&I.setAttribute(B,F)}d&&l.addLinkAttributes(I,Z.href,Z.newWindow),C&&Z.dataId&&this.setupStorage(I,Z.dataId,g,C)}static render(I){var g,C;const A=I.annotationStorage,l=I.linkService,Z=I.xfaHtml,d=I.intent||"display",B=document.createElement(Z.name);Z.attributes&&this.setAttributes({html:B,element:Z,intent:d,linkService:l});const F="richText"!==d,i=I.div;if(i.append(B),I.viewport){const g=`matrix(${I.viewport.transform.join(",")})`;i.style.transform=g}F&&i.setAttribute("class","xfaLayer xfaFont");const c=[];if(0===Z.children.length){if(Z.value){const I=document.createTextNode(Z.value);B.append(I),F&&Kc.shouldBuildText(Z.name)&&c.push(I)}return{textDivs:c}}const G=[[Z,-1,B]];for(;G.length>0;){const[I,Z,B]=G.at(-1);if(Z+1===I.children.length){G.pop();continue}const i=I.children[++G.at(-1)[1]];if(null===i)continue;const{name:W}=i;if("#text"===W){const I=document.createTextNode(i.value);c.push(I),B.append(I);continue}const V=null!=(g=null==i?void 0:i.attributes)&&g.xmlns?document.createElementNS(i.attributes.xmlns,W):document.createElement(W);if(B.append(V),i.attributes&&this.setAttributes({html:V,element:i,storage:A,intent:d,linkService:l}),(null==(C=i.children)?void 0:C.length)>0)G.push([i,-1,V]);else if(i.value){const I=document.createTextNode(i.value);F&&Kc.shouldBuildText(W)&&c.push(I),V.append(I)}}for(const W of i.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))W.setAttribute("readOnly",!0);return{textDivs:c}}static update(I){const g=`matrix(${I.viewport.transform.join(",")})`;I.div.style.transform=g,I.div.hidden=!1}}const rG=1e3,vG=9,PG=new WeakSet;function fG(I){return{width:I[2]-I[0],height:I[3]-I[1]}}class _G{static create(I){switch(I.data.annotationType){case PC.LINK:return new CV(I);case PC.TEXT:return new AV(I);case PC.WIDGET:switch(I.data.fieldType){case"Tx":return new ZV(I);case"Btn":return I.data.radioButton?new FV(I):I.data.checkBox?new BV(I):new iV(I);case"Ch":return new cV(I);case"Sig":return new dV(I)}return new lV(I);case PC.POPUP:return new GV(I);case PC.FREETEXT:return new VV(I);case PC.LINE:return new RV(I);case PC.SQUARE:return new UV(I);case PC.CIRCLE:return new bV(I);case PC.POLYLINE:return new sV(I);case PC.CARET:return new mV(I);case PC.INK:return new NV(I);case PC.POLYGON:return new QV(I);case PC.HIGHLIGHT:return new hV(I);case PC.UNDERLINE:return new nV(I);case PC.SQUIGGLY:return new aV(I);case PC.STRIKEOUT:return new oV(I);case PC.STAMP:return new wV(I);case PC.FILEATTACHMENT:return new YV(I);default:return new lW(I)}}}var qG,$G,IW,gW,CW;const AW=class I{constructor(I,{isRenderable:g=!1,ignoreBorder:C=!1,createQuadrilaterals:A=!1}={}){V(this,gW),V(this,qG,null),V(this,$G,!1),V(this,IW,null),this.isRenderable=g,this.data=I.data,this.layer=I.layer,this.linkService=I.linkService,this.downloadManager=I.downloadManager,this.imageResourcesPath=I.imageResourcesPath,this.renderForms=I.renderForms,this.svgFactory=I.svgFactory,this.annotationStorage=I.annotationStorage,this.enableScripting=I.enableScripting,this.hasJSActions=I.hasJSActions,this._fieldObjects=I.fieldObjects,this.parent=I.parent,g&&(this.container=this._createContainer(C)),A&&this._createQuadrilaterals()}static _hasPopupData({titleObj:I,contentsObj:g,richText:C}){return!!(null!=I&&I.str||null!=g&&g.str||null!=C&&C.str)}get _isEditable(){return this.data.isEditable}get hasPopupData(){return I._hasPopupData(this.data)}updateEdited(I){var g;if(!this.container)return;W(this,qG)||R(this,qG,{rect:this.data.rect.slice(0)});const{rect:C}=I;C&&U(this,gW,CW).call(this,C),null==(g=W(this,IW))||g.popup.updateEdited(I)}resetEdited(){var I;W(this,qG)&&(U(this,gW,CW).call(this,W(this,qG).rect),null==(I=W(this,IW))||I.popup.resetEdited(),R(this,qG,null))}_createContainer(I){const{data:g,parent:{page:C,viewport:A}}=this,l=document.createElement("section");l.setAttribute("data-annotation-id",g.id),this instanceof lV||(l.tabIndex=rG);const{style:Z}=l;if(Z.zIndex=this.parent.zIndex++,g.alternativeText&&(l.title=g.alternativeText),g.noRotate&&l.classList.add("norotate"),!g.rect||this instanceof GV){const{rotation:I}=g;return!g.hasOwnCanvas&&0!==I&&this.setRotation(I,l),l}const{width:d,height:B}=fG(g.rect);if(!I&&g.borderStyle.width>0){Z.borderWidth=`${g.borderStyle.width}px`;const I=g.borderStyle.horizontalCornerRadius,C=g.borderStyle.verticalCornerRadius;if(I>0||C>0){const g=`calc(${I}px * var(--scale-factor)) / calc(${C}px * var(--scale-factor))`;Z.borderRadius=g}else if(this instanceof FV){const I=`calc(${d}px * var(--scale-factor)) / calc(${B}px * var(--scale-factor))`;Z.borderRadius=I}switch(g.borderStyle.style){case fC.SOLID:Z.borderStyle="solid";break;case fC.DASHED:Z.borderStyle="dashed";break;case fC.BEVELED:lA("Unimplemented border style: beveled");break;case fC.INSET:lA("Unimplemented border style: inset");break;case fC.UNDERLINE:Z.borderBottomStyle="solid";break}const A=g.borderColor||null;A?(R(this,$G,!0),Z.borderColor=MA.makeHexColor(0|A[0],0|A[1],0|A[2])):Z.borderWidth=0}const F=MA.normalizeRect([g.rect[0],C.view[3]-g.rect[1]+C.view[1],g.rect[2],C.view[3]-g.rect[3]+C.view[1]]),{pageWidth:i,pageHeight:c,pageX:G,pageY:W}=A.rawDims;Z.left=100*(F[0]-G)/i+"%",Z.top=100*(F[1]-W)/c+"%";const{rotation:V}=g;return g.hasOwnCanvas||0===V?(Z.width=100*d/i+"%",Z.height=100*B/c+"%"):this.setRotation(V,l),l}setRotation(I,g=this.container){if(!this.data.rect)return;const{pageWidth:C,pageHeight:A}=this.parent.viewport.rawDims,{width:l,height:Z}=fG(this.data.rect);let d,B;I%180===0?(d=100*l/C,B=100*Z/A):(d=100*Z/C,B=100*l/A),g.style.width=`${d}%`,g.style.height=`${B}%`,g.setAttribute("data-main-rotation",(360-I)%360)}get _commonActions(){const I=(I,g,C)=>{const A=C.detail[I],l=A[0],Z=A.slice(1);C.target.style[g]=EG[`${l}_HTML`](Z),this.annotationStorage.setValue(this.data.id,{[g]:EG[`${l}_rgb`](Z)})};return iA(this,"_commonActions",{display:I=>{const{display:g}=I.detail,C=g%2===1;this.container.style.visibility=C?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:C,noPrint:1===g||2===g})},print:I=>{this.annotationStorage.setValue(this.data.id,{noPrint:!I.detail.print})},hidden:I=>{const{hidden:g}=I.detail;this.container.style.visibility=g?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:g,noView:g})},focus:I=>{setTimeout((()=>I.target.focus({preventScroll:!1})),0)},userName:I=>{I.target.title=I.detail.userName},readonly:I=>{I.target.disabled=I.detail.readonly},required:I=>{this._setRequired(I.target,I.detail.required)},bgColor:g=>{I("bgColor","backgroundColor",g)},fillColor:g=>{I("fillColor","backgroundColor",g)},fgColor:g=>{I("fgColor","color",g)},textColor:g=>{I("textColor","color",g)},borderColor:g=>{I("borderColor","borderColor",g)},strokeColor:g=>{I("strokeColor","borderColor",g)},rotation:I=>{const g=I.detail.rotation;this.setRotation(g),this.annotationStorage.setValue(this.data.id,{rotation:g})}})}_dispatchEventFromSandbox(I,g){const C=this._commonActions;for(const A of Object.keys(g.detail)){const l=I[A]||C[A];null==l||l(g)}}_setDefaultPropertiesFromJS(I){if(!this.enableScripting)return;const g=this.annotationStorage.getRawValue(this.data.id);if(!g)return;const C=this._commonActions;for(const[A,l]of Object.entries(g)){const Z=C[A];if(Z){const C={detail:{[A]:l},target:I};Z(C),delete g[A]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:I}=this.data;if(!I)return;const[g,C,A,l]=this.data.rect.map((I=>Math.fround(I)));if(8===I.length){const[Z,d,B,F]=I.subarray(2,6);if(A===Z&&l===d&&g===B&&C===F)return}const{style:Z}=this.container;let d;if(W(this,$G)){const{borderColor:I,borderWidth:g}=Z;Z.borderWidth=0,d=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${I}" stroke-width="${g}">`],this.container.classList.add("hasBorder")}const B=A-g,F=l-C,{svgFactory:i}=this,c=i.createElement("svg");c.classList.add("quadrilateralsContainer"),c.setAttribute("width",0),c.setAttribute("height",0);const G=i.createElement("defs");c.append(G);const V=i.createElement("clipPath"),R=`clippath_${this.data.id}`;V.setAttribute("id",R),V.setAttribute("clipPathUnits","objectBoundingBox"),G.append(V);for(let W=2,U=I.length;W<U;W+=8){const C=I[W],A=I[W+1],Z=I[W+2],c=I[W+3],G=i.createElement("rect"),R=(Z-g)/B,U=(l-A)/F,b=(C-Z)/B,s=(A-c)/F;G.setAttribute("x",R),G.setAttribute("y",U),G.setAttribute("width",b),G.setAttribute("height",s),V.append(G),null==d||d.push(`<rect vector-effect="non-scaling-stroke" x="${R}" y="${U}" width="${b}" height="${s}"/>`)}W(this,$G)&&(d.push("</g></svg>')"),Z.backgroundImage=d.join("")),this.container.append(c),this.container.style.clipPath=`url(#${R})`}_createPopup(){const{data:I}=this,g=R(this,IW,new GV({data:{color:I.color,titleObj:I.titleObj,modificationDate:I.modificationDate,contentsObj:I.contentsObj,richText:I.richText,parentRect:I.rect,borderStyle:0,id:`popup_${I.id}`,rotation:I.rotation},parent:this.parent,elements:[this]}));this.parent.div.append(g.render())}render(){ZA("Abstract method `AnnotationElement.render` called")}_getElementsByName(I,g=null){const C=[];if(this._fieldObjects){const A=this._fieldObjects[I];if(A)for(const{page:I,id:l,exportValues:Z}of A){if(-1===I||l===g)continue;const A="string"==typeof Z?Z:null,d=document.querySelector(`[data-element-id="${l}"]`);!d||PG.has(d)?C.push({id:l,exportValue:A,domElement:d}):lA(`_getElementsByName - element not allowed: ${l}`)}return C}for(const A of document.getElementsByName(I)){const{exportValue:I}=A,l=A.getAttribute("data-element-id");l!==g&&PG.has(A)&&C.push({id:l,exportValue:I,domElement:A})}return C}show(){var I;this.container&&(this.container.hidden=!1),null==(I=this.popup)||I.maybeShow()}hide(){var I;this.container&&(this.container.hidden=!0),null==(I=this.popup)||I.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const I=this.getElementsToTriggerPopup();if(Array.isArray(I))for(const g of I)g.classList.add("highlightArea");else I.classList.add("highlightArea")}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:I,data:{id:g}}=this;this.container.addEventListener("dblclick",(()=>{var C;null==(C=this.linkService.eventBus)||C.dispatch("switchannotationeditormode",{source:this,mode:I,editId:g})}))}};qG=new WeakMap,$G=new WeakMap,IW=new WeakMap,gW=new WeakSet,CW=function(I){const{container:{style:g},data:{rect:C,rotation:A},parent:{viewport:{rawDims:{pageWidth:l,pageHeight:Z,pageX:d,pageY:B}}}}=this;null==C||C.splice(0,4,...I);const{width:F,height:i}=fG(I);g.left=100*(I[0]-d)/l+"%",g.top=100*(Z-I[3]+B)/Z+"%",0===A?(g.width=100*F/l+"%",g.height=100*i/Z+"%"):this.setRotation(A)};let lW=AW;var ZW,dW,BW,FW,iW,cW,GW,WW,VW,RW,UW,bW,sW,QW,mW,NW,hW,nW,aW,oW,wW,YW,SW,JW,MW,DW,tW,XW,HW,eW,yW,uW,pW,kW,KW,zW,TW,LW,EW,jW,xW,OW,rW,vW,PW,fW,_W,qW,$W,IV,gV;class CV extends lW{constructor(I,g=null){super(I,{isRenderable:!0,ignoreBorder:!(null==g||!g.ignoreBorder),createQuadrilaterals:!0}),V(this,ZW),this.isTooltipOnly=I.data.isTooltipOnly}render(){const{data:I,linkService:g}=this,C=document.createElement("a");C.setAttribute("data-element-id",I.id);let A=!1;return I.url?(g.addLinkAttributes(C,I.url,I.newWindow),A=!0):I.action?(this._bindNamedAction(C,I.action),A=!0):I.attachment?(U(this,ZW,BW).call(this,C,I.attachment,I.attachmentDest),A=!0):I.setOCGState?(U(this,ZW,FW).call(this,C,I.setOCGState),A=!0):I.dest?(this._bindLink(C,I.dest),A=!0):(I.actions&&(I.actions.Action||I.actions["Mouse Up"]||I.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(C,I),A=!0),I.resetForm?(this._bindResetFormAction(C,I.resetForm),A=!0):this.isTooltipOnly&&!A&&(this._bindLink(C,""),A=!0)),this.container.classList.add("linkAnnotation"),A&&this.container.append(C),this.container}_bindLink(I,g){I.href=this.linkService.getDestinationHash(g),I.onclick=()=>(g&&this.linkService.goToDestination(g),!1),(g||""===g)&&U(this,ZW,dW).call(this)}_bindNamedAction(I,g){I.href=this.linkService.getAnchorUrl(""),I.onclick=()=>(this.linkService.executeNamedAction(g),!1),U(this,ZW,dW).call(this)}_bindJSAction(I,g){I.href=this.linkService.getAnchorUrl("");const C=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const A of Object.keys(g.actions)){const l=C.get(A);l&&(I[l]=()=>{var I;return null==(I=this.linkService.eventBus)||I.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g.id,name:A}}),!1})}I.onclick||(I.onclick=()=>!1),U(this,ZW,dW).call(this)}_bindResetFormAction(I,g){const C=I.onclick;if(C||(I.href=this.linkService.getAnchorUrl("")),U(this,ZW,dW).call(this),!this._fieldObjects)return lA('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),void(C||(I.onclick=()=>!1));I.onclick=()=>{var I;null==C||C();const{fields:A,refs:l,include:Z}=g,d=[];if(0!==A.length||0!==l.length){const I=new Set(l);for(const g of A){const C=this._fieldObjects[g]||[];for(const{id:g}of C)I.add(g)}for(const g of Object.values(this._fieldObjects))for(const C of g)I.has(C.id)===Z&&d.push(C)}else for(const g of Object.values(this._fieldObjects))d.push(...g);const B=this.annotationStorage,F=[];for(const g of d){const{id:I}=g;switch(F.push(I),g.type){case"text":{const C=g.defaultValue||"";B.setValue(I,{value:C});break}case"checkbox":case"radiobutton":{const C=g.defaultValue===g.exportValues;B.setValue(I,{value:C});break}case"combobox":case"listbox":{const C=g.defaultValue||"";B.setValue(I,{value:C});break}default:continue}const C=document.querySelector(`[data-element-id="${I}"]`);C&&(PG.has(C)?C.dispatchEvent(new Event("resetform")):lA(`_bindResetFormAction - element not allowed: ${I}`))}return this.enableScripting&&(null==(I=this.linkService.eventBus)||I.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:F,name:"ResetForm"}})),!1}}}ZW=new WeakSet,dW=function(){this.container.setAttribute("data-internal-link","")},BW=function(I,g,C=null){I.href=this.linkService.getAnchorUrl(""),g.description&&(I.title=g.description),I.onclick=()=>{var I;return null==(I=this.downloadManager)||I.openOrDownloadData(g.content,g.filename,C),!1},U(this,ZW,dW).call(this)},FW=function(I,g){I.href=this.linkService.getAnchorUrl(""),I.onclick=()=>(this.linkService.executeSetOCGState(g),!1),U(this,ZW,dW).call(this)};class AV extends lW{constructor(I){super(I,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const I=document.createElement("img");return I.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",I.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),I.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(I),this.container}}class lV extends lW{render(){return this.container}showElementAndHideCanvas(I){var g;this.data.hasOwnCanvas&&("CANVAS"===(null==(g=I.previousSibling)?void 0:g.nodeName)&&(I.previousSibling.hidden=!0),I.hidden=!1)}_getKeyModifier(I){return oA.platform.isMac?I.metaKey:I.ctrlKey}_setEventListener(I,g,C,A,l){C.includes("mouse")?I.addEventListener(C,(I=>{var g;null==(g=this.linkService.eventBus)||g.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(I),shift:I.shiftKey,modifier:this._getKeyModifier(I)}})})):I.addEventListener(C,(I=>{var Z;if("blur"===C){if(!g.focused||!I.relatedTarget)return;g.focused=!1}else if("focus"===C){if(g.focused)return;g.focused=!0}l&&(null==(Z=this.linkService.eventBus)||Z.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(I)}}))}))}_setEventListeners(I,g,C,A){var l,Z,d;for(const[B,F]of C)("Action"===F||null!=(l=this.data.actions)&&l[F])&&(("Focus"===F||"Blur"===F)&&(g||(g={focused:!1})),this._setEventListener(I,g,B,F,A),"Focus"!==F||null!=(Z=this.data.actions)&&Z.Blur?"Blur"===F&&(null==(d=this.data.actions)||!d.Focus)&&this._setEventListener(I,g,"focus","Focus",null):this._setEventListener(I,g,"blur","Blur",null))}_setBackgroundColor(I){const g=this.data.backgroundColor||null;I.style.backgroundColor=null===g?"transparent":MA.makeHexColor(g[0],g[1],g[2])}_setTextStyle(I){const g=["left","center","right"],{fontColor:C}=this.data.defaultAppearanceData,A=this.data.defaultAppearanceData.fontSize||vG,l=I.style;let Z;const d=2,B=I=>Math.round(10*I)/10;if(this.data.multiLine){const I=Math.abs(this.data.rect[3]-this.data.rect[1]-d),g=Math.round(I/(zC*A))||1,C=I/g;Z=Math.min(A,B(C/zC))}else{const I=Math.abs(this.data.rect[3]-this.data.rect[1]-d);Z=Math.min(A,B(I/zC))}l.fontSize=`calc(${Z}px * var(--scale-factor))`,l.color=MA.makeHexColor(C[0],C[1],C[2]),null!==this.data.textAlignment&&(l.textAlign=g[this.data.textAlignment])}_setRequired(I,g){g?I.setAttribute("required",!0):I.removeAttribute("required"),I.setAttribute("aria-required",g)}}class ZV extends lV{constructor(I){const g=I.renderForms||I.data.hasOwnCanvas||!I.data.hasAppearance&&!!I.data.fieldValue;super(I,{isRenderable:g})}setPropertyOnSiblings(I,g,C,A){const l=this.annotationStorage;for(const Z of this._getElementsByName(I.name,I.id))Z.domElement&&(Z.domElement[g]=C),l.setValue(Z.id,{[A]:C})}render(){var I,g;const C=this.annotationStorage,A=this.data.id;this.container.classList.add("textWidgetAnnotation");let l=null;if(this.renderForms){const Z=C.getValue(A,{value:this.data.fieldValue});let d=Z.value||"";const B=C.getValue(A,{charLimit:this.data.maxLen}).charLimit;B&&d.length>B&&(d=d.slice(0,B));let F=Z.formattedValue||(null==(I=this.data.textContent)?void 0:I.join("\n"))||null;F&&this.data.comb&&(F=F.replaceAll(/\s+/g,""));const i={userValue:d,formattedValue:F,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(l=document.createElement("textarea"),l.textContent=F??d,this.data.doNotScroll&&(l.style.overflowY="hidden")):(l=document.createElement("input"),l.type="text",l.setAttribute("value",F??d),this.data.doNotScroll&&(l.style.overflowX="hidden")),this.data.hasOwnCanvas&&(l.hidden=!0),PG.add(l),l.setAttribute("data-element-id",A),l.disabled=this.data.readOnly,l.name=this.data.fieldName,l.tabIndex=rG,this._setRequired(l,this.data.required),B&&(l.maxLength=B),l.addEventListener("input",(I=>{C.setValue(A,{value:I.target.value}),this.setPropertyOnSiblings(l,"value",I.target.value,"value"),i.formattedValue=null})),l.addEventListener("resetform",(I=>{const g=this.data.defaultFieldValue??"";l.value=i.userValue=g,i.formattedValue=null}));let c=I=>{const{formattedValue:g}=i;null!=g&&(I.target.value=g),I.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){l.addEventListener("focus",(I=>{var g;if(i.focused)return;const{target:C}=I;i.userValue&&(C.value=i.userValue),i.lastCommittedValue=C.value,i.commitKey=1,null!=(g=this.data.actions)&&g.Focus||(i.focused=!0)})),l.addEventListener("updatefromsandbox",(I=>{this.showElementAndHideCanvas(I.target);const g={value(I){i.userValue=I.detail.value??"",C.setValue(A,{value:i.userValue.toString()}),I.target.value=i.userValue},formattedValue(I){const{formattedValue:g}=I.detail;i.formattedValue=g,null!=g&&I.target!==document.activeElement&&(I.target.value=g),C.setValue(A,{formattedValue:g})},selRange(I){I.target.setSelectionRange(...I.detail.selRange)},charLimit:I=>{var g;const{charLimit:l}=I.detail,{target:Z}=I;if(0===l)return void Z.removeAttribute("maxLength");Z.setAttribute("maxLength",l);let d=i.userValue;!d||d.length<=l||(d=d.slice(0,l),Z.value=i.userValue=d,C.setValue(A,{value:d}),null==(g=this.linkService.eventBus)||g.dispatch("dispatcheventinsandbox",{source:this,detail:{id:A,name:"Keystroke",value:d,willCommit:!0,commitKey:1,selStart:Z.selectionStart,selEnd:Z.selectionEnd}}))}};this._dispatchEventFromSandbox(g,I)})),l.addEventListener("keydown",(I=>{var g;i.commitKey=1;let C=-1;if("Escape"===I.key?C=0:"Enter"!==I.key||this.data.multiLine?"Tab"===I.key&&(i.commitKey=3):C=2,-1===C)return;const{value:l}=I.target;i.lastCommittedValue!==l&&(i.lastCommittedValue=l,i.userValue=l,null==(g=this.linkService.eventBus)||g.dispatch("dispatcheventinsandbox",{source:this,detail:{id:A,name:"Keystroke",value:l,willCommit:!0,commitKey:C,selStart:I.target.selectionStart,selEnd:I.target.selectionEnd}}))}));const I=c;c=null,l.addEventListener("blur",(g=>{var C,l;if(!i.focused||!g.relatedTarget)return;null!=(C=this.data.actions)&&C.Blur||(i.focused=!1);const{value:Z}=g.target;i.userValue=Z,i.lastCommittedValue!==Z&&(null==(l=this.linkService.eventBus)||l.dispatch("dispatcheventinsandbox",{source:this,detail:{id:A,name:"Keystroke",value:Z,willCommit:!0,commitKey:i.commitKey,selStart:g.target.selectionStart,selEnd:g.target.selectionEnd}})),I(g)})),null!=(g=this.data.actions)&&g.Keystroke&&l.addEventListener("beforeinput",(I=>{var g;i.lastCommittedValue=null;const{data:C,target:l}=I,{value:Z,selectionStart:d,selectionEnd:B}=l;let F=d,c=B;switch(I.inputType){case"deleteWordBackward":{const I=Z.substring(0,d).match(/\w*[^\w]*$/);I&&(F-=I[0].length);break}case"deleteWordForward":{const I=Z.substring(d).match(/^[^\w]*\w*/);I&&(c+=I[0].length);break}case"deleteContentBackward":d===B&&(F-=1);break;case"deleteContentForward":d===B&&(c+=1);break}I.preventDefault(),null==(g=this.linkService.eventBus)||g.dispatch("dispatcheventinsandbox",{source:this,detail:{id:A,name:"Keystroke",value:Z,change:C||"",willCommit:!1,selStart:F,selEnd:c}})})),this._setEventListeners(l,i,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(I=>I.target.value))}if(c&&l.addEventListener("blur",c),this.data.comb){const I=(this.data.rect[2]-this.data.rect[0])/B;l.classList.add("comb"),l.style.letterSpacing=`calc(${I}px * var(--scale-factor) - 1ch)`}}else l=document.createElement("div"),l.textContent=this.data.fieldValue,l.style.verticalAlign="middle",l.style.display="table-cell",this.data.hasOwnCanvas&&(l.hidden=!0);return this._setTextStyle(l),this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class dV extends lV{constructor(I){super(I,{isRenderable:!!I.data.hasOwnCanvas})}}class BV extends lV{constructor(I){super(I,{isRenderable:I.renderForms})}render(){const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.exportValue===g.fieldValue}).value;"string"==typeof A&&(A="Off"!==A,I.setValue(C,{value:A})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const l=document.createElement("input");return PG.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="checkbox",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.setAttribute("exportValue",g.exportValue),l.tabIndex=rG,l.addEventListener("change",(A=>{const{name:l,checked:Z}=A.target;for(const d of this._getElementsByName(l,C)){const C=Z&&d.exportValue===g.exportValue;d.domElement&&(d.domElement.checked=C),I.setValue(d.id,{value:C})}I.setValue(C,{value:Z})})),l.addEventListener("resetform",(I=>{const C=g.defaultFieldValue||"Off";I.target.checked=C===g.exportValue})),this.enableScripting&&this.hasJSActions&&(l.addEventListener("updatefromsandbox",(g=>{const A={value(g){g.target.checked="Off"!==g.detail.value,I.setValue(C,{value:g.target.checked})}};this._dispatchEventFromSandbox(A,g)})),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(I=>I.target.checked))),this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class FV extends lV{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.fieldValue===g.buttonValue}).value;if("string"==typeof A&&(A=A!==g.buttonValue,I.setValue(C,{value:A})),A)for(const Z of this._getElementsByName(g.fieldName,C))I.setValue(Z.id,{value:!1});const l=document.createElement("input");if(PG.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="radio",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.tabIndex=rG,l.addEventListener("change",(g=>{const{name:A,checked:l}=g.target;for(const Z of this._getElementsByName(A,C))I.setValue(Z.id,{value:!1});I.setValue(C,{value:l})})),l.addEventListener("resetform",(I=>{const C=g.defaultFieldValue;I.target.checked=null!=C&&C===g.buttonValue})),this.enableScripting&&this.hasJSActions){const A=g.buttonValue;l.addEventListener("updatefromsandbox",(g=>{const l={value:g=>{const l=A===g.detail.value;for(const A of this._getElementsByName(g.target.name)){const g=l&&A.id===C;A.domElement&&(A.domElement.checked=g),I.setValue(A.id,{value:g})}}};this._dispatchEventFromSandbox(l,g)})),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(I=>I.target.checked))}return this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class iV extends CV{constructor(I){super(I,{ignoreBorder:I.data.hasAppearance})}render(){const I=super.render();I.classList.add("buttonWidgetAnnotation","pushButton");const g=I.lastChild;return this.enableScripting&&this.hasJSActions&&g&&(this._setDefaultPropertiesFromJS(g),g.addEventListener("updatefromsandbox",(I=>{this._dispatchEventFromSandbox({},I)}))),I}}class cV extends lV{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const I=this.annotationStorage,g=this.data.id,C=I.getValue(g,{value:this.data.fieldValue}),A=document.createElement("select");PG.add(A),A.setAttribute("data-element-id",g),A.disabled=this.data.readOnly,this._setRequired(A,this.data.required),A.name=this.data.fieldName,A.tabIndex=rG;let l=this.data.combo&&this.data.options.length>0;this.data.combo||(A.size=this.data.options.length,this.data.multiSelect&&(A.multiple=!0)),A.addEventListener("resetform",(I=>{const g=this.data.defaultFieldValue;for(const C of A.options)C.selected=C.value===g}));for(const i of this.data.options){const I=document.createElement("option");I.textContent=i.displayValue,I.value=i.exportValue,C.value.includes(i.exportValue)&&(I.setAttribute("selected",!0),l=!1),A.append(I)}let Z=null;if(l){const I=document.createElement("option");I.value=" ",I.setAttribute("hidden",!0),I.setAttribute("selected",!0),A.prepend(I),Z=()=>{I.remove(),A.removeEventListener("input",Z),Z=null},A.addEventListener("input",Z)}const d=I=>{const g=I?"value":"textContent",{options:C,multiple:l}=A;return l?Array.prototype.filter.call(C,(I=>I.selected)).map((I=>I[g])):-1===C.selectedIndex?null:C[C.selectedIndex][g]};let B=d(!1);const F=I=>{const g=I.target.options;return Array.prototype.map.call(g,(I=>({displayValue:I.textContent,exportValue:I.value})))};return this.enableScripting&&this.hasJSActions?(A.addEventListener("updatefromsandbox",(C=>{const l={value(C){null==Z||Z();const l=C.detail.value,F=new Set(Array.isArray(l)?l:[l]);for(const I of A.options)I.selected=F.has(I.value);I.setValue(g,{value:d(!0)}),B=d(!1)},multipleSelection(I){A.multiple=!0},remove(C){const l=A.options,Z=C.detail.remove;l[Z].selected=!1,A.remove(Z),l.length>0&&-1===Array.prototype.findIndex.call(l,(I=>I.selected))&&(l[0].selected=!0),I.setValue(g,{value:d(!0),items:F(C)}),B=d(!1)},clear(C){for(;0!==A.length;)A.remove(0);I.setValue(g,{value:null,items:[]}),B=d(!1)},insert(C){const{index:l,displayValue:Z,exportValue:i}=C.detail.insert,c=A.children[l],G=document.createElement("option");G.textContent=Z,G.value=i,c?c.before(G):A.append(G),I.setValue(g,{value:d(!0),items:F(C)}),B=d(!1)},items(C){const{items:l}=C.detail;for(;0!==A.length;)A.remove(0);for(const I of l){const{displayValue:g,exportValue:C}=I,l=document.createElement("option");l.textContent=g,l.value=C,A.append(l)}A.options.length>0&&(A.options[0].selected=!0),I.setValue(g,{value:d(!0),items:F(C)}),B=d(!1)},indices(C){const A=new Set(C.detail.indices);for(const I of C.target.options)I.selected=A.has(I.index);I.setValue(g,{value:d(!0)}),B=d(!1)},editable(I){I.target.disabled=!I.detail.editable}};this._dispatchEventFromSandbox(l,C)})),A.addEventListener("input",(C=>{var A;const l=d(!0),Z=d(!1);I.setValue(g,{value:l}),C.preventDefault(),null==(A=this.linkService.eventBus)||A.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:B,change:Z,changeEx:l,willCommit:!1,commitKey:1,keyDown:!1}})})),this._setEventListeners(A,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],(I=>I.target.value))):A.addEventListener("input",(function(C){I.setValue(g,{value:d(!0)})})),this.data.combo&&this._setTextStyle(A),this._setBackgroundColor(A),this._setDefaultPropertiesFromJS(A),this.container.append(A),this.container}}class GV extends lW{constructor(I){const{data:g,elements:C}=I;super(I,{isRenderable:lW._hasPopupData(g)}),this.elements=C,this.popup=null}render(){this.container.classList.add("popupAnnotation");const I=this.popup=new WV({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),g=[];for(const C of this.elements)C.popup=I,C.container.ariaHasPopup="dialog",g.push(C.data.id),C.addHighlightArea();return this.container.setAttribute("aria-controls",g.map((I=>`${yA}${I}`)).join(",")),this.container}}class WV{constructor({container:I,color:g,elements:C,titleObj:A,modificationDate:l,contentsObj:Z,richText:d,parent:B,rect:F,parentRect:i,open:c}){var G;V(this,JW),V(this,iW,U(this,JW,HW).bind(this)),V(this,cW,U(this,JW,pW).bind(this)),V(this,GW,U(this,JW,uW).bind(this)),V(this,WW,U(this,JW,yW).bind(this)),V(this,VW,null),V(this,RW,null),V(this,UW,null),V(this,bW,null),V(this,sW,null),V(this,QW,null),V(this,mW,null),V(this,NW,!1),V(this,hW,null),V(this,nW,null),V(this,aW,null),V(this,oW,null),V(this,wW,null),V(this,YW,null),V(this,SW,!1),R(this,RW,I),R(this,wW,A),R(this,UW,Z),R(this,oW,d),R(this,QW,B),R(this,VW,g),R(this,aW,F),R(this,mW,i),R(this,sW,C),R(this,bW,Rl.toDateObject(l)),this.trigger=C.flatMap((I=>I.getElementsToTriggerPopup()));for(const V of this.trigger)V.addEventListener("click",W(this,WW)),V.addEventListener("mouseenter",W(this,GW)),V.addEventListener("mouseleave",W(this,cW)),V.classList.add("popupTriggerArea");for(const V of C)null==(G=V.container)||G.addEventListener("keydown",W(this,iW));W(this,RW).hidden=!0,c&&U(this,JW,yW).call(this)}render(){if(W(this,hW))return;const I=R(this,hW,document.createElement("div"));if(I.className="popup",W(this,VW)){const g=I.style.outlineColor=MA.makeHexColor(...W(this,VW));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?I.style.backgroundColor=`color-mix(in srgb, ${g} 30%, white)`:I.style.backgroundColor=MA.makeHexColor(...W(this,VW).map((I=>Math.floor(.7*(255-I)+I))))}const g=document.createElement("span");g.className="header";const C=document.createElement("h1");if(g.append(C),({dir:C.dir,str:C.textContent}=W(this,wW)),I.append(g),W(this,bW)){const I=document.createElement("span");I.classList.add("popupDate"),I.setAttribute("data-l10n-id","pdfjs-annotation-date-time-string"),I.setAttribute("data-l10n-args",JSON.stringify({dateObj:W(this,bW).valueOf()})),g.append(I)}const A=W(this,JW,MW);if(A)OG.render({xfaHtml:A,intent:"richText",div:I}),I.lastChild.classList.add("richText","popupContent");else{const g=this._formatContents(W(this,UW));I.append(g)}W(this,RW).append(I)}_formatContents({str:I,dir:g}){const C=document.createElement("p");C.classList.add("popupContent"),C.dir=g;const A=I.split(/(?:\r\n?|\n)/);for(let l=0,Z=A.length;l<Z;++l){const I=A[l];C.append(document.createTextNode(I)),l<Z-1&&C.append(document.createElement("br"))}return C}updateEdited({rect:I,popupContent:g}){var C;W(this,YW)||R(this,YW,{contentsObj:W(this,UW),richText:W(this,oW)}),I&&R(this,nW,null),g&&(R(this,oW,U(this,JW,XW).call(this,g)),R(this,UW,null)),null==(C=W(this,hW))||C.remove(),R(this,hW,null)}resetEdited(){var I;W(this,YW)&&(({contentsObj:b(this,UW)._,richText:b(this,oW)._}=W(this,YW)),R(this,YW,null),null==(I=W(this,hW))||I.remove(),R(this,hW,null),R(this,nW,null))}forceHide(){R(this,SW,this.isVisible),W(this,SW)&&(W(this,RW).hidden=!0)}maybeShow(){W(this,SW)&&(W(this,hW)||U(this,JW,uW).call(this),R(this,SW,!1),W(this,RW).hidden=!1)}get isVisible(){return!1===W(this,RW).hidden}}iW=new WeakMap,cW=new WeakMap,GW=new WeakMap,WW=new WeakMap,VW=new WeakMap,RW=new WeakMap,UW=new WeakMap,bW=new WeakMap,sW=new WeakMap,QW=new WeakMap,mW=new WeakMap,NW=new WeakMap,hW=new WeakMap,nW=new WeakMap,aW=new WeakMap,oW=new WeakMap,wW=new WeakMap,YW=new WeakMap,SW=new WeakMap,JW=new WeakSet,MW=function(){const I=W(this,oW),g=W(this,UW);return null!=I&&I.str&&(!(null!=g&&g.str)||g.str===I.str)&&W(this,oW).html||null},DW=function(){var I,g,C;return(null==(C=null==(g=null==(I=W(this,JW,MW))?void 0:I.attributes)?void 0:g.style)?void 0:C.fontSize)||0},tW=function(){var I,g,C;return(null==(C=null==(g=null==(I=W(this,JW,MW))?void 0:I.attributes)?void 0:g.style)?void 0:C.color)||null},XW=function(I){const g=[],C={str:I,html:{name:"div",attributes:{dir:"auto"},children:[{name:"p",children:g}]}},A={style:{color:W(this,JW,tW),fontSize:W(this,JW,DW)?`calc(${W(this,JW,DW)}px * var(--scale-factor))`:""}};for(const l of I.split("\n"))g.push({name:"span",value:l,attributes:A});return C},HW=function(I){I.altKey||I.shiftKey||I.ctrlKey||I.metaKey||("Enter"===I.key||"Escape"===I.key&&W(this,NW))&&U(this,JW,yW).call(this)},eW=function(){if(null!==W(this,nW))return;const{page:{view:I},viewport:{rawDims:{pageWidth:g,pageHeight:C,pageX:A,pageY:l}}}=W(this,QW);let Z=!!W(this,mW),d=W(this,Z?mW:aW);for(const V of W(this,sW))if(!d||null!==MA.intersect(V.data.rect,d)){d=V.data.rect,Z=!0;break}const B=MA.normalizeRect([d[0],I[3]-d[1]+I[1],d[2],I[3]-d[3]+I[1]]),F=Z?d[2]-d[0]+5:0,i=B[0]+F,c=B[1];R(this,nW,[100*(i-A)/g,100*(c-l)/C]);const{style:G}=W(this,RW);G.left=`${W(this,nW)[0]}%`,G.top=`${W(this,nW)[1]}%`},yW=function(){R(this,NW,!W(this,NW)),W(this,NW)?(U(this,JW,uW).call(this),W(this,RW).addEventListener("click",W(this,WW)),W(this,RW).addEventListener("keydown",W(this,iW))):(U(this,JW,pW).call(this),W(this,RW).removeEventListener("click",W(this,WW)),W(this,RW).removeEventListener("keydown",W(this,iW)))},uW=function(){W(this,hW)||this.render(),this.isVisible?W(this,NW)&&W(this,RW).classList.add("focused"):(U(this,JW,eW).call(this),W(this,RW).hidden=!1,W(this,RW).style.zIndex=parseInt(W(this,RW).style.zIndex)+1e3)},pW=function(){W(this,RW).classList.remove("focused"),!W(this,NW)&&this.isVisible&&(W(this,RW).hidden=!0,W(this,RW).style.zIndex=parseInt(W(this,RW).style.zIndex)-1e3)};class VV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.textContent=I.data.textContent,this.textPosition=I.data.textPosition,this.annotationEditorType=jC.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const I=document.createElement("div");I.classList.add("annotationTextContent"),I.setAttribute("role","comment");for(const g of this.textContent){const C=document.createElement("span");C.textContent=g,I.append(C)}this.container.append(I)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}class RV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),V(this,kW,null)}render(){this.container.classList.add("lineAnnotation");const I=this.data,{width:g,height:C}=fG(I.rect),A=this.svgFactory.create(g,C,!0),l=R(this,kW,this.svgFactory.createElement("svg:line"));return l.setAttribute("x1",I.rect[2]-I.lineCoordinates[0]),l.setAttribute("y1",I.rect[3]-I.lineCoordinates[1]),l.setAttribute("x2",I.rect[2]-I.lineCoordinates[2]),l.setAttribute("y2",I.rect[3]-I.lineCoordinates[3]),l.setAttribute("stroke-width",I.borderStyle.width||1),l.setAttribute("stroke","transparent"),l.setAttribute("fill","transparent"),A.append(l),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return W(this,kW)}addHighlightArea(){this.container.classList.add("highlightArea")}}kW=new WeakMap;class UV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),V(this,KW,null)}render(){this.container.classList.add("squareAnnotation");const I=this.data,{width:g,height:C}=fG(I.rect),A=this.svgFactory.create(g,C,!0),l=I.borderStyle.width,Z=R(this,KW,this.svgFactory.createElement("svg:rect"));return Z.setAttribute("x",l/2),Z.setAttribute("y",l/2),Z.setAttribute("width",g-l),Z.setAttribute("height",C-l),Z.setAttribute("stroke-width",l||1),Z.setAttribute("stroke","transparent"),Z.setAttribute("fill","transparent"),A.append(Z),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return W(this,KW)}addHighlightArea(){this.container.classList.add("highlightArea")}}KW=new WeakMap;class bV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),V(this,zW,null)}render(){this.container.classList.add("circleAnnotation");const I=this.data,{width:g,height:C}=fG(I.rect),A=this.svgFactory.create(g,C,!0),l=I.borderStyle.width,Z=R(this,zW,this.svgFactory.createElement("svg:ellipse"));return Z.setAttribute("cx",g/2),Z.setAttribute("cy",C/2),Z.setAttribute("rx",g/2-l/2),Z.setAttribute("ry",C/2-l/2),Z.setAttribute("stroke-width",l||1),Z.setAttribute("stroke","transparent"),Z.setAttribute("fill","transparent"),A.append(Z),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return W(this,zW)}addHighlightArea(){this.container.classList.add("highlightArea")}}zW=new WeakMap;class sV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),V(this,TW,null),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const{data:{rect:I,vertices:g,borderStyle:C,popupRef:A}}=this;if(!g)return this.container;const{width:l,height:Z}=fG(I),d=this.svgFactory.create(l,Z,!0);let B=[];for(let i=0,c=g.length;i<c;i+=2){const C=g[i]-I[0],A=I[3]-g[i+1];B.push(`${C},${A}`)}B=B.join(" ");const F=R(this,TW,this.svgFactory.createElement(this.svgElementName));return F.setAttribute("points",B),F.setAttribute("stroke-width",C.width||1),F.setAttribute("stroke","transparent"),F.setAttribute("fill","transparent"),d.append(F),this.container.append(d),!A&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return W(this,TW)}addHighlightArea(){this.container.classList.add("highlightArea")}}TW=new WeakMap;class QV extends sV{constructor(I){super(I),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class mV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class NV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),V(this,jW),V(this,LW,null),V(this,EW,[]),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType="InkHighlight"===this.data.it?jC.HIGHLIGHT:jC.INK}render(){this.container.classList.add(this.containerClassName);const{data:{rect:I,rotation:g,inkLists:C,borderStyle:A,popupRef:l}}=this,{transform:Z,width:d,height:B}=U(this,jW,xW).call(this,g,I),F=this.svgFactory.create(d,B,!0),i=R(this,LW,this.svgFactory.createElement("svg:g"));F.append(i),i.setAttribute("stroke-width",A.width||1),i.setAttribute("stroke-linecap","round"),i.setAttribute("stroke-linejoin","round"),i.setAttribute("stroke-miterlimit",10),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),i.setAttribute("transform",Z);for(let c=0,G=C.length;c<G;c++){const I=this.svgFactory.createElement(this.svgElementName);W(this,EW).push(I),I.setAttribute("points",C[c].join(",")),i.append(I)}return!l&&this.hasPopupData&&this._createPopup(),this.container.append(F),this._editOnDoubleClick(),this.container}updateEdited(I){super.updateEdited(I);const{thickness:g,points:C,rect:A}=I,l=W(this,LW);if(g>=0&&l.setAttribute("stroke-width",g||1),C)for(let Z=0,d=W(this,EW).length;Z<d;Z++)W(this,EW)[Z].setAttribute("points",C[Z].join(","));if(A){const{transform:I,width:g,height:C}=U(this,jW,xW).call(this,this.data.rotation,A);l.parentElement.setAttribute("viewBox",`0 0 ${g} ${C}`),l.setAttribute("transform",I)}}getElementsToTriggerPopup(){return W(this,EW)}addHighlightArea(){this.container.classList.add("highlightArea")}}LW=new WeakMap,EW=new WeakMap,jW=new WeakSet,xW=function(I,g){switch(I){case 90:return{transform:`rotate(90) translate(${-g[0]},${g[1]}) scale(1,-1)`,width:g[3]-g[1],height:g[2]-g[0]};case 180:return{transform:`rotate(180) translate(${-g[2]},${g[1]}) scale(1,-1)`,width:g[2]-g[0],height:g[3]-g[1]};case 270:return{transform:`rotate(270) translate(${-g[2]},${g[3]}) scale(1,-1)`,width:g[3]-g[1],height:g[2]-g[0]};default:return{transform:`translate(${-g[0]},${g[3]}) scale(1,-1)`,width:g[2]-g[0],height:g[3]-g[1]}}};class hV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0}),this.annotationEditorType=jC.HIGHLIGHT}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this._editOnDoubleClick(),this.container}}class nV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class aV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class oV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class wV extends lW{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.annotationEditorType=jC.STAMP}render(){return this.container.classList.add("stampAnnotation"),this.container.setAttribute("role","img"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}class YV extends lW{constructor(I){var g;super(I,{isRenderable:!0}),V(this,rW),V(this,OW,null);const{file:C}=this.data;this.filename=C.filename,this.content=C.content,null==(g=this.linkService.eventBus)||g.dispatch("fileattachmentannotation",{source:this,...C})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:I,data:g}=this;let C;g.hasAppearance||0===g.fillAlpha?C=document.createElement("div"):(C=document.createElement("img"),C.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(g.name)?"paperclip":"pushpin"}.svg`,g.fillAlpha&&g.fillAlpha<1&&(C.style=`filter: opacity(${Math.round(100*g.fillAlpha)}%);`)),C.addEventListener("dblclick",U(this,rW,vW).bind(this)),R(this,OW,C);const{isMac:A}=oA.platform;return I.addEventListener("keydown",(I=>{"Enter"===I.key&&(A?I.metaKey:I.ctrlKey)&&U(this,rW,vW).call(this)})),!g.popupRef&&this.hasPopupData?this._createPopup():C.classList.add("popupTriggerArea"),I.append(C),I}getElementsToTriggerPopup(){return W(this,OW)}addHighlightArea(){this.container.classList.add("highlightArea")}}OW=new WeakMap,rW=new WeakSet,vW=function(){var I;null==(I=this.downloadManager)||I.openOrDownloadData(this.content,this.filename)};class SV{constructor({div:I,accessibilityManager:g,annotationCanvasMap:C,annotationEditorUIManager:A,page:l,viewport:Z,structTreeLayer:d}){V(this,$W),V(this,PW,null),V(this,fW,null),V(this,_W,new Map),V(this,qW,null),this.div=I,R(this,PW,g),R(this,fW,C),R(this,qW,d||null),this.page=l,this.viewport=Z,this.zIndex=0,this._annotationEditorUIManager=A}hasEditableAnnotations(){return W(this,_W).size>0}async render(I){var g;const{annotations:C}=I,A=this.div;Nl(A,this.viewport);const l=new Map,Z={data:null,layer:A,linkService:I.linkService,downloadManager:I.downloadManager,imageResourcesPath:I.imageResourcesPath||"",renderForms:!1!==I.renderForms,svgFactory:new xG,annotationStorage:I.annotationStorage||new _B,enableScripting:!0===I.enableScripting,hasJSActions:I.hasJSActions,fieldObjects:I.fieldObjects,parent:this,elements:null};for(const d of C){if(d.noHTML)continue;const I=d.annotationType===PC.POPUP;if(I){const I=l.get(d.id);if(!I)continue;Z.elements=I}else{const{width:I,height:g}=fG(d.rect);if(I<=0||g<=0)continue}Z.data=d;const C=_G.create(Z);if(!C.isRenderable)continue;if(!I&&d.popupRef){const I=l.get(d.popupRef);I?I.push(C):l.set(d.popupRef,[C])}const A=C.render();d.hidden&&(A.style.visibility="hidden"),await U(this,$W,IV).call(this,A,d.id),C._isEditable&&(W(this,_W).set(C.data.id,C),null==(g=this._annotationEditorUIManager)||g.renderAnnotationElement(C))}U(this,$W,gV).call(this)}update({viewport:I}){const g=this.div;this.viewport=I,Nl(g,{rotation:I.rotation}),U(this,$W,gV).call(this),g.hidden=!1}getEditableAnnotations(){return Array.from(W(this,_W).values())}getEditableAnnotation(I){return W(this,_W).get(I)}}PW=new WeakMap,fW=new WeakMap,_W=new WeakMap,qW=new WeakMap,$W=new WeakSet,IV=async function(I,g){var C,A;const l=I.firstChild||I,Z=l.id=`${yA}${g}`,d=await(null==(C=W(this,qW))?void 0:C.getAriaAttributes(Z));if(d)for(const[B,F]of d)l.setAttribute(B,F);this.div.append(I),null==(A=W(this,PW))||A.moveElementInDOM(this.div,I,l,!1)},gV=function(){if(!W(this,fW))return;const I=this.div;for(const[g,C]of W(this,fW)){const A=I.querySelector(`[data-annotation-id="${g}"]`);if(!A)continue;C.className="annotationContent";const{firstChild:l}=A;l?"CANVAS"===l.nodeName?l.replaceWith(C):l.classList.contains("annotationContent")?l.after(C):l.before(C):A.append(C)}W(this,fW).clear()};const JV=/\r\n?|\n/g;var MV,DV,tV,XV,HV,eV,yV,uV,pV,kV,KV,zV,TV,LV,EV,jV;const xV=class I extends bB{constructor(g){super({...g,name:"freeTextEditor"}),V(this,eV),V(this,MV),V(this,DV,""),V(this,tV,`${this.id}-editor`),V(this,XV,null),V(this,HV),R(this,MV,g.color||I._defaultColor||bB._defaultLineColor),R(this,HV,g.fontSize||I._defaultFontSize)}static get _keyboardManager(){const g=I.prototype,C=I=>I.isEmpty(),A=id.TRANSLATE_SMALL,l=id.TRANSLATE_BIG;return iA(this,"_keyboardManager",new Pl([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],g.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],g.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],g._translateEmpty,{args:[-A,0],checker:C}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],g._translateEmpty,{args:[-l,0],checker:C}],[["ArrowRight","mac+ArrowRight"],g._translateEmpty,{args:[A,0],checker:C}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],g._translateEmpty,{args:[l,0],checker:C}],[["ArrowUp","mac+ArrowUp"],g._translateEmpty,{args:[0,-A],checker:C}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],g._translateEmpty,{args:[0,-l],checker:C}],[["ArrowDown","mac+ArrowDown"],g._translateEmpty,{args:[0,A],checker:C}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],g._translateEmpty,{args:[0,l],checker:C}]]))}static initialize(I,g){bB.initialize(I,g);const C=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(C.getPropertyValue("--freetext-padding"))}static updateDefaultParams(g,C){switch(g){case xC.FREETEXT_SIZE:I._defaultFontSize=C;break;case xC.FREETEXT_COLOR:I._defaultColor=C;break}}updateParams(I,g){switch(I){case xC.FREETEXT_SIZE:U(this,eV,yV).call(this,g);break;case xC.FREETEXT_COLOR:U(this,eV,uV).call(this,g);break}}static get defaultPropertiesToUpdate(){return[[xC.FREETEXT_SIZE,I._defaultFontSize],[xC.FREETEXT_COLOR,I._defaultColor||bB._defaultLineColor]]}get propertiesToUpdate(){return[[xC.FREETEXT_SIZE,W(this,HV)],[xC.FREETEXT_COLOR,W(this,MV)]]}_translateEmpty(I,g){this._uiManager.translateSelectedEditors(I,g,!0)}getInitialTranslation(){const g=this.parentScale;return[-I._internalPadding*g,-(I._internalPadding+W(this,HV))*g]}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){if(this.isInEditMode())return;this.parent.setEditingState(!1),this.parent.updateToolbar(jC.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),R(this,XV,new AbortController);const I=this._uiManager.combinedSignal(W(this,XV));this.editorDiv.addEventListener("keydown",this.editorDivKeydown.bind(this),{signal:I}),this.editorDiv.addEventListener("focus",this.editorDivFocus.bind(this),{signal:I}),this.editorDiv.addEventListener("blur",this.editorDivBlur.bind(this),{signal:I}),this.editorDiv.addEventListener("input",this.editorDivInput.bind(this),{signal:I}),this.editorDiv.addEventListener("paste",this.editorDivPaste.bind(this),{signal:I})}disableEditMode(){var I;this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",W(this,tV)),this._isDraggable=!0,null==(I=W(this,XV))||I.abort(),R(this,XV,null),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"))}focusin(I){this._focusEventsAllowed&&(super.focusin(I),I.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var I;this.width||(this.enableEditMode(),this.editorDiv.focus(),null!=(I=this._initialOptions)&&I.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||""===this.editorDiv.innerText.trim()}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const I=W(this,DV),g=R(this,DV,U(this,eV,pV).call(this).trimEnd());if(I===g)return;const C=I=>{R(this,DV,I),I?(U(this,eV,TV).call(this),this._uiManager.rebuild(this),U(this,eV,kV).call(this)):this.remove()};this.addCommands({cmd:()=>{C(g)},undo:()=>{C(I)},mustExec:!1}),U(this,eV,kV).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(I){this.enterInEditMode()}keydown(I){I.target===this.div&&"Enter"===I.key&&(this.enterInEditMode(),I.preventDefault())}editorDivKeydown(g){I._keyboardManager.exec(this,g)}editorDivFocus(I){this.isEditing=!0}editorDivBlur(I){this.isEditing=!1}editorDivInput(I){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let I,g;this.width&&(I=this.x,g=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",W(this,tV)),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text2"),this.editorDiv.setAttribute("data-l10n-attrs","default-content"),this.enableEditing(),this.editorDiv.contentEditable=!0;const{style:C}=this.editorDiv;if(C.fontSize=`calc(${W(this,HV)}px * var(--scale-factor))`,C.color=W(this,MV),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),kl(this,this.div,["dblclick","keydown"]),this.width){const[C,A]=this.parentDimensions;if(this.annotationElementId){const{position:l}=this._initialData;let[Z,d]=this.getInitialTranslation();[Z,d]=this.pageTranslationToScreen(Z,d);const[B,F]=this.pageDimensions,[i,c]=this.pageTranslation;let G,W;switch(this.rotation){case 0:G=I+(l[0]-i)/B,W=g+this.height-(l[1]-c)/F;break;case 90:G=I+(l[0]-i)/B,W=g-(l[1]-c)/F,[Z,d]=[d,-Z];break;case 180:G=I-this.width+(l[0]-i)/B,W=g-(l[1]-c)/F,[Z,d]=[-Z,-d];break;case 270:G=I+(l[0]-i-this.height*F)/B,W=g+(l[1]-c-this.width*B)/F,[Z,d]=[-d,Z];break}this.setAt(G*C,W*A,Z,d)}else this.setAt(I*C,g*A,this.width*C,this.height*A);U(this,eV,TV).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}editorDivPaste(g){var C,A,l;const Z=g.clipboardData||window.clipboardData,{types:d}=Z;if(1===d.length&&"text/plain"===d[0])return;g.preventDefault();const B=U(C=I,KV,EV).call(C,Z.getData("text")||"").replaceAll(JV,"\n");if(!B)return;const F=window.getSelection();if(!F.rangeCount)return;this.editorDiv.normalize(),F.deleteFromDocument();const i=F.getRangeAt(0);if(!B.includes("\n"))return i.insertNode(document.createTextNode(B)),this.editorDiv.normalize(),void F.collapseToStart();const{startContainer:c,startOffset:G}=i,W=[],V=[];if(c.nodeType===Node.TEXT_NODE){const g=c.parentElement;if(V.push(c.nodeValue.slice(G).replaceAll(JV,"")),g!==this.editorDiv){let C=W;for(const l of this.editorDiv.childNodes)l!==g?C.push(U(A=I,KV,zV).call(A,l)):C=V}W.push(c.nodeValue.slice(0,G).replaceAll(JV,""))}else if(c===this.editorDiv){let g=W,C=0;for(const A of this.editorDiv.childNodes)C++===G&&(g=V),g.push(U(l=I,KV,zV).call(l,A))}R(this,DV,`${W.join("\n")}${B}${V.join("\n")}`),U(this,eV,TV).call(this);const b=new Range;let s=W.reduce(((I,g)=>I+g.length),0);for(const{firstChild:I}of this.editorDiv.childNodes)if(I.nodeType===Node.TEXT_NODE){const g=I.nodeValue.length;if(s<=g){b.setStart(I,s),b.setEnd(I,s);break}s-=g}F.removeAllRanges(),F.addRange(b)}get contentDiv(){return this.editorDiv}static async deserialize(g,C,A){var l;let Z=null;if(g instanceof VV){const{data:{defaultAppearanceData:{fontSize:I,fontColor:C},rect:A,rotation:l,id:d,popupRef:B},textContent:F,textPosition:i,parent:{page:{pageNumber:c}}}=g;if(!F||0===F.length)return null;Z=g={annotationType:jC.FREETEXT,color:Array.from(C),fontSize:I,value:F.join("\n"),position:i,pageIndex:c-1,rect:A.slice(0),rotation:l,id:d,deleted:!1,popupRef:B}}const d=await super.deserialize(g,C,A);return R(d,HV,g.fontSize),R(d,MV,MA.makeHexColor(...g.color)),R(d,DV,U(l=I,KV,EV).call(l,g.value)),d.annotationElementId=g.id||null,d._initialData=Z,d}serialize(g=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const C=I._internalPadding*this.parentScale,A=this.getRect(C,C),l=bB._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:W(this,MV)),Z={annotationType:jC.FREETEXT,color:l,fontSize:W(this,HV),value:U(this,eV,LV).call(this),pageIndex:this.pageIndex,rect:A,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return g?Z:this.annotationElementId&&!U(this,eV,jV).call(this,Z)?null:(Z.id=this.annotationElementId,Z)}renderAnnotationElement(g){const C=super.renderAnnotationElement(g);if(this.deleted)return C;const{style:A}=C;A.fontSize=`calc(${W(this,HV)}px * var(--scale-factor))`,A.color=W(this,MV),C.replaceChildren();for(const I of W(this,DV).split("\n")){const g=document.createElement("div");g.append(I?document.createTextNode(I):document.createElement("br")),C.append(g)}const l=I._internalPadding*this.parentScale;return g.updateEdited({rect:this.getRect(l,l),popupContent:W(this,DV)}),C}resetAnnotationElement(I){super.resetAnnotationElement(I),I.resetEdited()}};MV=new WeakMap,DV=new WeakMap,tV=new WeakMap,XV=new WeakMap,HV=new WeakMap,eV=new WeakSet,yV=function(I){const g=I=>{this.editorDiv.style.fontSize=`calc(${I}px * var(--scale-factor))`,this.translate(0,-(I-W(this,HV))*this.parentScale),R(this,HV,I),U(this,eV,kV).call(this)},C=W(this,HV);this.addCommands({cmd:g.bind(this,I),undo:g.bind(this,C),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:xC.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},uV=function(I){const g=I=>{R(this,MV,this.editorDiv.style.color=I)},C=W(this,MV);this.addCommands({cmd:g.bind(this,I),undo:g.bind(this,C),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:xC.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},pV=function(){var I;const g=[];this.editorDiv.normalize();let C=null;for(const A of this.editorDiv.childNodes)(null==C?void 0:C.nodeType)===Node.TEXT_NODE&&"BR"===A.nodeName||(g.push(U(I=xV,KV,zV).call(I,A)),C=A);return g.join("\n")},kV=function(){const[I,g]=this.parentDimensions;let C;if(this.isAttachedToDOM)C=this.div.getBoundingClientRect();else{const{currentLayer:I,div:g}=this,A=g.style.display,l=g.classList.contains("hidden");g.classList.remove("hidden"),g.style.display="hidden",I.div.append(this.div),C=g.getBoundingClientRect(),g.remove(),g.style.display=A,g.classList.toggle("hidden",l)}this.rotation%180===this.parentRotation%180?(this.width=C.width/I,this.height=C.height/g):(this.width=C.height/I,this.height=C.width/g),this.fixAndSetPosition()},KV=new WeakSet,zV=function(I){return(I.nodeType===Node.TEXT_NODE?I.nodeValue:I.innerText).replaceAll(JV,"")},TV=function(){if(this.editorDiv.replaceChildren(),W(this,DV))for(const I of W(this,DV).split("\n")){const g=document.createElement("div");g.append(I?document.createTextNode(I):document.createElement("br")),this.editorDiv.append(g)}},LV=function(){return W(this,DV).replaceAll(" "," ")},EV=function(I){return I.replaceAll(" "," ")},jV=function(I){const{value:g,fontSize:C,color:A,pageIndex:l}=this._initialData;return this._hasBeenMoved||I.value!==g||I.fontSize!==C||I.color.some(((I,g)=>I!==A[g]))||I.pageIndex!==l},V(xV,KV),c(xV,"_freeTextDefaultContent",""),c(xV,"_internalPadding",0),c(xV,"_defaultColor",null),c(xV,"_defaultFontSize",10),c(xV,"_type","freetext"),c(xV,"_editorType",jC.FREETEXT);let OV=xV;class rV{toSVGPath(){ZA("Abstract method `toSVGPath` must be implemented.")}get box(){ZA("Abstract getter `box` must be implemented.")}serialize(I,g){ZA("Abstract method `serialize` must be implemented.")}static _rescale(I,g,C,A,l,Z){Z||(Z=new Float32Array(I.length));for(let d=0,B=I.length;d<B;d+=2)Z[d]=g+I[d]*A,Z[d+1]=C+I[d+1]*l;return Z}static _rescaleAndSwap(I,g,C,A,l,Z){Z||(Z=new Float32Array(I.length));for(let d=0,B=I.length;d<B;d+=2)Z[d]=g+I[d+1]*A,Z[d+1]=C+I[d]*l;return Z}static _translate(I,g,C,A){A||(A=new Float32Array(I.length));for(let l=0,Z=I.length;l<Z;l+=2)A[l]=g+I[l],A[l+1]=C+I[l+1];return A}static svgRound(I){return Math.round(1e4*I)}static _normalizePoint(I,g,C,A,l){switch(l){case 90:return[1-g/C,I/A];case 180:return[1-I/C,1-g/A];case 270:return[g/C,1-I/A];default:return[I/C,g/A]}}static _normalizePagePoint(I,g,C){switch(C){case 90:return[1-g,I];case 180:return[1-I,1-g];case 270:return[g,1-I];default:return[I,g]}}static createBezierPoints(I,g,C,A,l,Z){return[(I+5*C)/6,(g+5*A)/6,(5*C+l)/6,(5*A+Z)/6,(C+l)/2,(A+Z)/2]}}var vV,PV,fV,_V,qV,$V,IR,gR,CR,AR,lR,ZR,dR,BR,FR,iR,cR,GR,WR,VR,RR,UR,bR,sR;c(rV,"PRECISION",1e-4);const QR=class I{constructor({x:g,y:C},A,l,Z,d,B=0){V(this,cR),V(this,vV),V(this,PV,[]),V(this,fV),V(this,_V),V(this,qV,[]),V(this,$V,new Float32Array(18)),V(this,IR),V(this,gR),V(this,CR),V(this,AR),V(this,lR),V(this,ZR),V(this,dR,[]),R(this,vV,A),R(this,ZR,Z*l),R(this,_V,d),W(this,$V).set([NaN,NaN,NaN,NaN,g,C],6),R(this,fV,B),R(this,AR,W(I,BR)*l),R(this,CR,W(I,iR)*l),R(this,lR,l),W(this,dR).push(g,C)}isEmpty(){return isNaN(W(this,$V)[8])}add({x:I,y:g}){var C;R(this,IR,I),R(this,gR,g);const[A,l,Z,d]=W(this,vV);let[B,F,i,c]=W(this,$V).subarray(8,12);const G=I-i,V=g-c,U=Math.hypot(G,V);if(U<W(this,CR))return!1;const b=U-W(this,AR),s=b/U,Q=s*G,m=s*V;let N=B,h=F;B=i,F=c,i+=Q,c+=m,null==(C=W(this,dR))||C.push(I,g);const n=-m/b,a=Q/b,o=n*W(this,ZR),w=a*W(this,ZR);return W(this,$V).set(W(this,$V).subarray(2,8),0),W(this,$V).set([i+o,c+w],4),W(this,$V).set(W(this,$V).subarray(14,18),12),W(this,$V).set([i-o,c-w],16),isNaN(W(this,$V)[6])?(0===W(this,qV).length&&(W(this,$V).set([B+o,F+w],2),W(this,qV).push(NaN,NaN,NaN,NaN,(B+o-A)/Z,(F+w-l)/d),W(this,$V).set([B-o,F-w],14),W(this,PV).push(NaN,NaN,NaN,NaN,(B-o-A)/Z,(F-w-l)/d)),W(this,$V).set([N,h,B,F,i,c],6),!this.isEmpty()):(W(this,$V).set([N,h,B,F,i,c],6),Math.abs(Math.atan2(h-F,N-B)-Math.atan2(m,Q))<Math.PI/2?([B,F,i,c]=W(this,$V).subarray(2,6),W(this,qV).push(NaN,NaN,NaN,NaN,((B+i)/2-A)/Z,((F+c)/2-l)/d),[B,F,N,h]=W(this,$V).subarray(14,18),W(this,PV).push(NaN,NaN,NaN,NaN,((N+B)/2-A)/Z,((h+F)/2-l)/d),!0):([N,h,B,F,i,c]=W(this,$V).subarray(0,6),W(this,qV).push(((N+5*B)/6-A)/Z,((h+5*F)/6-l)/d,((5*B+i)/6-A)/Z,((5*F+c)/6-l)/d,((B+i)/2-A)/Z,((F+c)/2-l)/d),[i,c,B,F,N,h]=W(this,$V).subarray(12,18),W(this,PV).push(((N+5*B)/6-A)/Z,((h+5*F)/6-l)/d,((5*B+i)/6-A)/Z,((5*F+c)/6-l)/d,((B+i)/2-A)/Z,((F+c)/2-l)/d),!0))}toSVGPath(){if(this.isEmpty())return"";const I=W(this,qV),g=W(this,PV);if(isNaN(W(this,$V)[6])&&!this.isEmpty())return U(this,cR,WR).call(this);const C=[];C.push(`M${I[4]} ${I[5]}`);for(let A=6;A<I.length;A+=6)isNaN(I[A])?C.push(`L${I[A+4]} ${I[A+5]}`):C.push(`C${I[A]} ${I[A+1]} ${I[A+2]} ${I[A+3]} ${I[A+4]} ${I[A+5]}`);U(this,cR,RR).call(this,C);for(let A=g.length-6;A>=6;A-=6)isNaN(g[A])?C.push(`L${g[A+4]} ${g[A+5]}`):C.push(`C${g[A]} ${g[A+1]} ${g[A+2]} ${g[A+3]} ${g[A+4]} ${g[A+5]}`);return U(this,cR,VR).call(this,C),C.join(" ")}newFreeDrawOutline(I,g,C,A,l,Z){return new dU(I,g,C,A,l,Z)}getOutlines(){var I;const g=W(this,qV),C=W(this,PV),A=W(this,$V),[l,Z,d,B]=W(this,vV),F=new Float32Array(((null==(I=W(this,dR))?void 0:I.length)??0)+2);for(let G=0,V=F.length-2;G<V;G+=2)F[G]=(W(this,dR)[G]-l)/d,F[G+1]=(W(this,dR)[G+1]-Z)/B;if(F[F.length-2]=(W(this,IR)-l)/d,F[F.length-1]=(W(this,gR)-Z)/B,isNaN(A[6])&&!this.isEmpty())return U(this,cR,UR).call(this,F);const i=new Float32Array(W(this,qV).length+24+W(this,PV).length);let c=g.length;for(let G=0;G<c;G+=2)isNaN(g[G])?i[G]=i[G+1]=NaN:(i[G]=g[G],i[G+1]=g[G+1]);c=U(this,cR,sR).call(this,i,c);for(let G=C.length-6;G>=6;G-=6)for(let I=0;I<6;I+=2)isNaN(C[G+I])?(i[c]=i[c+1]=NaN,c+=2):(i[c]=C[G+I],i[c+1]=C[G+I+1],c+=2);return U(this,cR,bR).call(this,i,c),this.newFreeDrawOutline(i,F,W(this,vV),W(this,lR),W(this,fV),W(this,_V))}};vV=new WeakMap,PV=new WeakMap,fV=new WeakMap,_V=new WeakMap,qV=new WeakMap,$V=new WeakMap,IR=new WeakMap,gR=new WeakMap,CR=new WeakMap,AR=new WeakMap,lR=new WeakMap,ZR=new WeakMap,dR=new WeakMap,BR=new WeakMap,FR=new WeakMap,iR=new WeakMap,cR=new WeakSet,GR=function(){const I=W(this,$V).subarray(4,6),g=W(this,$V).subarray(16,18),[C,A,l,Z]=W(this,vV);return[(W(this,IR)+(I[0]-g[0])/2-C)/l,(W(this,gR)+(I[1]-g[1])/2-A)/Z,(W(this,IR)+(g[0]-I[0])/2-C)/l,(W(this,gR)+(g[1]-I[1])/2-A)/Z]},WR=function(){const[I,g,C,A]=W(this,vV),[l,Z,d,B]=U(this,cR,GR).call(this);return`M${(W(this,$V)[2]-I)/C} ${(W(this,$V)[3]-g)/A} L${(W(this,$V)[4]-I)/C} ${(W(this,$V)[5]-g)/A} L${l} ${Z} L${d} ${B} L${(W(this,$V)[16]-I)/C} ${(W(this,$V)[17]-g)/A} L${(W(this,$V)[14]-I)/C} ${(W(this,$V)[15]-g)/A} Z`},VR=function(I){const g=W(this,PV);I.push(`L${g[4]} ${g[5]} Z`)},RR=function(I){const[g,C,A,l]=W(this,vV),Z=W(this,$V).subarray(4,6),d=W(this,$V).subarray(16,18),[B,F,i,c]=U(this,cR,GR).call(this);I.push(`L${(Z[0]-g)/A} ${(Z[1]-C)/l} L${B} ${F} L${i} ${c} L${(d[0]-g)/A} ${(d[1]-C)/l}`)},UR=function(I){const g=W(this,$V),[C,A,l,Z]=W(this,vV),[d,B,F,i]=U(this,cR,GR).call(this),c=new Float32Array(36);return c.set([NaN,NaN,NaN,NaN,(g[2]-C)/l,(g[3]-A)/Z,NaN,NaN,NaN,NaN,(g[4]-C)/l,(g[5]-A)/Z,NaN,NaN,NaN,NaN,d,B,NaN,NaN,NaN,NaN,F,i,NaN,NaN,NaN,NaN,(g[16]-C)/l,(g[17]-A)/Z,NaN,NaN,NaN,NaN,(g[14]-C)/l,(g[15]-A)/Z],0),this.newFreeDrawOutline(c,I,W(this,vV),W(this,lR),W(this,fV),W(this,_V))},bR=function(I,g){const C=W(this,PV);return I.set([NaN,NaN,NaN,NaN,C[4],C[5]],g),g+6},sR=function(I,g){const C=W(this,$V).subarray(4,6),A=W(this,$V).subarray(16,18),[l,Z,d,B]=W(this,vV),[F,i,c,G]=U(this,cR,GR).call(this);return I.set([NaN,NaN,NaN,NaN,(C[0]-l)/d,(C[1]-Z)/B,NaN,NaN,NaN,NaN,F,i,NaN,NaN,NaN,NaN,c,G,NaN,NaN,NaN,NaN,(A[0]-l)/d,(A[1]-Z)/B],g),g+24},V(QR,BR,8),V(QR,FR,2),V(QR,iR,W(QR,BR)+W(QR,FR));let mR=QR;var NR,hR,nR,aR,oR,wR,YR,SR,JR,MR,DR,tR,XR,HR,eR,yR,uR,pR,kR,KR,zR,TR,LR,ER,jR,xR,OR,rR,vR,PR,fR,_R,qR,$R,IU,gU,CU,AU,lU,ZU;class dU extends rV{constructor(I,g,C,A,l,Z){super(),V(this,SR),V(this,NR),V(this,hR,new Float32Array(4)),V(this,nR),V(this,aR),V(this,oR),V(this,wR),V(this,YR),R(this,YR,I),R(this,oR,g),R(this,NR,C),R(this,wR,A),R(this,nR,l),R(this,aR,Z),this.lastPoint=[NaN,NaN],U(this,SR,JR).call(this,Z);const[d,B,F,i]=W(this,hR);for(let c=0,G=I.length;c<G;c+=2)I[c]=(I[c]-d)/F,I[c+1]=(I[c+1]-B)/i;for(let c=0,G=g.length;c<G;c+=2)g[c]=(g[c]-d)/F,g[c+1]=(g[c+1]-B)/i}toSVGPath(){const I=[`M${W(this,YR)[4]} ${W(this,YR)[5]}`];for(let g=6,C=W(this,YR).length;g<C;g+=6)isNaN(W(this,YR)[g])?I.push(`L${W(this,YR)[g+4]} ${W(this,YR)[g+5]}`):I.push(`C${W(this,YR)[g]} ${W(this,YR)[g+1]} ${W(this,YR)[g+2]} ${W(this,YR)[g+3]} ${W(this,YR)[g+4]} ${W(this,YR)[g+5]}`);return I.push("Z"),I.join(" ")}serialize([I,g,C,A],l){const Z=C-I,d=A-g;let B,F;switch(l){case 0:B=rV._rescale(W(this,YR),I,A,Z,-d),F=rV._rescale(W(this,oR),I,A,Z,-d);break;case 90:B=rV._rescaleAndSwap(W(this,YR),I,g,Z,d),F=rV._rescaleAndSwap(W(this,oR),I,g,Z,d);break;case 180:B=rV._rescale(W(this,YR),C,g,-Z,d),F=rV._rescale(W(this,oR),C,g,-Z,d);break;case 270:B=rV._rescaleAndSwap(W(this,YR),C,A,-Z,-d),F=rV._rescaleAndSwap(W(this,oR),C,A,-Z,-d);break}return{outline:Array.from(B),points:[Array.from(F)]}}get box(){return W(this,hR)}newOutliner(I,g,C,A,l,Z=0){return new mR(I,g,C,A,l,Z)}getNewOutline(I,g){const[C,A,l,Z]=W(this,hR),[d,B,F,i]=W(this,NR),c=l*F,G=Z*i,V=C*F+d,R=A*i+B,U=this.newOutliner({x:W(this,oR)[0]*c+V,y:W(this,oR)[1]*G+R},W(this,NR),W(this,wR),I,W(this,aR),g??W(this,nR));for(let b=2;b<W(this,oR).length;b+=2)U.add({x:W(this,oR)[b]*c+V,y:W(this,oR)[b+1]*G+R});return U.getOutlines()}}NR=new WeakMap,hR=new WeakMap,nR=new WeakMap,aR=new WeakMap,oR=new WeakMap,wR=new WeakMap,YR=new WeakMap,SR=new WeakSet,JR=function(I){const g=W(this,YR);let C=g[4],A=g[5],l=C,Z=A,d=C,B=A,F=C,i=A;const c=I?Math.max:Math.min;for(let W=6,V=g.length;W<V;W+=6){if(isNaN(g[W]))l=Math.min(l,g[W+4]),Z=Math.min(Z,g[W+5]),d=Math.max(d,g[W+4]),B=Math.max(B,g[W+5]),i<g[W+5]?(F=g[W+4],i=g[W+5]):i===g[W+5]&&(F=c(F,g[W+4]));else{const I=MA.bezierBoundingBox(C,A,...g.slice(W,W+6));l=Math.min(l,I[0]),Z=Math.min(Z,I[1]),d=Math.max(d,I[2]),B=Math.max(B,I[3]),i<I[3]?(F=I[2],i=I[3]):i===I[3]&&(F=c(F,I[2]))}C=g[W+4],A=g[W+5]}const G=W(this,hR);G[0]=l-W(this,nR),G[1]=Z-W(this,nR),G[2]=d-l+2*W(this,nR),G[3]=B-Z+2*W(this,nR),this.lastPoint=[F,i]};class BU{constructor(I,g=0,C=0,A=!0){V(this,HR),V(this,MR),V(this,DR),V(this,tR,[]),V(this,XR,[]);let l=1/0,Z=-1/0,d=1/0,B=-1/0;const F=10**-4;for(const{x:V,y:R,width:Q,height:m}of I){const I=Math.floor((V-g)/F)*F,C=Math.ceil((V+Q+g)/F)*F,A=Math.floor((R-g)/F)*F,i=Math.ceil((R+m+g)/F)*F,c=[I,A,i,!0],G=[C,A,i,!1];W(this,tR).push(c,G),l=Math.min(l,I),Z=Math.max(Z,C),d=Math.min(d,A),B=Math.max(B,i)}const i=Z-l+2*C,c=B-d+2*C,G=l-C,U=d-C,b=W(this,tR).at(A?-1:-2),s=[b[0],b[2]];for(const V of W(this,tR)){const[I,g,C]=V;V[0]=(I-G)/i,V[1]=(g-U)/c,V[2]=(C-U)/c}R(this,MR,new Float32Array([G,U,i,c])),R(this,DR,s)}getOutlines(){W(this,tR).sort(((I,g)=>I[0]-g[0]||I[1]-g[1]||I[2]-g[2]));const I=[];for(const g of W(this,tR))g[3]?(I.push(...U(this,HR,kR).call(this,g)),U(this,HR,uR).call(this,g)):(U(this,HR,pR).call(this,g),I.push(...U(this,HR,kR).call(this,g)));return U(this,HR,eR).call(this,I)}}MR=new WeakMap,DR=new WeakMap,tR=new WeakMap,XR=new WeakMap,HR=new WeakSet,eR=function(I){const g=[],C=new Set;for(const Z of I){const[I,C,A]=Z;g.push([I,C,Z],[I,A,Z])}g.sort(((I,g)=>I[1]-g[1]||I[0]-g[0]));for(let Z=0,d=g.length;Z<d;Z+=2){const I=g[Z][2],A=g[Z+1][2];I.push(A),A.push(I),C.add(I),C.add(A)}const A=[];let l;for(;C.size>0;){const I=C.values().next().value;let[g,Z,d,B,F]=I;C.delete(I);let i=g,c=Z;for(l=[g,d],A.push(l);;){let I;if(C.has(B))I=B;else{if(!C.has(F))break;I=F}C.delete(I),[g,Z,d,B,F]=I,i!==g&&(l.push(i,c,g,c===Z?Z:d),i=g),c=c===Z?d:Z}l.push(i,c)}return new FU(A,W(this,MR),W(this,DR))},yR=function(I){const g=W(this,XR);let C=0,A=g.length-1;for(;C<=A;){const l=C+A>>1,Z=g[l][0];if(Z===I)return l;Z<I?C=l+1:A=l-1}return A+1},uR=function([,I,g]){const C=U(this,HR,yR).call(this,I);W(this,XR).splice(C,0,[I,g])},pR=function([,I,g]){const C=U(this,HR,yR).call(this,I);for(let A=C;A<W(this,XR).length;A++){const[C,l]=W(this,XR)[A];if(C!==I)break;if(C===I&&l===g)return void W(this,XR).splice(A,1)}for(let A=C-1;A>=0;A--){const[C,l]=W(this,XR)[A];if(C!==I)break;if(C===I&&l===g)return void W(this,XR).splice(A,1)}},kR=function(I){const[g,C,A]=I,l=[[g,C,A]],Z=U(this,HR,yR).call(this,A);for(let d=0;d<Z;d++){const[I,C]=W(this,XR)[d];for(let A=0,Z=l.length;A<Z;A++){const[,d,B]=l[A];if(!(C<=d||B<=I)){if(d>=I){if(B>C)l[A][1]=C;else{if(1===Z)return[];l.splice(A,1),A--,Z--}continue}l[A][2]=I,B>C&&l.push([g,C,B])}}}return l};class FU extends rV{constructor(I,g,C){super(),V(this,KR),V(this,zR),R(this,zR,I),R(this,KR,g),this.lastPoint=C}toSVGPath(){const I=[];for(const g of W(this,zR)){let[C,A]=g;I.push(`M${C} ${A}`);for(let l=2;l<g.length;l+=2){const Z=g[l],d=g[l+1];Z===C?(I.push(`V${d}`),A=d):d===A&&(I.push(`H${Z}`),C=Z)}I.push("Z")}return I.join(" ")}serialize([I,g,C,A],l){const Z=[],d=C-I,B=A-g;for(const F of W(this,zR)){const g=new Array(F.length);for(let C=0;C<F.length;C+=2)g[C]=I+F[C]*d,g[C+1]=A-F[C+1]*B;Z.push(g)}return Z}get box(){return W(this,KR)}get classNamesForOutlining(){return["highlightOutline"]}}KR=new WeakMap,zR=new WeakMap;class iU extends mR{newFreeDrawOutline(I,g,C,A,l,Z){return new cU(I,g,C,A,l,Z)}}class cU extends dU{newOutliner(I,g,C,A,l,Z=0){return new iU(I,g,C,A,l,Z)}}const GU=class I{constructor({editor:g=null,uiManager:C=null}){var A;V(this,$R),V(this,TR,null),V(this,LR,null),V(this,ER),V(this,jR,null),V(this,xR,!1),V(this,OR,!1),V(this,rR,null),V(this,vR),V(this,PR,null),V(this,fR,null),V(this,_R),g?(R(this,OR,!1),R(this,_R,xC.HIGHLIGHT_COLOR),R(this,rR,g)):(R(this,OR,!0),R(this,_R,xC.HIGHLIGHT_DEFAULT_COLOR)),R(this,fR,(null==g?void 0:g._uiManager)||C),R(this,vR,W(this,fR)._eventBus),R(this,ER,(null==g?void 0:g.color)||(null==(A=W(this,fR))?void 0:A.highlightColors.values().next().value)||"#FFFF98"),W(I,qR)||R(I,qR,Object.freeze({blue:"pdfjs-editor-colorpicker-blue",green:"pdfjs-editor-colorpicker-green",pink:"pdfjs-editor-colorpicker-pink",red:"pdfjs-editor-colorpicker-red",yellow:"pdfjs-editor-colorpicker-yellow"}))}static get _keyboardManager(){return iA(this,"_keyboardManager",new Pl([[["Escape","mac+Escape"],I.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],I.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],I.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],I.prototype._moveToPrevious],[["Home","mac+Home"],I.prototype._moveToBeginning],[["End","mac+End"],I.prototype._moveToEnd]]))}renderButton(){const I=R(this,TR,document.createElement("button"));I.className="colorPicker",I.tabIndex="0",I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),I.setAttribute("aria-haspopup",!0);const g=W(this,fR)._signal;I.addEventListener("click",U(this,$R,AU).bind(this),{signal:g}),I.addEventListener("keydown",U(this,$R,CU).bind(this),{signal:g});const C=R(this,LR,document.createElement("span"));return C.className="swatch",C.setAttribute("aria-hidden",!0),C.style.backgroundColor=W(this,ER),I.append(C),I}renderMainDropdown(){const I=R(this,jR,U(this,$R,IU).call(this));return I.setAttribute("aria-orientation","horizontal"),I.setAttribute("aria-labelledby","highlightColorPickerLabel"),I}_colorSelectFromKeyboard(I){if(I.target===W(this,TR))return void U(this,$R,AU).call(this,I);const g=I.target.getAttribute("data-color");g&&U(this,$R,gU).call(this,g,I)}_moveToNext(I){var g,C;W(this,$R,ZU)?I.target!==W(this,TR)?null==(C=I.target.nextSibling)||C.focus():null==(g=W(this,jR).firstChild)||g.focus():U(this,$R,AU).call(this,I)}_moveToPrevious(I){var g,C;I.target!==(null==(g=W(this,jR))?void 0:g.firstChild)&&I.target!==W(this,TR)?(W(this,$R,ZU)||U(this,$R,AU).call(this,I),null==(C=I.target.previousSibling)||C.focus()):W(this,$R,ZU)&&this._hideDropdownFromKeyboard()}_moveToBeginning(I){var g;W(this,$R,ZU)?null==(g=W(this,jR).firstChild)||g.focus():U(this,$R,AU).call(this,I)}_moveToEnd(I){var g;W(this,$R,ZU)?null==(g=W(this,jR).lastChild)||g.focus():U(this,$R,AU).call(this,I)}hideDropdown(){var I,g;null==(I=W(this,jR))||I.classList.add("hidden"),null==(g=W(this,PR))||g.abort(),R(this,PR,null)}_hideDropdownFromKeyboard(){var I;if(!W(this,OR)){if(!W(this,$R,ZU))return void(null==(I=W(this,rR))||I.unselect());this.hideDropdown(),W(this,TR).focus({preventScroll:!0,focusVisible:W(this,xR)})}}updateColor(I){if(W(this,LR)&&(W(this,LR).style.backgroundColor=I),!W(this,jR))return;const g=W(this,fR).highlightColors.values();for(const C of W(this,jR).children)C.setAttribute("aria-selected",g.next().value===I)}destroy(){var I,g;null==(I=W(this,TR))||I.remove(),R(this,TR,null),R(this,LR,null),null==(g=W(this,jR))||g.remove(),R(this,jR,null)}};TR=new WeakMap,LR=new WeakMap,ER=new WeakMap,jR=new WeakMap,xR=new WeakMap,OR=new WeakMap,rR=new WeakMap,vR=new WeakMap,PR=new WeakMap,fR=new WeakMap,_R=new WeakMap,qR=new WeakMap,$R=new WeakSet,IU=function(){const I=document.createElement("div"),g=W(this,fR)._signal;I.addEventListener("contextmenu",fA,{signal:g}),I.className="dropdown",I.role="listbox",I.setAttribute("aria-multiselectable",!1),I.setAttribute("aria-orientation","vertical"),I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown");for(const[C,A]of W(this,fR).highlightColors){const l=document.createElement("button");l.tabIndex="0",l.role="option",l.setAttribute("data-color",A),l.title=C,l.setAttribute("data-l10n-id",W(GU,qR)[C]);const Z=document.createElement("span");l.append(Z),Z.className="swatch",Z.style.backgroundColor=A,l.setAttribute("aria-selected",A===W(this,ER)),l.addEventListener("click",U(this,$R,gU).bind(this,A),{signal:g}),I.append(l)}return I.addEventListener("keydown",U(this,$R,CU).bind(this),{signal:g}),I},gU=function(I,g){g.stopPropagation(),W(this,vR).dispatch("switchannotationeditorparams",{source:this,type:W(this,_R),value:I})},CU=function(I){GU._keyboardManager.exec(this,I)},AU=function(I){if(W(this,$R,ZU))return void this.hideDropdown();if(R(this,xR,0===I.detail),W(this,PR)||(R(this,PR,new AbortController),window.addEventListener("pointerdown",U(this,$R,lU).bind(this),{signal:W(this,fR).combinedSignal(W(this,PR))})),W(this,jR))return void W(this,jR).classList.remove("hidden");const g=R(this,jR,U(this,$R,IU).call(this));W(this,TR).append(g)},lU=function(I){var g;null!=(g=W(this,jR))&&g.contains(I.target)||this.hideDropdown()},ZU=function(){return W(this,jR)&&!W(this,jR).classList.contains("hidden")},V(GU,qR,null);let WU=GU;var VU,RU,UU,bU,sU,QU,mU,NU,hU,nU,aU,oU,wU,YU,SU,JU,MU,DU,tU,XU,HU,eU,yU,uU,pU,kU,KU,zU,TU,LU,EU,jU,xU,OU,rU,vU;const PU=class I extends bB{constructor(g){super({...g,name:"highlightEditor"}),V(this,tU),V(this,VU,null),V(this,RU,0),V(this,UU),V(this,bU,null),V(this,sU,null),V(this,QU,null),V(this,mU,null),V(this,NU,0),V(this,hU,null),V(this,nU,null),V(this,aU,null),V(this,oU,!1),V(this,wU,null),V(this,YU),V(this,SU,null),V(this,JU,""),V(this,MU),V(this,DU,""),this.color=g.color||I._defaultColor,R(this,MU,g.thickness||I._defaultThickness),R(this,YU,g.opacity||I._defaultOpacity),R(this,UU,g.boxes||null),R(this,DU,g.methodOfCreation||""),R(this,JU,g.text||""),this._isDraggable=!1,g.highlightId>-1?(R(this,oU,!0),U(this,tU,HU).call(this,g),U(this,tU,kU).call(this)):W(this,UU)&&(R(this,VU,g.anchorNode),R(this,RU,g.anchorOffset),R(this,mU,g.focusNode),R(this,NU,g.focusOffset),U(this,tU,XU).call(this),U(this,tU,kU).call(this),this.rotate(this.rotation))}static get _keyboardManager(){const g=I.prototype;return iA(this,"_keyboardManager",new Pl([[["ArrowLeft","mac+ArrowLeft"],g._moveCaret,{args:[0]}],[["ArrowRight","mac+ArrowRight"],g._moveCaret,{args:[1]}],[["ArrowUp","mac+ArrowUp"],g._moveCaret,{args:[2]}],[["ArrowDown","mac+ArrowDown"],g._moveCaret,{args:[3]}]]))}get telemetryInitialData(){return{action:"added",type:W(this,oU)?"free_highlight":"highlight",color:this._uiManager.highlightColorNames.get(this.color),thickness:W(this,MU),methodOfCreation:W(this,DU)}}get telemetryFinalData(){return{type:"highlight",color:this._uiManager.highlightColorNames.get(this.color)}}static computeTelemetryFinalData(I){return{numberOfColors:I.get("color").size}}static initialize(g,C){var A;bB.initialize(g,C),I._defaultColor||(I._defaultColor=(null==(A=C.highlightColors)?void 0:A.values().next().value)||"#fff066")}static updateDefaultParams(g,C){switch(g){case xC.HIGHLIGHT_DEFAULT_COLOR:I._defaultColor=C;break;case xC.HIGHLIGHT_THICKNESS:I._defaultThickness=C;break}}translateInPage(I,g){}get toolbarPosition(){return W(this,wU)}updateParams(I,g){switch(I){case xC.HIGHLIGHT_COLOR:U(this,tU,eU).call(this,g);break;case xC.HIGHLIGHT_THICKNESS:U(this,tU,yU).call(this,g);break}}static get defaultPropertiesToUpdate(){return[[xC.HIGHLIGHT_DEFAULT_COLOR,I._defaultColor],[xC.HIGHLIGHT_THICKNESS,I._defaultThickness]]}get propertiesToUpdate(){return[[xC.HIGHLIGHT_COLOR,this.color||I._defaultColor],[xC.HIGHLIGHT_THICKNESS,W(this,MU)||I._defaultThickness],[xC.HIGHLIGHT_FREE,W(this,oU)]]}async addEditToolbar(){const I=await super.addEditToolbar();return I?(this._uiManager.highlightColors&&(R(this,sU,new WU({editor:this})),I.addColorPicker(W(this,sU))),I):null}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(U(this,tU,EU).call(this))}getBaseTranslation(){return[0,0]}getRect(I,g){return super.getRect(I,g,U(this,tU,EU).call(this))}onceAdded(){this.annotationElementId||this.parent.addUndoableEditor(this),this.div.focus()}remove(){U(this,tU,pU).call(this),this._reportTelemetry({action:"deleted"}),super.remove()}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(U(this,tU,kU).call(this),this.isAttachedToDOM||this.parent.add(this)))}setParent(I){var g;let C=!1;this.parent&&!I?U(this,tU,pU).call(this):I&&(U(this,tU,kU).call(this,I),C=!this.parent&&(null==(g=this.div)?void 0:g.classList.contains("selectedEditor"))),super.setParent(I),this.show(this._isVisible),C&&this.select()}rotate(g){var C,A,l;const{drawLayer:Z}=this.parent;let d;W(this,oU)?(g=(g-this.rotation+360)%360,d=U(C=I,KU,zU).call(C,W(this,nU).box,g)):d=U(A=I,KU,zU).call(A,[this.x,this.y,this.width,this.height],g),Z.updateProperties(W(this,aU),{bbox:d,root:{"data-main-rotation":g}}),Z.updateProperties(W(this,SU),{bbox:U(l=I,KU,zU).call(l,W(this,QU).box,g),root:{"data-main-rotation":g}})}render(){if(this.div)return this.div;const I=super.render();W(this,JU)&&(I.setAttribute("aria-label",W(this,JU)),I.setAttribute("role","mark")),W(this,oU)?I.classList.add("free"):this.div.addEventListener("keydown",U(this,tU,TU).bind(this),{signal:this._uiManager._signal});const g=R(this,hU,document.createElement("div"));I.append(g),g.setAttribute("aria-hidden","true"),g.className="internal",g.style.clipPath=W(this,bU);const[C,A]=this.parentDimensions;return this.setDims(this.width*C,this.height*A),kl(this,W(this,hU),["pointerover","pointerleave"]),this.enableEditing(),I}pointerover(){var I;this.isSelected||null==(I=this.parent)||I.drawLayer.updateProperties(W(this,SU),{rootClass:{hovered:!0}})}pointerleave(){var I;this.isSelected||null==(I=this.parent)||I.drawLayer.updateProperties(W(this,SU),{rootClass:{hovered:!1}})}_moveCaret(I){switch(this.parent.unselect(this),I){case 0:case 2:U(this,tU,LU).call(this,!0);break;case 1:case 3:U(this,tU,LU).call(this,!1);break}}select(){var I;super.select(),W(this,SU)&&(null==(I=this.parent)||I.drawLayer.updateProperties(W(this,SU),{rootClass:{hovered:!1,selected:!0}}))}unselect(){var I;super.unselect(),W(this,SU)&&(null==(I=this.parent)||I.drawLayer.updateProperties(W(this,SU),{rootClass:{selected:!1}}),W(this,oU)||U(this,tU,LU).call(this,!1))}get _mustFixPosition(){return!W(this,oU)}show(I=this._isVisible){super.show(I),this.parent&&(this.parent.drawLayer.updateProperties(W(this,aU),{rootClass:{hidden:!I}}),this.parent.drawLayer.updateProperties(W(this,SU),{rootClass:{hidden:!I}}))}static startHighlighting(I,g,{target:C,x:A,y:l}){const{x:Z,y:d,width:B,height:F}=C.getBoundingClientRect(),i=new AbortController,c=I.combinedSignal(i),G=g=>{i.abort(),U(this,KU,rU).call(this,I,g)};window.addEventListener("blur",G,{signal:c}),window.addEventListener("pointerup",G,{signal:c}),window.addEventListener("pointerdown",_A,{capture:!0,passive:!1,signal:c}),window.addEventListener("contextmenu",fA,{signal:c}),C.addEventListener("pointermove",U(this,KU,OU).bind(this,I),{signal:c}),this._freeHighlight=new iU({x:A,y:l},[Z,d,B,F],I.scale,this._defaultThickness/2,g,.001),({id:this._freeHighlightId,clipPathId:this._freeHighlightClipId}=I.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:this._defaultColor,"fill-opacity":this._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:this._freeHighlight.toSVGPath()}},!0,!0))}static async deserialize(I,g,C){var A,l,Z,d;let B=null;if(I instanceof hV){const{data:{quadPoints:g,rect:C,rotation:A,id:l,color:Z,opacity:d,popupRef:F},parent:{page:{pageNumber:i}}}=I;B=I={annotationType:jC.HIGHLIGHT,color:Array.from(Z),opacity:d,quadPoints:g,boxes:null,pageIndex:i-1,rect:C.slice(0),rotation:A,id:l,deleted:!1,popupRef:F}}else if(I instanceof NV){const{data:{inkLists:g,rect:C,rotation:A,id:l,color:Z,borderStyle:{rawWidth:d},popupRef:F},parent:{page:{pageNumber:i}}}=I;B=I={annotationType:jC.HIGHLIGHT,color:Array.from(Z),thickness:d,inkLists:g,boxes:null,pageIndex:i-1,rect:C.slice(0),rotation:A,id:l,deleted:!1,popupRef:F}}const{color:F,quadPoints:i,inkLists:c,opacity:G}=I,V=await super.deserialize(I,g,C);V.color=MA.makeHexColor(...F),R(V,YU,G||1),c&&R(V,MU,I.thickness),V.annotationElementId=I.id||null,V._initialData=B;const[b,s]=V.pageDimensions,[Q,m]=V.pageTranslation;if(i){const I=R(V,UU,[]);for(let g=0;g<i.length;g+=8)I.push({x:(i[g]-Q)/b,y:1-(i[g+1]-m)/s,width:(i[g+2]-i[g])/b,height:(i[g+1]-i[g+5])/s});U(A=V,tU,XU).call(A),U(l=V,tU,kU).call(l),V.rotate(V.rotation)}else if(c){R(V,oU,!0);const I=c[0],C={x:I[0]-Q,y:s-(I[1]-m)},A=new iU(C,[0,0,b,s],1,W(V,MU)/2,!0,.001);for(let g=0,Z=I.length;g<Z;g+=2)C.x=I[g]-Q,C.y=s-(I[g+1]-m),A.add(C);const{id:l,clipPathId:B}=g.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:V.color,"fill-opacity":V._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:A.toSVGPath()}},!0,!0);U(Z=V,tU,HU).call(Z,{highlightOutlines:A.getOutlines(),highlightId:l,clipPathId:B}),U(d=V,tU,kU).call(d)}return V}serialize(I=!1){if(this.isEmpty()||I)return null;if(this.deleted)return this.serializeDeleted();const g=this.getRect(0,0),C=bB._colorManager.convert(this.color),A={annotationType:jC.HIGHLIGHT,color:C,opacity:W(this,YU),thickness:W(this,MU),quadPoints:U(this,tU,jU).call(this),outlines:U(this,tU,xU).call(this,g),pageIndex:this.pageIndex,rect:g,rotation:U(this,tU,EU).call(this),structTreeParentId:this._structTreeParentId};return this.annotationElementId&&!U(this,tU,vU).call(this,A)?null:(A.id=this.annotationElementId,A)}renderAnnotationElement(I){return I.updateEdited({rect:this.getRect(0,0)}),null}static canCreateNewEmptyEditor(){return!1}};VU=new WeakMap,RU=new WeakMap,UU=new WeakMap,bU=new WeakMap,sU=new WeakMap,QU=new WeakMap,mU=new WeakMap,NU=new WeakMap,hU=new WeakMap,nU=new WeakMap,aU=new WeakMap,oU=new WeakMap,wU=new WeakMap,YU=new WeakMap,SU=new WeakMap,JU=new WeakMap,MU=new WeakMap,DU=new WeakMap,tU=new WeakSet,XU=function(){const I=new BU(W(this,UU),.001);R(this,nU,I.getOutlines()),[this.x,this.y,this.width,this.height]=W(this,nU).box;const g=new BU(W(this,UU),.0025,.001,"ltr"===this._uiManager.direction);R(this,QU,g.getOutlines());const{lastPoint:C}=W(this,QU);R(this,wU,[(C[0]-this.x)/this.width,(C[1]-this.y)/this.height])},HU=function({highlightOutlines:I,highlightId:g,clipPathId:C}){var A,l;if(R(this,nU,I),R(this,QU,I.getNewOutline(W(this,MU)/2+1.5,.0025)),g>=0)R(this,aU,g),R(this,bU,C),this.parent.drawLayer.finalizeDraw(g,{bbox:I.box,path:{d:I.toSVGPath()}}),R(this,SU,this.parent.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:!0},bbox:W(this,QU).box,path:{d:W(this,QU).toSVGPath()}},!0));else if(this.parent){const g=this.parent.viewport.rotation;this.parent.drawLayer.updateProperties(W(this,aU),{bbox:U(A=PU,KU,zU).call(A,W(this,nU).box,(g-this.rotation+360)%360),path:{d:I.toSVGPath()}}),this.parent.drawLayer.updateProperties(W(this,SU),{bbox:U(l=PU,KU,zU).call(l,W(this,QU).box,g),path:{d:W(this,QU).toSVGPath()}})}const[Z,d,B,F]=I.box;switch(this.rotation){case 0:this.x=Z,this.y=d,this.width=B,this.height=F;break;case 90:{const[I,g]=this.parentDimensions;this.x=d,this.y=1-Z,this.width=B*g/I,this.height=F*I/g;break}case 180:this.x=1-Z,this.y=1-d,this.width=B,this.height=F;break;case 270:{const[I,g]=this.parentDimensions;this.x=1-d,this.y=Z,this.width=B*g/I,this.height=F*I/g;break}}const{lastPoint:i}=W(this,QU);R(this,wU,[(i[0]-Z)/B,(i[1]-d)/F])},eU=function(I){const g=(I,g)=>{var C,A;this.color=I,R(this,YU,g),null==(C=this.parent)||C.drawLayer.updateProperties(W(this,aU),{root:{fill:I,"fill-opacity":g}}),null==(A=W(this,sU))||A.updateColor(I)},C=this.color,A=W(this,YU);this.addCommands({cmd:g.bind(this,I,PU._defaultOpacity),undo:g.bind(this,C,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:xC.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"color_changed",color:this._uiManager.highlightColorNames.get(I)},!0)},yU=function(I){const g=W(this,MU),C=I=>{R(this,MU,I),U(this,tU,uU).call(this,I)};this.addCommands({cmd:C.bind(this,I),undo:C.bind(this,g),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:xC.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"thickness_changed",thickness:I},!0)},uU=function(I){if(!W(this,oU))return;U(this,tU,HU).call(this,{highlightOutlines:W(this,nU).getNewOutline(I/2)}),this.fixAndSetPosition();const[g,C]=this.parentDimensions;this.setDims(this.width*g,this.height*C)},pU=function(){null===W(this,aU)||!this.parent||(this.parent.drawLayer.remove(W(this,aU)),R(this,aU,null),this.parent.drawLayer.remove(W(this,SU)),R(this,SU,null))},kU=function(I=this.parent){null===W(this,aU)&&(({id:b(this,aU)._,clipPathId:b(this,bU)._}=I.drawLayer.draw({bbox:W(this,nU).box,root:{viewBox:"0 0 1 1",fill:this.color,"fill-opacity":W(this,YU)},rootClass:{highlight:!0,free:W(this,oU)},path:{d:W(this,nU).toSVGPath()}},!1,!0)),R(this,SU,I.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:W(this,oU)},bbox:W(this,QU).box,path:{d:W(this,QU).toSVGPath()}},W(this,oU))),W(this,hU)&&(W(this,hU).style.clipPath=W(this,bU)))},KU=new WeakSet,zU=function([I,g,C,A],l){switch(l){case 90:return[1-g-A,I,A,C];case 180:return[1-I-C,1-g-A,C,A];case 270:return[g,1-I-C,A,C]}return[I,g,C,A]},TU=function(I){PU._keyboardManager.exec(this,I)},LU=function(I){if(!W(this,VU))return;const g=window.getSelection();I?g.setPosition(W(this,VU),W(this,RU)):g.setPosition(W(this,mU),W(this,NU))},EU=function(){return W(this,oU)?this.rotation:0},jU=function(){if(W(this,oU))return null;const[I,g]=this.pageDimensions,[C,A]=this.pageTranslation,l=W(this,UU),Z=new Float32Array(8*l.length);let d=0;for(const{x:B,y:F,width:i,height:c}of l){const l=B*I+C,G=(1-F)*g+A;Z[d]=Z[d+4]=l,Z[d+1]=Z[d+3]=G,Z[d+2]=Z[d+6]=l+i*I,Z[d+5]=Z[d+7]=G-c*g,d+=8}return Z},xU=function(I){return W(this,nU).serialize(I,U(this,tU,EU).call(this))},OU=function(I,g){this._freeHighlight.add(g)&&I.drawLayer.updateProperties(this._freeHighlightId,{path:{d:this._freeHighlight.toSVGPath()}})},rU=function(I,g){this._freeHighlight.isEmpty()?I.drawLayer.remove(this._freeHighlightId):I.createAndAddNewEditor(g,!1,{highlightId:this._freeHighlightId,highlightOutlines:this._freeHighlight.getOutlines(),clipPathId:this._freeHighlightClipId,methodOfCreation:"main_toolbar"}),this._freeHighlightId=-1,this._freeHighlight=null,this._freeHighlightClipId=""},vU=function(I){const{color:g}=this._initialData;return I.color.some(((I,C)=>I!==g[C]))},V(PU,KU),c(PU,"_defaultColor",null),c(PU,"_defaultOpacity",1),c(PU,"_defaultThickness",12),c(PU,"_type","highlight"),c(PU,"_editorType",jC.HIGHLIGHT),c(PU,"_freeHighlightId",-1),c(PU,"_freeHighlight",null),c(PU,"_freeHighlightClipId","");let fU=PU;var _U,qU,$U,Ib,gb,Cb,Ab,lb,Zb,db,Bb,Fb;class ib{constructor(){V(this,_U,Object.create(null))}updateProperty(I,g){this[I]=g,this.updateSVGProperty(I,g)}updateProperties(I){if(I)for(const[g,C]of Object.entries(I))this.updateProperty(g,C)}updateSVGProperty(I,g){W(this,_U)[I]=g}toSVGProperties(){const I=W(this,_U);return R(this,_U,Object.create(null)),{root:I}}reset(){R(this,_U,Object.create(null))}updateAll(I=this){this.updateProperties(I)}clone(){ZA("Not implemented")}}_U=new WeakMap;const cb=class I extends bB{constructor(I){super(I),V(this,Ib),V(this,qU,null),V(this,$U),c(this,"_drawId",null),R(this,$U,I.mustBeCommitted||!1),I.drawOutlines&&(U(this,Ib,gb).call(this,I),U(this,Ib,lb).call(this))}static _mergeSVGProperties(I,g){const C=new Set(Object.keys(I));for(const[A,l]of Object.entries(g))C.has(A)?Object.assign(I[A],l):I[A]=l;return I}static getDefaultDrawingOptions(I){ZA("Not implemented")}static get typesMap(){ZA("Not implemented")}static get isDrawer(){return!0}static get supportMultipleDrawings(){return!1}static updateDefaultParams(I,g){const C=this.typesMap.get(I);C&&this._defaultDrawingOptions.updateProperty(C,g),this._currentParent&&(this._currentDraw.updateProperty(C,g),this._currentParent.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}updateParams(I,g){const C=this.constructor.typesMap.get(I);C&&this._updateProperty(I,C,g)}static get defaultPropertiesToUpdate(){const I=[],g=this._defaultDrawingOptions;for(const[C,A]of this.typesMap)I.push([C,g[A]]);return I}get propertiesToUpdate(){const I=[],{_drawingOptions:g}=this;for(const[C,A]of this.constructor.typesMap)I.push([C,g[A]]);return I}_updateProperty(I,g,C){const A=this._drawingOptions,l=A[g],Z=I=>{var C;A.updateProperty(g,I);const l=W(this,qU).updateProperty(g,I);l&&U(this,Ib,Bb).call(this,l),null==(C=this.parent)||C.drawLayer.updateProperties(this._drawId,A.toSVGProperties())};this.addCommands({cmd:Z.bind(this,C),undo:Z.bind(this,l),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:I,overwriteIfSameType:!0,keepUndo:!0})}_onResizing(){var g;null==(g=this.parent)||g.drawLayer.updateProperties(this._drawId,I._mergeSVGProperties(W(this,qU).getPathResizingSVGProperties(U(this,Ib,db).call(this)),{bbox:U(this,Ib,Fb).call(this)}))}_onResized(){var g;null==(g=this.parent)||g.drawLayer.updateProperties(this._drawId,I._mergeSVGProperties(W(this,qU).getPathResizedSVGProperties(U(this,Ib,db).call(this)),{bbox:U(this,Ib,Fb).call(this)}))}_onTranslating(I,g){var C;null==(C=this.parent)||C.drawLayer.updateProperties(this._drawId,{bbox:U(this,Ib,Fb).call(this,I,g)})}_onTranslated(){var g;null==(g=this.parent)||g.drawLayer.updateProperties(this._drawId,I._mergeSVGProperties(W(this,qU).getPathTranslatedSVGProperties(U(this,Ib,db).call(this),this.parentDimensions),{bbox:U(this,Ib,Fb).call(this)}))}_onStartDragging(){var I;null==(I=this.parent)||I.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!0}})}_onStopDragging(){var I;null==(I=this.parent)||I.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!1}})}commit(){super.commit(),this.disableEditMode(),this.disableEditing()}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}getBaseTranslation(){return[0,0]}get isResizable(){return!0}onceAdded(){this.annotationElementId||this.parent.addUndoableEditor(this),this._isDraggable=!0,W(this,$U)&&(R(this,$U,!1),this.commit(),this.parent.setSelected(this),this.isOnScreen&&this.div.focus())}remove(){U(this,Ib,Ab).call(this),super.remove()}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(U(this,Ib,lb).call(this),U(this,Ib,Bb).call(this,W(this,qU).box),this.isAttachedToDOM||this.parent.add(this)))}setParent(I){var g;let C=!1;this.parent&&!I?(this._uiManager.removeShouldRescale(this),U(this,Ib,Ab).call(this)):I&&(this._uiManager.addShouldRescale(this),U(this,Ib,lb).call(this,I),C=!this.parent&&(null==(g=this.div)?void 0:g.classList.contains("selectedEditor"))),super.setParent(I),C&&this.select()}rotate(){this.parent&&this.parent.drawLayer.updateProperties(this._drawId,I._mergeSVGProperties({bbox:U(this,Ib,Fb).call(this)},W(this,qU).updateRotation((this.parentRotation-this.rotation+360)%360)))}onScaleChanging(){this.parent&&U(this,Ib,Bb).call(this,W(this,qU).updateParentDimensions(this.parentDimensions,this.parent.scale))}static onScaleChangingWhenDrawing(){}render(){if(this.div)return this.div;const I=super.render();I.classList.add("draw");const g=document.createElement("div");I.append(g),g.setAttribute("aria-hidden","true"),g.className="internal";const[C,A]=this.parentDimensions;return this.setDims(this.width*C,this.height*A),this._uiManager.addShouldRescale(this),this.disableEditing(),I}static createDrawerInstance(I,g,C,A,l){ZA("Not implemented")}static startDrawing(I,g,C,{target:A,offsetX:l,offsetY:Z}){var d;const{viewport:{rotation:B}}=I,{width:F,height:i}=A.getBoundingClientRect(),c=new AbortController,G=I.combinedSignal(c);window.addEventListener("pointerup",(g=>{c.abort(),I.toggleDrawing(!0),this._endDraw(g)}),{signal:G}),window.addEventListener("pointerdown",_A,{capture:!0,passive:!1,signal:G}),window.addEventListener("contextmenu",fA,{signal:G}),A.addEventListener("pointermove",this._drawMove.bind(this),{signal:G}),I.toggleDrawing(),null==(d=g._editorUndoBar)||d.hide(),this._currentDraw?I.drawLayer.updateProperties(this._currentDrawId,this._currentDraw.startNew(l,Z,F,i,B)):(g.updateUIForDefaultProperties(this),this._currentDraw=this.createDrawerInstance(l,Z,F,i,B),this._currentDrawingOptions=this.getDefaultDrawingOptions(),this._currentParent=I,({id:this._currentDrawId}=I.drawLayer.draw(this._mergeSVGProperties(this._currentDrawingOptions.toSVGProperties(),this._currentDraw.defaultSVGProperties),!0,!1)))}static _drawMove({offsetX:I,offsetY:g}){this._currentParent.drawLayer.updateProperties(this._currentDrawId,this._currentDraw.add(I,g))}static _endDraw({offsetX:I,offsetY:g}){const C=this._currentParent;if(C.drawLayer.updateProperties(this._currentDrawId,this._currentDraw.end(I,g)),this.supportMultipleDrawings){const I=this._currentDraw,g=this._currentDrawId,A=I.getLastElement();C.addCommands({cmd:()=>{C.drawLayer.updateProperties(g,I.setLastElement(A))},undo:()=>{C.drawLayer.updateProperties(g,I.removeLastElement())},mustExec:!1,type:xC.DRAW_STEP})}else this.endDrawing(!1)}static endDrawing(I){const g=this._currentParent;if(!g)return null;if(g.toggleDrawing(!0),g.cleanUndoStack(xC.DRAW_STEP),!this._currentDraw.isEmpty()){const{pageDimensions:[C,A],scale:l}=g,Z=g.createAndAddNewEditor({offsetX:0,offsetY:0},!1,{drawId:this._currentDrawId,drawOutlines:this._currentDraw.getOutlines(C*l,A*l,l,this._INNER_MARGIN),drawingOptions:this._currentDrawingOptions,mustBeCommitted:!I});return this._cleanup(),Z}return g.drawLayer.remove(this._currentDrawId),this._cleanup(),null}static _cleanup(){this._currentDrawId=-1,this._currentDraw=null,this._currentDrawingOptions=null,this._currentParent=null}createDrawingOptions(I){}static deserializeDraw(I,g,C,A,l,Z){ZA("Not implemented")}static async deserialize(I,g,C){var A,l;const{rawDims:{pageWidth:Z,pageHeight:d,pageX:B,pageY:F}}=g.viewport,i=this.deserializeDraw(B,F,Z,d,this._INNER_MARGIN,I),c=await super.deserialize(I,g,C);return c.createDrawingOptions(I),U(A=c,Ib,gb).call(A,{drawOutlines:i}),U(l=c,Ib,lb).call(l),c.onScaleChanging(),c.rotate(),c}serializeDraw(I){const[g,C]=this.pageTranslation,[A,l]=this.pageDimensions;return W(this,qU).serialize([g,C,A,l],I)}renderAnnotationElement(I){return I.updateEdited({rect:this.getRect(0,0)}),null}static canCreateNewEmptyEditor(){return!1}};qU=new WeakMap,$U=new WeakMap,Ib=new WeakSet,gb=function({drawOutlines:I,drawId:g,drawingOptions:C}){R(this,qU,I),this._drawingOptions||(this._drawingOptions=C),g>=0?(this._drawId=g,this.parent.drawLayer.finalizeDraw(g,I.defaultProperties)):this._drawId=U(this,Ib,Cb).call(this,I,this.parent),U(this,Ib,Bb).call(this,I.box)},Cb=function(I,g){const{id:C}=g.drawLayer.draw(cb._mergeSVGProperties(this._drawingOptions.toSVGProperties(),I.defaultSVGProperties),!1,!1);return C},Ab=function(){null===this._drawId||!this.parent||(this.parent.drawLayer.remove(this._drawId),this._drawId=null,this._drawingOptions.reset())},lb=function(I=this.parent){if(null===this._drawId||this.parent!==I){if(null!==this._drawId)return void this.parent.drawLayer.updateParent(this._drawId,I.drawLayer);this._drawingOptions.updateAll(),this._drawId=U(this,Ib,Cb).call(this,W(this,qU),I)}},Zb=function([I,g,C,A]){const{parentDimensions:[l,Z],rotation:d}=this;switch(d){case 90:return[g,1-I,C*(Z/l),A*(l/Z)];case 180:return[1-I,1-g,C,A];case 270:return[1-g,I,C*(Z/l),A*(l/Z)];default:return[I,g,C,A]}},db=function(){const{x:I,y:g,width:C,height:A,parentDimensions:[l,Z],rotation:d}=this;switch(d){case 90:return[1-g,I,C*(l/Z),A*(Z/l)];case 180:return[1-I,1-g,C,A];case 270:return[g,1-I,C*(l/Z),A*(Z/l)];default:return[I,g,C,A]}},Bb=function(I){if([this.x,this.y,this.width,this.height]=U(this,Ib,Zb).call(this,I),this.div){this.fixAndSetPosition();const[I,g]=this.parentDimensions;this.setDims(this.width*I,this.height*g)}this._onResized()},Fb=function(){const{x:I,y:g,width:C,height:A,rotation:l,parentRotation:Z,parentDimensions:[d,B]}=this;switch((4*l+Z)/90){case 1:return[1-g-A,I,A,C];case 2:return[1-I-C,1-g-A,C,A];case 3:return[g,1-I-C,A,C];case 4:return[I,g-C*(d/B),A*(B/d),C*(d/B)];case 5:return[1-g,I,C*(d/B),A*(B/d)];case 6:return[1-I-A*(B/d),1-g,A*(B/d),C*(d/B)];case 7:return[g-C*(d/B),1-I-A*(B/d),C*(d/B),A*(B/d)];case 8:return[I-C,g-A,C,A];case 9:return[1-g,I-C,A,C];case 10:return[1-I,1-g,C,A];case 11:return[g-A,1-I,A,C];case 12:return[I-A*(B/d),g,A*(B/d),C*(d/B)];case 13:return[1-g-C*(d/B),I-A*(B/d),C*(d/B),A*(B/d)];case 14:return[1-I,1-g-C*(d/B),A*(B/d),C*(d/B)];case 15:return[g,1-I,C*(d/B),A*(B/d)];default:return[I,g,C,A]}},c(cb,"_currentDrawId",-1),c(cb,"_currentDraw",null),c(cb,"_currentDrawingOptions",null),c(cb,"_currentParent",null),c(cb,"_INNER_MARGIN",3);let Gb=cb;var Wb,Vb,Rb,Ub,bb,sb,Qb,mb,Nb,hb,nb,ab,ob,wb,Yb,Sb,Jb,Mb,Db,tb,Xb,Hb,eb,yb,ub,pb,kb;class Kb{constructor(I,g,C,A,l,Z){V(this,ab),V(this,Wb,new Float64Array(6)),V(this,Vb),V(this,Rb),V(this,Ub),V(this,bb),V(this,sb),V(this,Qb,""),V(this,mb,0),V(this,Nb,new Tb),V(this,hb),V(this,nb),R(this,hb,C),R(this,nb,A),R(this,Ub,l),R(this,bb,Z),[I,g]=U(this,ab,ob).call(this,I,g);const d=R(this,Vb,[NaN,NaN,NaN,NaN,I,g]);R(this,sb,[I,g]),R(this,Rb,[{line:d,points:W(this,sb)}]),W(this,Wb).set(d,0)}updateProperty(I,g){"stroke-width"===I&&R(this,bb,g)}isEmpty(){return!W(this,Rb)||0===W(this,Rb).length}add(I,g){[I,g]=U(this,ab,ob).call(this,I,g);const[C,A,l,Z]=W(this,Wb).subarray(2,6),d=I-l,B=g-Z;return Math.hypot(W(this,hb)*d,W(this,nb)*B)<=2?null:(W(this,sb).push(I,g),isNaN(C)?(W(this,Wb).set([l,Z,I,g],2),W(this,Vb).push(NaN,NaN,NaN,NaN,I,g),{path:{d:this.toSVGPath()}}):(isNaN(W(this,Wb)[0])&&W(this,Vb).splice(6,6),W(this,Wb).set([C,A,l,Z,I,g],0),W(this,Vb).push(...rV.createBezierPoints(C,A,l,Z,I,g)),{path:{d:this.toSVGPath()}}))}end(I,g){const C=this.add(I,g);return C||(2===W(this,sb).length?{path:{d:this.toSVGPath()}}:null)}startNew(I,g,C,A,l){R(this,hb,C),R(this,nb,A),R(this,Ub,l),[I,g]=U(this,ab,ob).call(this,I,g);const Z=R(this,Vb,[NaN,NaN,NaN,NaN,I,g]);R(this,sb,[I,g]);const d=W(this,Rb).at(-1);return d&&(d.line=new Float32Array(d.line),d.points=new Float32Array(d.points)),W(this,Rb).push({line:Z,points:W(this,sb)}),W(this,Wb).set(Z,0),R(this,mb,0),this.toSVGPath(),null}getLastElement(){return W(this,Rb).at(-1)}setLastElement(I){return W(this,Rb)?(W(this,Rb).push(I),R(this,Vb,I.line),R(this,sb,I.points),R(this,mb,0),{path:{d:this.toSVGPath()}}):W(this,Nb).setLastElement(I)}removeLastElement(){if(!W(this,Rb))return W(this,Nb).removeLastElement();W(this,Rb).pop(),R(this,Qb,"");for(let I=0,g=W(this,Rb).length;I<g;I++){const{line:g,points:C}=W(this,Rb)[I];R(this,Vb,g),R(this,sb,C),R(this,mb,0),this.toSVGPath()}return{path:{d:W(this,Qb)}}}toSVGPath(){const I=rV.svgRound(W(this,Vb)[4]),g=rV.svgRound(W(this,Vb)[5]);if(2===W(this,sb).length)return R(this,Qb,`${W(this,Qb)} M ${I} ${g} Z`),W(this,Qb);if(W(this,sb).length<=6){const C=W(this,Qb).lastIndexOf("M");R(this,Qb,`${W(this,Qb).slice(0,C)} M ${I} ${g}`),R(this,mb,6)}if(4===W(this,sb).length){const I=rV.svgRound(W(this,Vb)[10]),g=rV.svgRound(W(this,Vb)[11]);return R(this,Qb,`${W(this,Qb)} L ${I} ${g}`),R(this,mb,12),W(this,Qb)}const C=[];0===W(this,mb)&&(C.push(`M ${I} ${g}`),R(this,mb,6));for(let A=W(this,mb),l=W(this,Vb).length;A<l;A+=6){const[I,g,l,Z,d,B]=W(this,Vb).slice(A,A+6).map(rV.svgRound);C.push(`C${I} ${g} ${l} ${Z} ${d} ${B}`)}return R(this,Qb,W(this,Qb)+C.join(" ")),R(this,mb,W(this,Vb).length),W(this,Qb)}getOutlines(I,g,C,A){const l=W(this,Rb).at(-1);return l.line=new Float32Array(l.line),l.points=new Float32Array(l.points),W(this,Nb).build(W(this,Rb),I,g,C,W(this,Ub),W(this,bb),A),R(this,Wb,null),R(this,Vb,null),R(this,Rb,null),R(this,Qb,null),W(this,Nb)}get defaultSVGProperties(){return{root:{viewBox:"0 0 10000 10000"},rootClass:{draw:!0},bbox:[0,0,1,1]}}}Wb=new WeakMap,Vb=new WeakMap,Rb=new WeakMap,Ub=new WeakMap,bb=new WeakMap,sb=new WeakMap,Qb=new WeakMap,mb=new WeakMap,Nb=new WeakMap,hb=new WeakMap,nb=new WeakMap,ab=new WeakSet,ob=function(I,g){return rV._normalizePoint(I,g,W(this,hb),W(this,nb),W(this,Ub))};const zb=class I extends rV{constructor(){super(...arguments),V(this,eb),V(this,wb),V(this,Yb,0),V(this,Sb),V(this,Jb),V(this,Mb),V(this,Db),V(this,tb),V(this,Xb),V(this,Hb)}build(I,g,C,A,l,Z,d){R(this,Mb,g),R(this,Db,C),R(this,tb,A),R(this,Xb,l),R(this,Hb,Z),R(this,Sb,d??0),R(this,Jb,I),U(this,eb,pb).call(this)}setLastElement(I){return W(this,Jb).push(I),{path:{d:this.toSVGPath()}}}removeLastElement(){return W(this,Jb).pop(),{path:{d:this.toSVGPath()}}}toSVGPath(){const I=[];for(const{line:g}of W(this,Jb))if(I.push(`M${rV.svgRound(g[4])} ${rV.svgRound(g[5])}`),6!==g.length)if(12!==g.length)for(let C=6,A=g.length;C<A;C+=6){const[A,l,Z,d,B,F]=g.subarray(C,C+6).map(rV.svgRound);I.push(`C${A} ${l} ${Z} ${d} ${B} ${F}`)}else I.push(`L${rV.svgRound(g[10])} ${rV.svgRound(g[11])}`);else I.push("Z");return I.join("")}serialize([I,g,C,A],l){const Z=[],d=[],[B,F,i,c]=U(this,eb,ub).call(this);let G,V,R,b,s,Q,m,N,h;switch(W(this,Xb)){case 0:h=rV._rescale,G=I,V=g+A,R=C,b=-A,s=I+B*C,Q=g+(1-F-c)*A,m=I+(B+i)*C,N=g+(1-F)*A;break;case 90:h=rV._rescaleAndSwap,G=I,V=g,R=C,b=A,s=I+F*C,Q=g+B*A,m=I+(F+c)*C,N=g+(B+i)*A;break;case 180:h=rV._rescale,G=I+C,V=g,R=-C,b=A,s=I+(1-B-i)*C,Q=g+F*A,m=I+(1-B)*C,N=g+(F+c)*A;break;case 270:h=rV._rescaleAndSwap,G=I+C,V=g+A,R=-C,b=-A,s=I+(1-F-c)*C,Q=g+(1-B-i)*A,m=I+(1-F)*C,N=g+(1-B)*A;break}for(const{line:U,points:n}of W(this,Jb))Z.push(h(U,G,V,R,b,l?new Array(U.length):null)),d.push(h(n,G,V,R,b,l?new Array(n.length):null));return{lines:Z,points:d,rect:[s,Q,m,N]}}static deserialize(g,C,A,l,Z,{paths:{lines:d,points:B},rotation:F,thickness:i}){const c=[];let G,W,V,R,U;switch(F){case 0:U=rV._rescale,G=-g/A,W=C/l+1,V=1/A,R=-1/l;break;case 90:U=rV._rescaleAndSwap,G=-C/l,W=-g/A,V=1/l,R=1/A;break;case 180:U=rV._rescale,G=g/A+1,W=-C/l,V=-1/A,R=1/l;break;case 270:U=rV._rescaleAndSwap,G=C/l+1,W=g/A+1,V=-1/l,R=-1/A;break}if(!d){d=[];for(const I of B){const g=I.length;if(2===g){d.push(new Float32Array([NaN,NaN,NaN,NaN,I[0],I[1]]));continue}if(4===g){d.push(new Float32Array([NaN,NaN,NaN,NaN,I[0],I[1],NaN,NaN,NaN,NaN,I[2],I[3]]));continue}const C=new Float32Array(3*(g-2));d.push(C);let[A,l,Z,B]=I.subarray(0,4);C.set([NaN,NaN,NaN,NaN,A,l],0);for(let d=4;d<g;d+=2){const g=I[d],F=I[d+1];C.set(rV.createBezierPoints(A,l,Z,B,g,F),3*(d-2)),[A,l,Z,B]=[Z,B,g,F]}}}for(let I=0,s=d.length;I<s;I++)c.push({line:U(d[I].map((I=>I??NaN)),G,W,V,R),points:U(B[I].map((I=>I??NaN)),G,W,V,R)});const b=new I;return b.build(c,A,l,1,F,i,Z),b}get box(){return W(this,wb)}updateProperty(I,g){return"stroke-width"===I?U(this,eb,kb).call(this,g):null}updateParentDimensions([I,g],C){const[A,l]=U(this,eb,yb).call(this);R(this,Mb,I),R(this,Db,g),R(this,tb,C);const[Z,d]=U(this,eb,yb).call(this),B=Z-A,F=d-l,i=W(this,wb);return i[0]-=B,i[1]-=F,i[2]+=2*B,i[3]+=2*F,i}updateRotation(I){return R(this,Yb,I),{path:{transform:this.rotationTransform}}}get viewBox(){return W(this,wb).map(rV.svgRound).join(" ")}get defaultProperties(){const[I,g]=W(this,wb);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${rV.svgRound(I)} ${rV.svgRound(g)}`}}}get rotationTransform(){const[,,I,g]=W(this,wb);let C=0,A=0,l=0,Z=0,d=0,B=0;switch(W(this,Yb)){case 90:A=g/I,l=-I/g,d=I;break;case 180:C=-1,Z=-1,d=I,B=g;break;case 270:A=-g/I,l=I/g,B=g;break;default:return""}return`matrix(${C} ${A} ${l} ${Z} ${rV.svgRound(d)} ${rV.svgRound(B)})`}getPathResizingSVGProperties([I,g,C,A]){const[l,Z]=U(this,eb,yb).call(this),[d,B,F,i]=W(this,wb);if(Math.abs(F-l)<=rV.PRECISION||Math.abs(i-Z)<=rV.PRECISION){const l=I+C/2-(d+F/2),Z=g+A/2-(B+i/2);return{path:{"transform-origin":`${rV.svgRound(I)} ${rV.svgRound(g)}`,transform:`${this.rotationTransform} translate(${l} ${Z})`}}}const c=(C-2*l)/(F-2*l),G=(A-2*Z)/(i-2*Z),V=F/C,R=i/A;return{path:{"transform-origin":`${rV.svgRound(d)} ${rV.svgRound(B)}`,transform:`${this.rotationTransform} scale(${V} ${R}) translate(${rV.svgRound(l)} ${rV.svgRound(Z)}) scale(${c} ${G}) translate(${rV.svgRound(-l)} ${rV.svgRound(-Z)})`}}}getPathResizedSVGProperties([I,g,C,A]){const[l,Z]=U(this,eb,yb).call(this),d=W(this,wb),[B,F,i,c]=d;if(d[0]=I,d[1]=g,d[2]=C,d[3]=A,Math.abs(i-l)<=rV.PRECISION||Math.abs(c-Z)<=rV.PRECISION){const l=I+C/2-(B+i/2),Z=g+A/2-(F+c/2);for(const{line:I,points:g}of W(this,Jb))rV._translate(I,l,Z,I),rV._translate(g,l,Z,g);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${rV.svgRound(I)} ${rV.svgRound(g)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}const G=(C-2*l)/(i-2*l),V=(A-2*Z)/(c-2*Z),R=-G*(B+l)+I+l,b=-V*(F+Z)+g+Z;if(1!==G||1!==V||0!==R||0!==b)for(const{line:U,points:s}of W(this,Jb))rV._rescale(U,R,b,G,V,U),rV._rescale(s,R,b,G,V,s);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${rV.svgRound(I)} ${rV.svgRound(g)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}getPathTranslatedSVGProperties([I,g],C){const[A,l]=C,Z=W(this,wb),d=I-Z[0],B=g-Z[1];if(W(this,Mb)===A&&W(this,Db)===l)for(const{line:F,points:i}of W(this,Jb))rV._translate(F,d,B,F),rV._translate(i,d,B,i);else{const I=W(this,Mb)/A,g=W(this,Db)/l;R(this,Mb,A),R(this,Db,l);for(const{line:C,points:A}of W(this,Jb))rV._rescale(C,d,B,I,g,C),rV._rescale(A,d,B,I,g,A);Z[2]*=I,Z[3]*=g}return Z[0]=I,Z[1]=g,{root:{viewBox:this.viewBox},path:{d:this.toSVGPath(),"transform-origin":`${rV.svgRound(I)} ${rV.svgRound(g)}`}}}get defaultSVGProperties(){const I=W(this,wb);return{root:{viewBox:this.viewBox},rootClass:{draw:!0},path:{d:this.toSVGPath(),"transform-origin":`${rV.svgRound(I[0])} ${rV.svgRound(I[1])}`,transform:this.rotationTransform||null},bbox:I}}};wb=new WeakMap,Yb=new WeakMap,Sb=new WeakMap,Jb=new WeakMap,Mb=new WeakMap,Db=new WeakMap,tb=new WeakMap,Xb=new WeakMap,Hb=new WeakMap,eb=new WeakSet,yb=function(I=W(this,Hb)){const g=W(this,Sb)+I/2*W(this,tb);return W(this,Xb)%180===0?[g/W(this,Mb),g/W(this,Db)]:[g/W(this,Db),g/W(this,Mb)]},ub=function(){const[I,g,C,A]=W(this,wb),[l,Z]=U(this,eb,yb).call(this,0);return[I+l,g+Z,C-2*l,A-2*Z]},pb=function(){const I=R(this,wb,new Float32Array([1/0,1/0,-1/0,-1/0]));for(const{line:A}of W(this,Jb)){if(A.length<=12){for(let g=4,C=A.length;g<C;g+=6){const[C,l]=A.subarray(g,g+2);I[0]=Math.min(I[0],C),I[1]=Math.min(I[1],l),I[2]=Math.max(I[2],C),I[3]=Math.max(I[3],l)}continue}let g=A[4],C=A[5];for(let l=6,Z=A.length;l<Z;l+=6){const[Z,d,B,F,i,c]=A.subarray(l,l+6);MA.bezierBoundingBox(g,C,Z,d,B,F,i,c,I),g=i,C=c}}const[g,C]=U(this,eb,yb).call(this);I[0]=Math.min(1,Math.max(0,I[0]-g)),I[1]=Math.min(1,Math.max(0,I[1]-C)),I[2]=Math.min(1,Math.max(0,I[2]+g)),I[3]=Math.min(1,Math.max(0,I[3]+C)),I[2]-=I[0],I[3]-=I[1]},kb=function(I){const[g,C]=U(this,eb,yb).call(this);R(this,Hb,I);const[A,l]=U(this,eb,yb).call(this),[Z,d]=[A-g,l-C],B=W(this,wb);return B[0]-=Z,B[1]-=d,B[2]+=2*Z,B[3]+=2*d,B};let Tb=zb;var Lb;const Eb=class I extends ib{constructor(I){super(),V(this,Lb),R(this,Lb,I),super.updateProperties({fill:"none",stroke:bB._defaultLineColor,"stroke-opacity":1,"stroke-width":1,"stroke-linecap":"round","stroke-linejoin":"round","stroke-miterlimit":10})}updateSVGProperty(I,g){"stroke-width"===I&&(g??(g=this["stroke-width"]),g*=W(this,Lb).realScale),super.updateSVGProperty(I,g)}clone(){const g=new I(W(this,Lb));return g.updateAll(this),g}};Lb=new WeakMap;let jb=Eb;var xb,Ob;const rb=class I extends Gb{constructor(I){super({...I,name:"inkEditor"}),V(this,xb),this._willKeepAspectRatio=!0}static initialize(I,g){bB.initialize(I,g),this._defaultDrawingOptions=new jb(g.viewParameters)}static getDefaultDrawingOptions(I){const g=this._defaultDrawingOptions.clone();return g.updateProperties(I),g}static get supportMultipleDrawings(){return!0}static get typesMap(){return iA(this,"typesMap",new Map([[xC.INK_THICKNESS,"stroke-width"],[xC.INK_COLOR,"stroke"],[xC.INK_OPACITY,"stroke-opacity"]]))}static createDrawerInstance(I,g,C,A,l){return new Kb(I,g,C,A,l,this._defaultDrawingOptions["stroke-width"])}static deserializeDraw(I,g,C,A,l,Z){return Tb.deserialize(I,g,C,A,l,Z)}static async deserialize(I,g,C){let A=null;if(I instanceof NV){const{data:{inkLists:g,rect:C,rotation:l,id:Z,color:d,opacity:B,borderStyle:{rawWidth:F},popupRef:i},parent:{page:{pageNumber:c}}}=I;A=I={annotationType:jC.INK,color:Array.from(d),thickness:F,opacity:B,paths:{points:g},boxes:null,pageIndex:c-1,rect:C.slice(0),rotation:l,id:Z,deleted:!1,popupRef:i}}const l=await super.deserialize(I,g,C);return l.annotationElementId=I.id||null,l._initialData=A,l}onScaleChanging(){if(!this.parent)return;super.onScaleChanging();const{_drawId:I,_drawingOptions:g,parent:C}=this;g.updateSVGProperty("stroke-width"),C.drawLayer.updateProperties(I,g.toSVGProperties())}static onScaleChangingWhenDrawing(){const I=this._currentParent;I&&(super.onScaleChangingWhenDrawing(),this._defaultDrawingOptions.updateSVGProperty("stroke-width"),I.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}createDrawingOptions({color:g,thickness:C,opacity:A}){this._drawingOptions=I.getDefaultDrawingOptions({stroke:MA.makeHexColor(...g),"stroke-width":C,"stroke-opacity":A})}serialize(I=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const{lines:g,points:C,rect:A}=this.serializeDraw(I),{_drawingOptions:{stroke:l,"stroke-opacity":Z,"stroke-width":d}}=this,B={annotationType:jC.INK,color:bB._colorManager.convert(l),opacity:Z,thickness:d,paths:{lines:g,points:C},pageIndex:this.pageIndex,rect:A,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return I?B:this.annotationElementId&&!U(this,xb,Ob).call(this,B)?null:(B.id=this.annotationElementId,B)}renderAnnotationElement(I){const{points:g,rect:C}=this.serializeDraw(!1);return I.updateEdited({rect:C,thickness:this._drawingOptions["stroke-width"],points:g}),null}};xb=new WeakSet,Ob=function(I){const{color:g,thickness:C,opacity:A,pageIndex:l}=this._initialData;return this._hasBeenMoved||this._hasBeenResized||I.color.some(((I,C)=>I!==g[C]))||I.thickness!==C||I.opacity!==A||I.pageIndex!==l},c(rb,"_type","ink"),c(rb,"_editorType",jC.INK),c(rb,"_defaultDrawingOptions",null);let vb=rb;var Pb,fb,_b,qb,$b,Is,gs,Cs,As,ls,Zs,ds,Bs,Fs,is,cs,Gs,Ws,Vs,Rs,Us,bs;const ss=class extends bB{constructor(I){super({...I,name:"stampEditor"}),V(this,ds),V(this,Pb,null),V(this,fb,null),V(this,_b,null),V(this,qb,null),V(this,$b,null),V(this,Is,""),V(this,gs,null),V(this,Cs,null),V(this,As,null),V(this,ls,!1),V(this,Zs,!1),R(this,qb,I.bitmapUrl),R(this,$b,I.bitmapFile)}static initialize(I,g){bB.initialize(I,g)}static get supportedTypes(){return iA(this,"supportedTypes",["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"].map((I=>`image/${I}`)))}static get supportedTypesStr(){return iA(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(I){return this.supportedTypes.includes(I)}static paste(I,g){g.pasteEditor(jC.STAMP,{bitmapFile:I.getAsFile()})}altTextFinish(){this._uiManager.useNewAltTextFlow&&(this.div.hidden=!1),super.altTextFinish()}get telemetryFinalData(){var I;return{type:"stamp",hasAltText:!(null==(I=this.altTextData)||!I.altText)}}static computeTelemetryFinalData(I){const g=I.get("hasAltText");return{hasAltText:g.get(!0)??0,hasNoAltText:g.get(!1)??0}}async mlGuessAltText(I=null,g=!0){if(this.hasAltTextData())return null;const{mlManager:C}=this._uiManager;if(!C)throw new Error("No ML.");if(!await C.isEnabledFor("altText"))throw new Error("ML isn't enabled for alt text.");const{data:A,width:l,height:Z}=I||this.copyCanvas(null,null,!0).imageData,d=await C.guess({name:"altText",request:{data:A,width:l,height:Z,channels:A.length/(l*Z)}});if(!d)throw new Error("No response from the AI service.");if(d.error)throw new Error("Error from the AI service.");if(d.cancel)return null;if(!d.output)throw new Error("No valid response from the AI service.");const B=d.output;return await this.setGuessedAltText(B),g&&!this.hasAltTextData()&&(this.altTextData={alt:B,decorative:!1}),B}remove(){var I,g;W(this,fb)&&(R(this,Pb,null),this._uiManager.imageManager.deleteId(W(this,fb)),null==(I=W(this,gs))||I.remove(),R(this,gs,null),null==(g=W(this,Cs))||g.disconnect(),R(this,Cs,null),W(this,As)&&(clearTimeout(W(this,As)),R(this,As,null))),super.remove()}rebuild(){this.parent?(super.rebuild(),null!==this.div&&(W(this,fb)&&null===W(this,gs)&&U(this,ds,is).call(this),this.isAttachedToDOM||this.parent.add(this))):W(this,fb)&&U(this,ds,is).call(this)}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(W(this,_b)||W(this,Pb)||W(this,qb)||W(this,$b)||W(this,fb))}get isResizable(){return!0}render(){if(this.div)return this.div;let I,g;if(this.width&&(I=this.x,g=this.y),super.render(),this.div.hidden=!0,this.div.setAttribute("role","figure"),this.addAltTextButton(),W(this,Pb)?U(this,ds,cs).call(this):U(this,ds,is).call(this),this.width&&!this.annotationElementId){const[C,A]=this.parentDimensions;this.setAt(I*C,g*A,this.width*C,this.height*A)}return this.div}copyCanvas(I,g,C=!1){var A;I||(I=224);const{width:l,height:Z}=W(this,Pb),d=new hl;let B=W(this,Pb),F=l,i=Z,c=null;if(g){if(l>g||Z>g){const I=Math.min(g/l,g/Z);F=Math.floor(l*I),i=Math.floor(Z*I)}c=document.createElement("canvas");const I=c.width=Math.ceil(F*d.sx),C=c.height=Math.ceil(i*d.sy);W(this,ls)||(B=U(this,ds,Ws).call(this,I,C));const G=c.getContext("2d");G.filter=this._uiManager.hcmFilter;let V="white",R="#cfcfd8";"none"!==this._uiManager.hcmFilter?R="black":null!=(A=window.matchMedia)&&A.call(window,"(prefers-color-scheme: dark)").matches&&(V="#8f8f9d",R="#42414d");const b=15,s=b*d.sx,Q=b*d.sy,m=new OffscreenCanvas(2*s,2*Q),N=m.getContext("2d");N.fillStyle=V,N.fillRect(0,0,2*s,2*Q),N.fillStyle=R,N.fillRect(0,0,s,Q),N.fillRect(s,Q,s,Q),G.fillStyle=G.createPattern(m,"repeat"),G.fillRect(0,0,I,C),G.drawImage(B,0,0,B.width,B.height,0,0,I,C)}let G=null;if(C){let g,C;if(d.symmetric&&B.width<I&&B.height<I)g=B.width,C=B.height;else if(B=W(this,Pb),l>I||Z>I){const A=Math.min(I/l,I/Z);g=Math.floor(l*A),C=Math.floor(Z*A),W(this,ls)||(B=U(this,ds,Ws).call(this,g,C))}const A=new OffscreenCanvas(g,C).getContext("2d",{willReadFrequently:!0});A.drawImage(B,0,0,B.width,B.height,0,0,g,C),G={width:g,height:C,data:A.getImageData(0,0,g,C).data}}return{canvas:c,width:F,height:i,imageData:G}}getImageForAltText(){return W(this,gs)}static async deserialize(I,g,C){var A;let l=null;if(I instanceof wV){const{data:{rect:Z,rotation:d,id:B,structParent:F,popupRef:i},container:c,parent:{page:{pageNumber:G}}}=I,W=c.querySelector("canvas"),V=C.imageManager.getFromCanvas(c.id,W);W.remove();const R=(null==(A=await g._structTree.getAriaAttributes(`${yA}${B}`))?void 0:A.get("aria-label"))||"";l=I={annotationType:jC.STAMP,bitmapId:V.id,bitmap:V.bitmap,pageIndex:G-1,rect:Z.slice(0),rotation:d,id:B,deleted:!1,accessibilityData:{decorative:!1,altText:R},isSvg:!1,structParent:F,popupRef:i}}const Z=await super.deserialize(I,g,C),{rect:d,bitmap:B,bitmapUrl:F,bitmapId:i,isSvg:c,accessibilityData:G}=I;i&&C.imageManager.isValidId(i)?(R(Z,fb,i),B&&R(Z,Pb,B)):R(Z,qb,F),R(Z,ls,c);const[W,V]=Z.pageDimensions;return Z.width=(d[2]-d[0])/W,Z.height=(d[3]-d[1])/V,Z.annotationElementId=I.id||null,G&&(Z.altTextData=G),Z._initialData=l,R(Z,Zs,!!l),Z}serialize(I=!1,g=null){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const C={annotationType:jC.STAMP,bitmapId:W(this,fb),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:W(this,ls),structTreeParentId:this._structTreeParentId};if(I)return C.bitmapUrl=U(this,ds,Rs).call(this,!0),C.accessibilityData=this.serializeAltText(!0),C;const{decorative:A,altText:l}=this.serializeAltText(!1);if(!A&&l&&(C.accessibilityData={type:"Figure",alt:l}),this.annotationElementId){const I=U(this,ds,bs).call(this,C);if(I.isSame)return null;I.isSameAltText?delete C.accessibilityData:C.accessibilityData.structParent=this._initialData.structParent??-1}if(C.id=this.annotationElementId,null===g)return C;g.stamps||(g.stamps=new Map);const Z=W(this,ls)?(C.rect[2]-C.rect[0])*(C.rect[3]-C.rect[1]):null;if(g.stamps.has(W(this,fb))){if(W(this,ls)){const I=g.stamps.get(W(this,fb));Z>I.area&&(I.area=Z,I.serialized.bitmap.close(),I.serialized.bitmap=U(this,ds,Rs).call(this,!1))}}else g.stamps.set(W(this,fb),{area:Z,serialized:C}),C.bitmap=U(this,ds,Rs).call(this,!1);return C}renderAnnotationElement(I){return I.updateEdited({rect:this.getRect(0,0)}),null}};Pb=new WeakMap,fb=new WeakMap,_b=new WeakMap,qb=new WeakMap,$b=new WeakMap,Is=new WeakMap,gs=new WeakMap,Cs=new WeakMap,As=new WeakMap,ls=new WeakMap,Zs=new WeakMap,ds=new WeakSet,Bs=function(I,g=!1){I?(R(this,Pb,I.bitmap),g||(R(this,fb,I.id),R(this,ls,I.isSvg)),I.file&&R(this,Is,I.file.name),U(this,ds,cs).call(this)):this.remove()},Fs=function(){if(R(this,_b,null),this._uiManager.enableWaiting(!1),W(this,gs)){if(this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&W(this,Pb))return this._editToolbar.hide(),void this._uiManager.editAltText(this,!0);if(!this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&W(this,Pb)){this._reportTelemetry({action:"pdfjs.image.image_added",data:{alt_text_modal:!1,alt_text_type:"empty"}});try{this.mlGuessAltText()}catch{}}this.div.focus()}},is=function(){if(W(this,fb))return this._uiManager.enableWaiting(!0),void this._uiManager.imageManager.getFromId(W(this,fb)).then((I=>U(this,ds,Bs).call(this,I,!0))).finally((()=>U(this,ds,Fs).call(this)));if(W(this,qb)){const I=W(this,qb);return R(this,qb,null),this._uiManager.enableWaiting(!0),void R(this,_b,this._uiManager.imageManager.getFromUrl(I).then((I=>U(this,ds,Bs).call(this,I))).finally((()=>U(this,ds,Fs).call(this))))}if(W(this,$b)){const I=W(this,$b);return R(this,$b,null),this._uiManager.enableWaiting(!0),void R(this,_b,this._uiManager.imageManager.getFromFile(I).then((I=>U(this,ds,Bs).call(this,I))).finally((()=>U(this,ds,Fs).call(this))))}const I=document.createElement("input");I.type="file",I.accept=ss.supportedTypesStr;const g=this._uiManager._signal;R(this,_b,new Promise((C=>{I.addEventListener("change",(async()=>{if(I.files&&0!==I.files.length){this._uiManager.enableWaiting(!0);const g=await this._uiManager.imageManager.getFromFile(I.files[0]);this._reportTelemetry({action:"pdfjs.image.image_selected",data:{alt_text_modal:this._uiManager.useNewAltTextFlow}}),U(this,ds,Bs).call(this,g)}else this.remove();C()}),{signal:g}),I.addEventListener("cancel",(()=>{this.remove(),C()}),{signal:g})})).finally((()=>U(this,ds,Fs).call(this)))),I.click()},cs=function(){const{div:I}=this;let{width:g,height:C}=W(this,Pb);const[A,l]=this.pageDimensions,Z=.75;if(this.width)g=this.width*A,C=this.height*l;else if(g>Z*A||C>Z*l){const I=Math.min(Z*A/g,Z*l/C);g*=I,C*=I}const[d,B]=this.parentDimensions;this.setDims(g*d/A,C*B/l),this._uiManager.enableWaiting(!1);const F=R(this,gs,document.createElement("canvas"));F.setAttribute("role","img"),this.addContainer(F),(!this._uiManager.useNewAltTextWhenAddingImage||!this._uiManager.useNewAltTextFlow||this.annotationElementId)&&(I.hidden=!1),U(this,ds,Vs).call(this,g,C),U(this,ds,Us).call(this),W(this,Zs)||(this.parent.addUndoableEditor(this),R(this,Zs,!0)),this._reportTelemetry({action:"inserted_image"}),W(this,Is)&&F.setAttribute("aria-label",W(this,Is))},Gs=function(I,g){var C;const[A,l]=this.parentDimensions;this.width=I/A,this.height=g/l,null!=(C=this._initialOptions)&&C.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,null!==W(this,As)&&clearTimeout(W(this,As)),R(this,As,setTimeout((()=>{R(this,As,null),U(this,ds,Vs).call(this,I,g)}),200))},Ws=function(I,g){const{width:C,height:A}=W(this,Pb);let l=C,Z=A,d=W(this,Pb);for(;l>2*I||Z>2*g;){const C=l,A=Z;l>2*I&&(l=l>=16384?Math.floor(l/2)-1:Math.ceil(l/2)),Z>2*g&&(Z=Z>=16384?Math.floor(Z/2)-1:Math.ceil(Z/2));const B=new OffscreenCanvas(l,Z);B.getContext("2d").drawImage(d,0,0,C,A,0,0,l,Z),d=B.transferToImageBitmap()}return d},Vs=function(I,g){const C=new hl,A=Math.ceil(I*C.sx),l=Math.ceil(g*C.sy),Z=W(this,gs);if(!Z||Z.width===A&&Z.height===l)return;Z.width=A,Z.height=l;const d=W(this,ls)?W(this,Pb):U(this,ds,Ws).call(this,A,l),B=Z.getContext("2d");B.filter=this._uiManager.hcmFilter,B.drawImage(d,0,0,d.width,d.height,0,0,A,l)},Rs=function(I){if(I){if(W(this,ls)){const I=this._uiManager.imageManager.getSvgUrl(W(this,fb));if(I)return I}const I=document.createElement("canvas");return({width:I.width,height:I.height}=W(this,Pb)),I.getContext("2d").drawImage(W(this,Pb),0,0),I.toDataURL()}if(W(this,ls)){const[I,g]=this.pageDimensions,C=Math.round(this.width*I*zA.PDF_TO_CSS_UNITS),A=Math.round(this.height*g*zA.PDF_TO_CSS_UNITS),l=new OffscreenCanvas(C,A);return l.getContext("2d").drawImage(W(this,Pb),0,0,W(this,Pb).width,W(this,Pb).height,0,0,C,A),l.transferToImageBitmap()}return structuredClone(W(this,Pb))},Us=function(){this._uiManager._signal&&(R(this,Cs,new ResizeObserver((I=>{const g=I[0].contentRect;g.width&&g.height&&U(this,ds,Gs).call(this,g.width,g.height)}))),W(this,Cs).observe(this.div),this._uiManager._signal.addEventListener("abort",(()=>{var I;null==(I=W(this,Cs))||I.disconnect(),R(this,Cs,null)}),{once:!0}))},bs=function(I){var g;const{pageIndex:C,accessibilityData:{altText:A}}=this._initialData,l=I.pageIndex===C,Z=((null==(g=I.accessibilityData)?void 0:g.alt)||"")===A;return{isSame:!this._hasBeenMoved&&!this._hasBeenResized&&l&&Z,isSameAltText:Z}},c(ss,"_type","stamp"),c(ss,"_editorType",jC.STAMP);let Qs=ss;var ms,Ns,hs,ns,as,os,ws,Ys,Ss,Js,Ms,Ds,ts,Xs,Hs,es,ys,us,ps;const ks=class I{constructor({uiManager:g,pageIndex:C,div:A,structTreeLayer:l,accessibilityManager:Z,annotationLayer:d,drawLayer:B,textLayer:F,viewport:i,l10n:c}){V(this,Xs),V(this,ms),V(this,Ns,!1),V(this,hs,null),V(this,ns,null),V(this,as,null),V(this,os,new Map),V(this,ws,!1),V(this,Ys,!1),V(this,Ss,null),V(this,Js,null),V(this,Ms,null),V(this,Ds);const G=[...W(I,ts).values()];if(!I._initialized){I._initialized=!0;for(const I of G)I.initialize(c,g)}g.registerEditorTypes(G),R(this,Ds,g),this.pageIndex=C,this.div=A,R(this,ms,Z),R(this,hs,d),this.viewport=i,R(this,Js,F),this.drawLayer=B,this._structTree=l,W(this,Ds).addLayer(this)}get isEmpty(){return 0===W(this,os).size}get isInvisible(){return this.isEmpty&&W(this,Ds).getMode()===jC.NONE}updateToolbar(I){W(this,Ds).updateToolbar(I)}updateMode(g=W(this,Ds).getMode()){switch(U(this,Xs,ps).call(this),g){case jC.NONE:return this.disableTextSelection(),this.togglePointerEvents(!1),this.toggleAnnotationLayerPointerEvents(!0),void this.disableClick();case jC.INK:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick();break;case jC.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}this.toggleAnnotationLayerPointerEvents(!1);const{classList:C}=this.div;for(const A of W(I,ts).values())C.toggle(`${A._type}Editing`,g===A._editorType);this.div.hidden=!1}hasTextLayer(I){var g;return I===(null==(g=W(this,Js))?void 0:g.div)}setEditingState(I){W(this,Ds).setEditingState(I)}addCommands(I){W(this,Ds).addCommands(I)}cleanUndoStack(I){W(this,Ds).cleanUndoStack(I)}toggleDrawing(I=!1){this.div.classList.toggle("drawing",!I)}togglePointerEvents(I=!1){this.div.classList.toggle("disabled",!I)}toggleAnnotationLayerPointerEvents(I=!1){var g;null==(g=W(this,hs))||g.div.classList.toggle("disabled",!I)}async enable(){this.div.tabIndex=0,this.togglePointerEvents(!0);const I=new Set;for(const C of W(this,os).values())C.enableEditing(),C.show(!0),C.annotationElementId&&(W(this,Ds).removeChangedExistingAnnotation(C),I.add(C.annotationElementId));if(!W(this,hs))return;const g=W(this,hs).getEditableAnnotations();for(const C of g){if(C.hide(),W(this,Ds).isDeletedAnnotationElement(C.data.id)||I.has(C.data.id))continue;const g=await this.deserialize(C);g&&(this.addOrRebuild(g),g.enableEditing())}}disable(){var g;R(this,Ys,!0),this.div.tabIndex=-1,this.togglePointerEvents(!1);const C=new Map,A=new Map;for(const I of W(this,os).values())if(I.disableEditing(),I.annotationElementId){if(null!==I.serialize()){C.set(I.annotationElementId,I);continue}A.set(I.annotationElementId,I),null==(g=this.getEditableAnnotation(I.annotationElementId))||g.show(),I.remove()}if(W(this,hs)){const I=W(this,hs).getEditableAnnotations();for(const g of I){const{id:I}=g.data;if(W(this,Ds).isDeletedAnnotationElement(I))continue;let l=A.get(I);l?(l.resetAnnotationElement(g),l.show(!1),g.show()):(l=C.get(I),l&&(W(this,Ds).addChangedExistingAnnotation(l),l.renderAnnotationElement(g)&&l.show(!1)),g.show())}}U(this,Xs,ps).call(this),this.isEmpty&&(this.div.hidden=!0);const{classList:l}=this.div;for(const Z of W(I,ts).values())l.remove(`${Z._type}Editing`);this.disableTextSelection(),this.toggleAnnotationLayerPointerEvents(!0),R(this,Ys,!1)}getEditableAnnotation(I){var g;return(null==(g=W(this,hs))?void 0:g.getEditableAnnotation(I))||null}setActiveEditor(I){W(this,Ds).getActive()!==I&&W(this,Ds).setActiveEditor(I)}enableTextSelection(){var I;if(this.div.tabIndex=-1,null!=(I=W(this,Js))&&I.div&&!W(this,Ms)){R(this,Ms,new AbortController);const I=W(this,Ds).combinedSignal(W(this,Ms));W(this,Js).div.addEventListener("pointerdown",U(this,Xs,Hs).bind(this),{signal:I}),W(this,Js).div.classList.add("highlighting")}}disableTextSelection(){var I;this.div.tabIndex=0,null!=(I=W(this,Js))&&I.div&&W(this,Ms)&&(W(this,Ms).abort(),R(this,Ms,null),W(this,Js).div.classList.remove("highlighting"))}enableClick(){if(W(this,ns))return;R(this,ns,new AbortController);const I=W(this,Ds).combinedSignal(W(this,ns));this.div.addEventListener("pointerdown",this.pointerdown.bind(this),{signal:I}),this.div.addEventListener("pointerup",this.pointerup.bind(this),{signal:I})}disableClick(){var I;null==(I=W(this,ns))||I.abort(),R(this,ns,null)}attach(I){W(this,os).set(I.id,I);const{annotationElementId:g}=I;g&&W(this,Ds).isDeletedAnnotationElement(g)&&W(this,Ds).removeDeletedAnnotationElement(I)}detach(I){var g;W(this,os).delete(I.id),null==(g=W(this,ms))||g.removePointerInTextLayer(I.contentDiv),!W(this,Ys)&&I.annotationElementId&&W(this,Ds).addDeletedAnnotationElement(I)}remove(I){this.detach(I),W(this,Ds).removeEditor(I),I.div.remove(),I.isAttachedToDOM=!1}changeParent(I){var g;I.parent!==this&&(I.parent&&I.annotationElementId&&(W(this,Ds).addDeletedAnnotationElement(I.annotationElementId),bB.deleteAnnotationElement(I),I.annotationElementId=null),this.attach(I),null==(g=I.parent)||g.detach(I),I.setParent(this),I.div&&I.isAttachedToDOM&&(I.div.remove(),this.div.append(I.div)))}add(I){if(I.parent!==this||!I.isAttachedToDOM){if(this.changeParent(I),W(this,Ds).addEditor(I),this.attach(I),!I.isAttachedToDOM){const g=I.render();this.div.append(g),I.isAttachedToDOM=!0}I.fixAndSetPosition(),I.onceAdded(),W(this,Ds).addToAnnotationStorage(I),I._reportTelemetry(I.telemetryInitialData)}}moveEditorInDOM(I){var g;if(!I.isAttachedToDOM)return;const{activeElement:C}=document;I.div.contains(C)&&!W(this,as)&&(I._focusEventsAllowed=!1,R(this,as,setTimeout((()=>{R(this,as,null),I.div.contains(document.activeElement)?I._focusEventsAllowed=!0:(I.div.addEventListener("focusin",(()=>{I._focusEventsAllowed=!0}),{once:!0,signal:W(this,Ds)._signal}),C.focus())}),0))),I._structTreeParentId=null==(g=W(this,ms))?void 0:g.moveElementInDOM(this.div,I.div,I.contentDiv,!0)}addOrRebuild(I){I.needsToBeRebuilt()?(I.parent||(I.parent=this),I.rebuild(),I.show()):this.add(I)}addUndoableEditor(I){const g=()=>I._uiManager.rebuild(I),C=()=>{I.remove()};this.addCommands({cmd:g,undo:C,mustExec:!1})}getNextId(){return W(this,Ds).getId()}combinedSignal(I){return W(this,Ds).combinedSignal(I)}canCreateNewEmptyEditor(){var I;return null==(I=W(this,Xs,es))?void 0:I.canCreateNewEmptyEditor()}pasteEditor(I,g){W(this,Ds).updateToolbar(I),W(this,Ds).updateMode(I);const{offsetX:C,offsetY:A}=U(this,Xs,us).call(this),l=this.getNextId(),Z=U(this,Xs,ys).call(this,{parent:this,id:l,x:C,y:A,uiManager:W(this,Ds),isCentered:!0,...g});Z&&this.add(Z)}async deserialize(g){var C;return await(null==(C=W(I,ts).get(g.annotationType??g.annotationEditorType))?void 0:C.deserialize(g,this,W(this,Ds)))||null}createAndAddNewEditor(I,g,C={}){const A=this.getNextId(),l=U(this,Xs,ys).call(this,{parent:this,id:A,x:I.offsetX,y:I.offsetY,uiManager:W(this,Ds),isCentered:g,...C});return l&&this.add(l),l}addNewEditor(){this.createAndAddNewEditor(U(this,Xs,us).call(this),!0)}setSelected(I){W(this,Ds).setSelected(I)}toggleSelected(I){W(this,Ds).toggleSelected(I)}unselect(I){W(this,Ds).unselect(I)}pointerup(I){var g;const{isMac:C}=oA.platform;if(!(0!==I.button||I.ctrlKey&&C)&&I.target===this.div&&W(this,ws)&&(R(this,ws,!1),null==(g=W(this,Xs,es))||!g.isDrawer||!W(this,Xs,es).supportMultipleDrawings)){if(!W(this,Ns))return void R(this,Ns,!0);if(W(this,Ds).getMode()===jC.STAMP)return void W(this,Ds).unselectAll();this.createAndAddNewEditor(I,!1)}}pointerdown(I){var g;if(W(this,Ds).getMode()===jC.HIGHLIGHT&&this.enableTextSelection(),W(this,ws))return void R(this,ws,!1);const{isMac:C}=oA.platform;if(0!==I.button||I.ctrlKey&&C||I.target!==this.div)return;if(R(this,ws,!0),null!=(g=W(this,Xs,es))&&g.isDrawer)return void this.startDrawingSession(I);const A=W(this,Ds).getActive();R(this,Ns,!A||A.isEmpty())}startDrawingSession(I){if(this.div.focus(),W(this,Ss))return void W(this,Xs,es).startDrawing(this,W(this,Ds),!1,I);W(this,Ds).setCurrentDrawingSession(this),R(this,Ss,new AbortController);const g=W(this,Ds).combinedSignal(W(this,Ss));this.div.addEventListener("blur",(({relatedTarget:I})=>{I&&!this.div.contains(I)&&this.commitOrRemove()}),{signal:g}),W(this,Xs,es).startDrawing(this,W(this,Ds),!1,I)}endDrawingSession(I=!1){return W(this,Ss)?(W(this,Ds).setCurrentDrawingSession(null),W(this,Ss).abort(),R(this,Ss,null),W(this,Xs,es).endDrawing(I)):null}findNewParent(I,g,C){const A=W(this,Ds).findParent(g,C);return null!==A&&A!==this&&(A.changeParent(I),!0)}commitOrRemove(){return!!W(this,Ss)&&(this.endDrawingSession(),!0)}onScaleChanging(){W(this,Ss)&&W(this,Xs,es).onScaleChangingWhenDrawing(this)}destroy(){var I,g;this.commitOrRemove(),(null==(I=W(this,Ds).getActive())?void 0:I.parent)===this&&(W(this,Ds).commitOrRemove(),W(this,Ds).setActiveEditor(null)),W(this,as)&&(clearTimeout(W(this,as)),R(this,as,null));for(const C of W(this,os).values())null==(g=W(this,ms))||g.removePointerInTextLayer(C.contentDiv),C.setParent(null),C.isAttachedToDOM=!1,C.div.remove();this.div=null,W(this,os).clear(),W(this,Ds).removeLayer(this)}render({viewport:I}){this.viewport=I,Nl(this.div,I);for(const g of W(this,Ds).getEditors(this.pageIndex))this.add(g),g.rebuild();this.updateMode()}update({viewport:I}){W(this,Ds).commitOrRemove(),U(this,Xs,ps).call(this);const g=this.viewport.rotation,C=I.rotation;if(this.viewport=I,Nl(this.div,{rotation:C}),g!==C)for(const A of W(this,os).values())A.rotate(C)}get pageDimensions(){const{pageWidth:I,pageHeight:g}=this.viewport.rawDims;return[I,g]}get scale(){return W(this,Ds).viewParameters.realScale}};ms=new WeakMap,Ns=new WeakMap,hs=new WeakMap,ns=new WeakMap,as=new WeakMap,os=new WeakMap,ws=new WeakMap,Ys=new WeakMap,Ss=new WeakMap,Js=new WeakMap,Ms=new WeakMap,Ds=new WeakMap,ts=new WeakMap,Xs=new WeakSet,Hs=function(I){W(this,Ds).unselectAll();const{target:g}=I;if(g===W(this,Js).div||("img"===g.getAttribute("role")||g.classList.contains("endOfContent"))&&W(this,Js).div.contains(g)){const{isMac:g}=oA.platform;if(0!==I.button||I.ctrlKey&&g)return;W(this,Ds).showAllEditors("highlight",!0,!0),W(this,Js).div.classList.add("free"),this.toggleDrawing(),fU.startHighlighting(this,"ltr"===W(this,Ds).direction,{target:W(this,Js).div,x:I.x,y:I.y}),W(this,Js).div.addEventListener("pointerup",(()=>{W(this,Js).div.classList.remove("free"),this.toggleDrawing(!0)}),{once:!0,signal:W(this,Ds)._signal}),I.preventDefault()}},es=function(){return W(ks,ts).get(W(this,Ds).getMode())},ys=function(I){const g=W(this,Xs,es);return g?new g.prototype.constructor(I):null},us=function(){const{x:I,y:g,width:C,height:A}=this.div.getBoundingClientRect(),l=Math.max(0,I),Z=Math.max(0,g),d=Math.min(window.innerWidth,I+C),B=Math.min(window.innerHeight,g+A),F=(l+d)/2-I,i=(Z+B)/2-g,[c,G]=this.viewport.rotation%180===0?[F,i]:[i,F];return{offsetX:c,offsetY:G}},ps=function(){for(const I of W(this,os).values())I.isEmpty()&&I.remove()},c(ks,"_initialized",!1),V(ks,ts,new Map([OV,vb,Qs,fU].map((I=>[I._editorType,I]))));let Ks=ks;var zs,Ts,Ls,Es,js,xs,Os,rs,vs,Ps;const fs=class I{constructor({pageIndex:I}){V(this,Os),V(this,zs,null),V(this,Ts,0),V(this,Ls,new Map),V(this,Es,new Map),this.pageIndex=I}setParent(I){if(W(this,zs)){if(W(this,zs)!==I){if(W(this,Ls).size>0)for(const g of W(this,Ls).values())g.remove(),I.append(g);R(this,zs,I)}}else R(this,zs,I)}static get _svgFactory(){return iA(this,"_svgFactory",new xG)}draw(g,C=!1,A=!1){const l=b(this,Ts)._++,Z=U(this,Os,rs).call(this),d=I._svgFactory.createElement("defs");Z.append(d);const B=I._svgFactory.createElement("path");d.append(B);const F=`path_p${this.pageIndex}_${l}`;B.setAttribute("id",F),B.setAttribute("vector-effect","non-scaling-stroke"),C&&W(this,Es).set(l,B);const i=A?U(this,Os,vs).call(this,d,F):null,c=I._svgFactory.createElement("use");return Z.append(c),c.setAttribute("href",`#${F}`),this.updateProperties(Z,g),W(this,Ls).set(l,Z),{id:l,clipPathId:`url(#${i})`}}drawOutline(g,C){const A=b(this,Ts)._++,l=U(this,Os,rs).call(this),Z=I._svgFactory.createElement("defs");l.append(Z);const d=I._svgFactory.createElement("path");Z.append(d);const B=`path_p${this.pageIndex}_${A}`;let F;if(d.setAttribute("id",B),d.setAttribute("vector-effect","non-scaling-stroke"),C){const g=I._svgFactory.createElement("mask");Z.append(g),F=`mask_p${this.pageIndex}_${A}`,g.setAttribute("id",F),g.setAttribute("maskUnits","objectBoundingBox");const C=I._svgFactory.createElement("rect");g.append(C),C.setAttribute("width","1"),C.setAttribute("height","1"),C.setAttribute("fill","white");const l=I._svgFactory.createElement("use");g.append(l),l.setAttribute("href",`#${B}`),l.setAttribute("stroke","none"),l.setAttribute("fill","black"),l.setAttribute("fill-rule","nonzero"),l.classList.add("mask")}const i=I._svgFactory.createElement("use");l.append(i),i.setAttribute("href",`#${B}`),F&&i.setAttribute("mask",`url(#${F})`);const c=i.cloneNode();return l.append(c),i.classList.add("mainOutline"),c.classList.add("secondaryOutline"),this.updateProperties(l,g),W(this,Ls).set(A,l),A}finalizeDraw(I,g){W(this,Es).delete(I),this.updateProperties(I,g)}updateProperties(g,C){var A;if(!C)return;const{root:l,bbox:Z,rootClass:d,path:B}=C,F="number"==typeof g?W(this,Ls).get(g):g;if(F){if(l&&U(this,Os,Ps).call(this,F,l),Z&&U(A=I,js,xs).call(A,F,Z),d){const{classList:I}=F;for(const[g,C]of Object.entries(d))I.toggle(g,C)}if(B){const I=F.firstChild.firstChild;U(this,Os,Ps).call(this,I,B)}}}updateParent(I,g){if(g===this)return;const C=W(this,Ls).get(I);C&&(W(g,zs).append(C),W(this,Ls).delete(I),W(g,Ls).set(I,C))}remove(I){W(this,Es).delete(I),null!==W(this,zs)&&(W(this,Ls).get(I).remove(),W(this,Ls).delete(I))}destroy(){R(this,zs,null);for(const I of W(this,Ls).values())I.remove();W(this,Ls).clear(),W(this,Es).clear()}};zs=new WeakMap,Ts=new WeakMap,Ls=new WeakMap,Es=new WeakMap,js=new WeakSet,xs=function(I,[g,C,A,l]){const{style:Z}=I;Z.top=100*C+"%",Z.left=100*g+"%",Z.width=100*A+"%",Z.height=100*l+"%"},Os=new WeakSet,rs=function(){const I=fs._svgFactory.create(1,1,!0);return W(this,zs).append(I),I.setAttribute("aria-hidden",!0),I},vs=function(I,g){const C=fs._svgFactory.createElement("clipPath");I.append(C);const A=`clip_${g}`;C.setAttribute("id",A),C.setAttribute("clipPathUnits","objectBoundingBox");const l=fs._svgFactory.createElement("use");return C.append(l),l.setAttribute("href",`#${g}`),l.classList.add("clip"),A},Ps=function(I,g){for(const[C,A]of Object.entries(g))null===A?I.removeAttribute(C):I.setAttribute(C,A)},V(fs,js);let _s=fs;globalThis.pdfjsTestingUtils={HighlightOutliner:BU},yC.AbortException,yC.AnnotationEditorLayer,yC.AnnotationEditorParamsType,yC.AnnotationEditorType,yC.AnnotationEditorUIManager,yC.AnnotationLayer,yC.AnnotationMode,yC.ColorPicker,yC.DOMSVGFactory,yC.DrawLayer,yC.FeatureTest;var qs=yC.GlobalWorkerOptions;yC.ImageKind,yC.InvalidPDFException,yC.MissingPDFException,yC.OPS,yC.OutputScale,yC.PDFDataRangeTransport,yC.PDFDateString,yC.PDFWorker,yC.PasswordResponses,yC.PermissionFlag,yC.PixelsPerInch,yC.RenderingCancelledException,yC.TextLayer,yC.UnexpectedResponseException,yC.Util,yC.VerbosityLevel,yC.XfaLayer,yC.build,yC.createValidAbsoluteUrl,yC.fetchData;var $s=yC.getDocument;yC.getFilenameFromUrl,yC.getPdfFilenameFromUrl,yC.getXfaPageViewport,yC.isDataScheme,yC.isPdfFile,yC.noContextMenu,yC.normalizeUnicode,yC.setLayerDimensions,yC.shadow,yC.stopEvent,yC.version;const IQ="data:text/javascript;base64,",gQ=async I=>(console.log(I,"555"),qs.workerSrc=IQ,await $s("string"==typeof I?{url:I}:{data:I}).promise),CQ=(I,g,C)=>{const A=window.devicePixelRatio||1;return g.width=Math.floor(I.width*A),g.height=Math.floor(I.height*A),g.style.width=Math.floor(I.width)+"px",g.style.height=Math.floor(I.height)+"px",{canvasContext:C,transform:1!==A?[A,0,0,A,0,0]:null,viewport:I}},AQ=(I,g)=>{const C=document.createElement("div");C.className="pdf-item",C.style.cssText="display:flex;justify-content:center;align-items:center;margin-bottom:15px;";const A=document.createElement("canvas");A.setAttribute("data-index",String(g)),C.appendChild(A),I.appendChild(C);const l=A.getContext("2d");return{canvas:A,context:l}},lQ={class:"nw-office--pdf-wrapper"},ZQ={key:0,class:"nw-office--pdf-toolbar nw-flex-center"},dQ={class:"nw-scale-percent-text"},BQ={class:"nw-office--pdf"},FQ=(0,A.pM)({name:"OfficePdf",__name:"index",props:{data:{},toolbar:{type:Boolean,default:!0},thumbnail:{type:Boolean,default:!0}},setup(I){const g=I,C=(0,l.KR)(),B=(0,A.EW)((()=>g.data)),F=(0,l.KR)(1.5),i=(I=!1)=>{requestAnimationFrame((async()=>{C.value.innerHTML="",g.thumbnail&&!I&&(c.value.innerHTML="");const A=await gQ(B.value),{numPages:l}=A;for(let Z=1;Z<l;Z++){const l=await A.getPage(Z),d=l.getViewport({scale:F.value}),{canvas:B,context:i}=AQ(C.value,Z),G=CQ(d,B,i);if(l.render(G),g.thumbnail&&!I){const I=l.getViewport({scale:.3}),{canvas:g,context:C}=AQ(c.value,Z),A=CQ(I,g,C);l.render(A)}}}))},c=(0,l.KR)(),G=I=>{"minus"===I&&(F.value-=.2),"add"===I&&(F.value+=.2),F.value=+F.value.toFixed(1),i(!0)},W=I=>{const g=I.target.dataset.index,C=document.querySelectorAll(".pdf-content .pdf-item");g&&(console.log(g),C[Number(g)-1].scrollIntoView({behavior:"smooth",block:"start"}))};return(0,A.wB)((()=>g.data),(()=>{g.data&&i()})),(0,A.sV)((()=>{g.data&&i()})),(I,g)=>((0,A.uX)(),(0,A.CE)("div",lQ,[I.toolbar?((0,A.uX)(),(0,A.CE)("div",ZQ,[(0,A.Lk)("p",{class:"nw-scale-button nw-flex-center",onClick:g[0]||(g[0]=I=>G("minus"))}," 缩小 "),(0,A.Lk)("p",dQ,(0,Z.v_)(parseInt(100*F.value+""))+"%",1),(0,A.Lk)("p",{class:"nw-scale-button nw-flex-center",onClick:g[1]||(g[1]=I=>G("add"))}," 放大 ")])):(0,A.Q3)("",!0),(0,A.Lk)("div",{class:(0,Z.C4)(["nw-office--pdf-container",[{full:!I.toolbar}]])},[I.thumbnail?((0,A.uX)(),(0,A.CE)("div",{key:0,class:"nw-office--pdf-thumbnails",onClick:(0,d.D$)(W,["stop"])},[(0,A.Lk)("div",{class:"nw-office--pdf-thumbnails-content",ref_key:"thumbnailRef",ref:c},null,512)])):(0,A.Q3)("",!0),(0,A.Lk)("div",BQ,[(0,A.Lk)("div",{class:"content pdf-content",ref_key:"containerRef",ref:C},null,512)])],2)]))}}),iQ=HC(FQ),cQ=(0,A.pM)({name:"OfficeExcel",__name:"index",setup(I){return(I,g)=>((0,A.uX)(),(0,A.CE)("button",null,"excel 预览"))}}),GQ=HC(cQ),WQ=[iQ,GQ],VQ=XC(WQ)}}]);
//# sourceMappingURL=chunk-vendors.9a1c2c2d.js.map